<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ruvikm</title>
  <icon>https://www.gravatar.com/avatar/710ecfc7f4f0bd22cb3d5ec44d498105</icon>
  <subtitle>Nia~</subtitle>
  <link href="https://ruvikm.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://ruvikm.gitee.io/"/>
  <updated>2024-06-24T14:17:23.729Z</updated>
  <id>https://ruvikm.gitee.io/</id>
  
  <author>
    <name>Ruvikm</name>
    <email>ruvikm@126.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式数据库期末复习</title>
    <link href="https://ruvikm.gitee.io/posts/ab78dc44.html"/>
    <id>https://ruvikm.gitee.io/posts/ab78dc44.html</id>
    <published>2024-06-24T14:12:57.000Z</published>
    <updated>2024-06-24T14:17:23.729Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6852e35ec018bc955307c84e1b628c89c4cca66e7ad3e070c3b5e1f7ecc77c13">f666a1e82130d441cf5f17739ffab407ad4aeecdcf1a86bf778145f0cb50009276c69c6287e8c1a736051d2e4da5ba415f6309a031c593ea1b0dcb188a02bf6a47ca96ef1caff392f0fa9f54c07462be4e6eb7b8819c0ea1147c109cd3b8333f70a3e644358d963fc7cc70b8fa752bd67b9b4dd41f50a36c7be5097bc8240a610b4d768021939efe6becd3e1412bdefe1e347fddceb6dca85176f43235620d4428f4aee7eb2c7f1b0b094b07eadbf12b66c85f0855225bd23cf42206cf690c9a996f10598e986fdc12dbe851b78026bce7963a3287717f59adfbc95cfa1ce32073536b8ce26a2057760a430f1f7a48527cfc4cbd757f8281d621ba7c10f4c50289cd197b49da1b43848fb5a6ba2bcf9f8b3c62b953faf0412f991af82f81431b0f4249bbe9c7d0c9580d308e3143763d7e3c7e5bfa1a613a388c52d7dfd262cd946c3710219440961d487d3daca3ab8130f02c18f4c6a10a51ca607a91601bab5871d54123a1d2ebf5a7773cc7a034664cdd649dd76c2ce46996de99e6c378856517d744bdcd455d3fcd5e74b0bf530baa465ec736801766225fa39f24818ef9995e422877e20cf67a8e00db2d6c962ef2a924b9daea20d4fdbcbb6e55e6fe3a6f9201628549d65b411bd514988afdeed1e99180a8acff27d89209419b5d20fa608f877cc26ec8bc097d2f3eab06e823eeac56ffb3290d5663c0ef6a888f1c442c8b370a9ccbebef4e7a12824b9109dc7c0b9f73c839e33d5880e7a62728e23cfc176c2555191c1fcfff5c163c1384f322f4cedc7ca282b1d04f5d72e422438f2ba704e570a2fc892321142d5f5193ae9e29c7d5ef01c861f24eb2a985d1ff2c587d514ed129e10fe6ce8e48a47408276326ad6e870daccebe40e68f35615f70fc9e22d7b82569ecde7a39b3bd6d0fe61f276ab95873f7a229c240a48d2b77f5a9642760616baa638e080bc1f44e170dd337ded4b2f58972e3058a59326afe339e0a8ce0fa751e2174417910d7d8616b30baa2a4daa98cd813ab26abbdd158a021d81fb8f307fa7734518636838b3259b2c0121183fa9064791a209768c570ee0fc81bf9b8ffb509d706998b77430d58a0ccb7ba1fa5e94e215c7653c44e3dd1f97320e4b1e5c95c0c1e2491b4ec321994dbf03fa8ba330ce1f0ce51030de50a960d693d3332bc6cf1396d4415771cdfb985436e028c8e3a48e58a5cec0051bd671a9e84bb80b2089c27373721ded766c8b0b42828075cb1fbfc04b3819d1357a1ae97f0943f94356ae5d4d9f3c791a3b07271f4ca94d30df3a45bf0b4734d94eee65ddc99221e0be09310323a9898c06f64ee470dc1764ccee8d43e7121b705f471785b4c18215e56eff1339a7d9be361543f156573a5f877b640b7771dcad25f6e84f1d582373a8b446aab97819fcf42a31e005987e7b6c050c7950f2f3b47b426b27d346d13a867b712b000b5cf6a003fc6105972125170d0cf2074747e13a4d651aece7f09bd9d0594e4f4979fb2cd4830fe96794695241681abf66336df3b72597680e2fa198ee0591e8837a1423e5eb0b4865f24d51f91e60475f9e881812a8fed11ff47243068842012dd9f79c4efd190691b3be4f804f29673b1961e4cf9fa19063b2b4b1ca1db31e3c814dc63cb45ac6020214d2bbbf1b76161aa57da7eab2d75e524c8b97cc06e27df53ea07c598d7e624c3c04b83c2786644fec6a2c6bab5dfb27c343110eebf920c090451f5d35dfa24e00f53f1ab9a3b477ed829b2092c499714079ab46b918b12518953e2caa28e1595f1908e2ec5eef3d305eb7892d51fa4180326a174b7876c5ed77484b13d1de89dbbb0550c032ff6caa9f6150437e384b178219cca8b5475f3dcb4b499ad4d5ae3f8631fd14e4d9e74b36b2ebc5b34366ccd4f78e894fe0477e6cf5308e3c7859b20557df8616d541205a1ac8ce52887db63ced57dd989f673c888f98d4d043be013104a696bb58896867147877d2ef9787b2dfde4e7c74af4285372039aba0dea2a768daa06d7edfe4b5212d34cdf286cc0f7fc4c27604740dbe51a31021453720a988b5d794dc6e81bdc0e918c2a80137d27f0b3c093089db84f3d31b6051296a14540aebc8321f2672f910552b57131ffc20a2d9e2064cd5a1f12cc43d8775745b312b5d6a9b2eb4bc907c491defc2e869cce261f2d9478afd83e76972ff4a390e07c0555528055e8d1da5ea8601b810433c47597499dd4b6922106919f1d035609b05e10102253c7bd5c029c330ae48658dd86a886a64fcbf76e26c4efe432be6bcac1fbe949fbcc24c8b5cdf22f9a0de0e2b297db2704a863be2618577879d60b5318bd9d6dc6b885e5a7765b44f575ff48862eb66f094018a321da4ac813f171b5b223413d745d2e08c99bf56eb9d15d25470d1968f194a1e9c2cb6dd67699da33130e761aa6bb72ad458c1585094448b173b72ae7070c04ae9aeef50edf2f48a0b59b74797b6dc290af803b54be1799600e7fff7dfa92b3138ee4d4f3ecbcfae093d3b5be3f1bfc3f35335e1046d6c9caa067857033ad363a77830add69bb68b70af36ab1237b46c4f3d51cc9df9a29d7983f7940f2995d3967beb2d828ba658b9f20b6a1a5543fd24dcda1a3a84f28035a6696298716ef8c3debd890991a6d97e576cbff679348287daecc5e9c4c7c7a4a099cdf7ff15fc258b68cf419ef6a1d666d330fc7919ed4cd978696b14aa4817a06018e8ae82e3456bc6d69b5ae5968726e17b65b3e4e4670570af050f522de9e8cf48f78c6e199e2fd159521f5400735958bfc2220a26d600d130f0b3c5c3821caf9df7b9c07b6f476f8becf340f4f3cc614dd63da2edf3c7dadf1c833d1236e340a7602859e15e2f3525504c9575f9cb8705b4b4a73d145c141f880a071bb87f87ce562dac60b93f523f550529c684db403492c8c7a425c8a702f5a229eeb50f26e71a68a9dc4d21d6d7c0987f6b8c6372c8fa617dd2bb9e25df90084c5c99bd698e5bc7630fdec29ece095950a03b1409c4322249f3c2d24ed127e96a77ae043f5f21b834e19e934d3c30dda236c24c88916bd28f24cfa13ce2f21971820316499cb1d53c0190905d189e95546facb4eef784fcd685984de6a6c4417aafa7bf8a39272238119aa44f40d4890b0d18698b7c34a034430101a78633ba55665ab6d094e497da22642951374f382b212e14f00084fcfed8713ff7a6b29b1d20ef768816bd1fc546410d34afafff48063e0765761f8ffcc0d8ebe88604a47a7f00f23cf5372a1872647bff4687952f30f284dc5e299a473067fc697721b01897df039dbc9a0fdfc6f9be8437d2a8c383335a030a78ed5dedf2493baa0e3d061d16f11d53d038d67d13be4e35f82a990365042c9db5dfbb14b93234c332d73f7de1834d8604930b157d6855709795d525ef8cdcf3fccf587d63dae04af61be589215b18f419d31b45f80a480d5407b09e9c813f6803422dfdbb49dcb2bc018f7ddc2ea60b62d571c02205b65407d46d401b3cedfee82bb955aff6b494848fd9dcb90df43e43f4ba3ce92b8a8ddd9221c983618df6bf767d301484be150a739a55a6b38c4ef78029ed936827bea6477c2e522615efc7591a86af23f0a031a1c774f144c172ea8d709bce2c0e2a76925be5e8f3c88612a7d28eb2f6e4cf438b93d6f6d37204f0deb749e4e009cd0161c850c7ee80c5e1c33cef873f17e88987a585d0e46be3f3b264a4520a104dd20b3abc38c789d68916e6d4a39708cfca908d2bb337166d3b431a2e9e320ce10211efb9fb609a0fe366cc24eef21f9aa66f0bff00f1d89a409a2dd9e0d65c31d0827a0d55251378ffa0762420f0bd520f343fa85aefd736b3b99de20e9fc994d927faa4ba9f65d2fea3f2a0f7882dbde3e5aa9e49d90875a7fcd4ce2e26b0bd79e3033f8ccb0124edc2c2f149313ddd536774e3233946f550c2ee58d3720daddef328f797c5225808615cc735b9c979b8ad663477d8309589787ab71087c603da9be17f1ad8ebb4d94650fb3048f85760d3d48c6eeb10a37899cae8a84d411ed541e6db7242ba742baf0f3c52edf59c492c85986310abb84b48927926c6f436a1afb7160049c1f707e57f1f26c56c944b3bbb8b8e170d5e06acd7a9c0f30fc3ec5f2af89b0e5f422d391b4a1fea97956614494490a261285a877b44f6b0fd1d65f4c1b4268854a7235240a8d69c035703c8464fbae4c0c0e854d9e882df88882561dc1b6dcc777ea7e3ad21f7c4936adb35c294b1c8589fffb2751102ac49b9236660280c55e951ecc292134e220d1f8e626e61c181c8481c004eccf337a86718fe912ae07bd00d303fbc54861c437a5a3eb234aca9bddfa56066906bec6db9a325d0b624fd1ad639ced3822022e90be73816bae0cd4a57225fb26edd064e87a5d4e8b30a3442881e1404daf0cc31ceaf517e7382b0ba73a0e808e34ee5f868850d5bb6ee7e441c63c28ed7b130ec2ec185fea9778e585b4ca719a56bc7e5835bb19d804c018e7f5eebd6b983ad760e066a81bfa211e885eeb6de3603957fd397a91dd77017998de2d53835ff95f1194cbe480f76073e4e1aee42e146c69068db180f1d4d28a8c93f94e2fa68e542f740da36f5eb8b8239503f20633e6d32be10183f0698f7537b994e36cc582b62e86eb930d9ad0edd787c5d047b0cb00dcc0c1488f59d540ab9c937cbdf58e30b0c52fe1288bf8efdd22640ccc9095a5faebe02b0b6c8d539df4c531bb36035a73006fca9e20588691b5d51b2dc23e9b28187bbc1a0e102d2a105a216905f642073b07e398398d237b60f140589a361b528a69447d46ec36df2d16703b99bbbf4c623138c264ea08705cfa42ac9bc73424872b9437731381201c2918eb1bd36c737ff42ef46d61e6d95a560eea9e6afc4d782e24f906442f4828e8eda42cc4c0119e4441a34418597c757bf2fe7c125e8331ce5a35b4f78813491653d1e484d8e0aeb0fb11158eb79c7a529cd618d0f3f634f73851a057e857103979627a7d156e29684cfa60dcb2e4b6461fcc692d8a67c80c3140b830f9f71896ed5d3a073cfc8b79f7d7c924863dfaea809eb7352d9f09881e7bd9df5fd28c766cca0c5de8861de1f930d2348e8cd2bee7e3ec01736f21b43c387f5645f3f48e1ef9b91d21b4ce817682b7f954b467a6378b2b2868d7fa39189026fb5a93ee97efc699a72b7f3798997f51c2ba9ed9ad8bccad65240219fed0a30be41f205fb3cddb0ab6cdb67907c5f29e49bacc16f755885c5d6180c79a2bc23875d4bf703bd88c6abed7ae6cdfa0e501b59f80807646b82fd7ccce0547cfc28507b85b1dc6080a0017615d3a2bbb1ab500c9f1af10a5acea84ebad3f32eeb566a467c1c7330c7b79fa734257e0f2aa20ee59cd8f23b3958dc69172f8c069f78b8f8c93b4a72f6e924828e22043b0042d1bd823228d90389d3ce6db5e83fa0c3ab5603067af4e885c26ffcd1c585b13d1d8ca571796c9252cd08d1f26f3ff67dd755a7121cc8dec0daee0ca5586f54fa1054a079213dce539f8202579c2a9e54c477e51b1905706a8f9d712e8ce7e791ff21951ca611bc2d7fc25593dd40c4e863255884afa1053cba7716724aaf37c050956659cfae5ff3ecc3d467e560790f3d3205105ae49e7e2f8587109d67669ea14b848ce2dbd64a90cda2885c7fbc69c55320b135a0e15d72e69a2c57ffcf92c114e30571a2ef995de7edfd9d65905255088ce8fc9681c0807738aa1790075b20a83e654d6eadaf9d1bd2402d8a1c1ad0aba9629b5564fec00c1edfe784ee1143edeb3f6dcb02d8cc37c6c0b417246ca20f1ea05131d2697760beba8cffeee1bb783a40b8f5eb75de579c06800310e69876b877b2337706957730e1905207213ebedea21c6b862a8175db7fb623b93a44e3f35bb657009959f1f4c60b4a6f16c4edc953e45f45225a622e4f08747300657a88021dcbc614f0d66b16109558f01639c1f88b883266a3ad659f023e73fb82f08f913f68fac010a5be2ab55ebea756be52e788ca0856034657c4a13a5eb7aec7b4a6d483d592c85244c40ec69d0df272cb000ccc1e6ac3a92e13a631b50faa0c91938d8424cd3251d7a658af63444e3c1afd16c8a92afcbd33efa4b97664fc2dfd0ed465b386b0f5f73f43692aa9fa3becbf8111f990d6d5570eb0034df62f54e15d7b0a94da19b8229fb5fa04f1e19ffd669b865e4a387656e40814d9e7b6eb71307b6c582f586b019c36db59c7deef76d72644aeca4c439408763281134b7f067a582720c3e9c3ae202f914dd1889cf608ab8b683b3041acc8996378fbb6d61a32b1ea07120587b8bd47b302b7be1c99821aa406ae0a3a0c520716bfdceb91419856dae7d2089a7f115f65ff672a65c1f9283c22814fa3709d40aaa82acd694f05f114baec1e59408dd5650aba6642fe0ca15d06d514ebd3169bfc7d16b93cc38f1863362db63425c1d29b8ab311bb83c6362b28ef25f4c7f9f559ba8a9d717d1330f932876a9a04b51e9bd8e574b44e4c2559915262cff115d73ef9792677309ae367cfed2bee0b2ba867e70f1e2ae482ffc566807f8372509b235e0d1c14bef786b30dd7a45981443eb85d2e6f1639328cd070ca02c3e952cb8dad9035ccbbfb4715229dda88d055762bedd8a665cd37f1dae67bb42318375f313ff6de3364d0ace598d30cc98c1afefd4faa398b408abc9c7ecf7f902bbc251561bee4d5dfbf13e1cfb08faeea80b0a8c7b6934bd4b4695790fb3f3c94ba491dba426b62c26157ddfefd5a0b08d02e89abce23d1ab5710f8887b8755cf47aa3ed4cf9403a3db52b8f624441a08048cf68ae37b8322f2fdf8a534d9a499864bbb2c19fca205ae0c47ebf05d8a51024df163604988e3f8e6b72234217f16c938f3bd843a16b7d4b337a56f9dcaadc764c6834daca61398e3fedb8d0b31d3e1785dbcc6769883746c04994237c057f3d80e6d54422c70eb2cb4371e09a2d9fd160a5e94ffd14c94c4c2c50822823ea1a4dd731d2879a8f1dc860f691cc5eaef0aac379494f36aedfbd694c6bb2383bbe8a5f9b2f08e5359747b4a3f81e8d53846df63c0a7202374d2708a35231880557632d4e4396c66944031259b5aaf3b74179eecb715d79945a36ffddffe1e66bcf24623f5daa82004c7333d1c04500807072a0a25a4172b7b9ae07e40b3342b10eb9e189a87fe85f7d1a26ade807c98d0fc33450c00cd3cc92d7b2976ae428afed6bfff82308fa2fd144c75a28b560f2178182d3c8caeaa92e906272c58d9ffa1b318e90ff2be1417690afee9ff41b8045778c9cf726572bd521ea198231eb01021b2b3c2c01772211bdd989c4ea51bddcf9a11266972586040dbaa9e647dede5368862cb97c5a757e965daf75c151c2dc6bf8d27948f558f2793be22162e342558d68dc69856ef61f90515a4ce9ef9f88db3d061f691f93bf96de594136313f2fc7107092665a0228d3ab7f931d49774143dcca2b1ce69df4267670006d528fc1e6dc81411c940e8cfe4b565022149205a4131ad3c6117e2489ad8326c6e3082aca1f75bf3bef2431a0e4162579d55bdfe376d5fa06f03f9c410309f963f5324c4861dbd252d357d6d154adcde2731e65d334f41c5e77747b70a3d0a11774a9a260c4b2d7b2593131875152c83bfd71f2c80945df7caefc8602fe83d8e2baa349e7a5973d30c8392f24ea53d44d6cd1fa53ec70eb192cdc93a3530cdc5858cae2a0a5e878c4f9db0c8a7fcb69fc7527b179991cde53e9e677d96bbf27309df2c9d08f89098a6cec66023eff0aa7efe817e301934eea62305d99d57295d8b127dde4006a73b04c99dcca85c30099fe6a9b21abedef875f398c50649c889f4467deaefea86bca263ae77d65b0bd50bdcc37e3737d33338271dbe4f30deeef4123b89592a056241c79d072e0c5a9dbed8920720eea2ac792deae2838196ecf300aec69ccd5e1ee63ac8c1a7c0033bb18df950ec0d88a6c70e2a2397782f8538b34c6d574b0bb683835a431cf37301896f439b08707850ea916200628a733bc33ea42346ae6e7daff2bd26125872203e85965a01dae0f6f88593d486f686acedb5de9ac7a00d86de2c5aa00ef28a9786b07ba640c023ec92c38b183fb629efdfab335a625634ac102c5a213066da7fb18d03fe92b41a71c55c9ded0da822b58f9e9a0b9ad37d1848a23c01f51081bb7d20917608c5145bb4b4178f1599136c7f1c3af683e29659393d0921320bfdf29353f0c175b49b6a92ef2c07e2858dba73d1ed79c6152f7a9208db405545f6b4efb0dcca80cc82fe1b7b37dee3973c2384908b4a4dec43022e00c35e157b20701e1fbb8abf100f74fa47d29ec157adfe31db1ca419372cf80cc2ea1e55989a313a072f119ceef4799f8e29d044bab39d01f940034c994c6d2f952ed901418a61e202afed10bc36a466a0418258a68f701ecc80a5811e747212753b1b84444e6cf6249670cc2059ea2aa6ae11d9c491ac0183678953d02e8ac059cfea40647beb3ada9e00a286ea51c15a585df941d24d85654c7ccdbae14a4d97e36ab7a069d5c7d12d2c9440411b3b4c5e895d2b6955110378efb022a08e152a7c27e9ac0628bcb077df90f0d49e78e677c1e44f82a72501abff76f674350e201254ae16cc8341a614f73b770e455de1992aa11e2184f8674d826c3a7dc6590239dcfe485d46edc23141c8e88766331784739306f63e9b88e2c1555af91ff577ec77f00717bdf7b39178b86d5a1f84ca5ee12ccea20981de3ac14d7fd14bd2b8f24462211d8f2aab21f547e536f49420da4136e3cc159a212f8fcee3052109d3ea4ad9b102b5b45f84beadf381b8aa41ce6b5efeca806cadc5560128f10160bfb4472feabbd50c1c1688984897b0b5d7aa6020172fa05d49ea13aa935b79d4eb689dfff556513c2ee2d7654d4900769fb0e5a2b065a29467f992a87ab2740bbf7b2b7bab151923e0b8e51c24f1c386cfc817e08ac1f0bf3f673ec6db4185fb0bc33fa1a0c88cf8391a95972f20e983f3e129877e3b1d90e0c707dbdf4b6cdc8dfbcd4d9842b544d3d7427c20c6103ce34128fe00ceabf4e6f74dbb15c0773f27584a3e98bb14062a5041fe23b948aa0af8db9e299edb5710ca44ea7c354dcd322676186dc8ad21e82a704725ea941fec509aeb865ca892ceb79f2cba1149ef5239867b54aa0710cbc70a0eec77f6fff21a94a6ec783ec9aceb78944e0b121358d2095288d66899b7bb08e1def3b033479622ec97112c12a2b9b3daa4013dcc4c8d81567cf49fa16d2b1987ebc4573f1c7d6eb75753b782efe25c89b3d01764451d78d942a12debfba2f74f332ca1ceca39d7ae74fbecc2be72a1979f6370a1492ba720f0efb14156ba20be4c7b29d2403642a36a25dce375594d4c40fa7e8f3e373f21d5519015c819b223abc7d2e046c1e96ef1be6c70fd5bbd5f9343ba0a0b79268858469ab74342847223db86a5cb225a16b532e2a16d60d9eb96afb72b8cd37856aca0753dc5d8e6423218538199b2a9e486431cf923fb5143586575e739447f057b3c168b3d407147cfb2a87b12e66eedb1911b565eeb10baf63ad27df19f1299561ffd204b0f3ed3b118bc76bee217eacefa5b20c881af3d248b1e78e8ad2e0f1b3bfc5e05113c7f37766035cf225671bc7a4d3b2665201b50247a7ef4bc2f9b31666e226f59757589e7ebc0fc3fda8c3a33fdf6c3426cfe4fd136925b7160e4b0453f1a64fdd95e127d2306bc679787c51beae4ac4cf0f31876cf0e755a75c61ecca3df230f1c06cc4a6977dac5f6ca6ca86cbaf3841ff76ed5e0ca57ba650fd45bda20ad45b3b2b4a148993ca3e878bcc13fb6ebb9952a91497965332962b21b8b0f1903086a515d6a1def270bb224345671191832d3d8d0306f38bf08a77dc3a80f8bee02d355e7b2176932b2fbe5f84d23f8808a04d2e37eaa49bffb62837affab0dc07a3da072dd349711788535b02c5871fccb3349294eeb7b00c17fe07c2de354369539d8c983c6d925b284e57845be8ec4688f03b3682cacd0bba38a339ffe5dfe34d2e44e947471e0214e74579218ecba685f7aed923ab618e79532858280e0c689e0f8f8439718841266eca568df5707be9ef87fe118df899413e90400c85f5c952e4334759664dce7a92e58f69e0a3a2dc84ccbdb58e69ebca1aaa24405b38a1f06db27b4839801266a5c186ddae0ae0660a4f9b06cd741d9c11d275e6287dde2badef8865427039193fcd22d59802c6639dd611ed80e76fdf0513c3ef86fbdfc8e3a4960998912c83d4ba1b1093b89fef4cfbb48354c2a2863dafeab69c95f2c592cee1b81c1146e9ce6fc4584c3c32dacf050d1dbfba141cf9c397de87551a249cf6391111598428ba83ae125f1041b65b07b43c3c0616476084967a6497d30eb093823b53643331f4ef3d92cb83e6e402c653b55685083c5cb2cbe113e0ff47666dad8cabb3b14422904c6f283ba9677638f02016035163f643273866e9338f7e80f861261a265f1455765729322c50f82d655889f5c4634fbb777dd172153aca536158997ff55480c7ad2b676143631895c166846076d94f9dea95d0c1c9655efa1af742dc4b4b547cf3c81f792f847fa6451718a37ea8a9adb705428c09d3d4bad04822a2a92b4824ee2b9a89830022ce445adb8c9a9d3c4febd5d96daedff2295928e95070fdcaac0aaff09db2f3a8c7015c0e96708a158d31625134266b48aac74a88115f89df7aed9f646c86305919cc22c33ec79047b59d87266962781508cfb342bf33fb35f1ef8b5c8a567180ce6d17c8e9f1e0bb889763af83949f4688a79e8d8d3a8e7efa883023605d759a520a2506a55e68898914d7b15b91a9b70023e8e1f2301d1252fe0636f1b62c244cbe740d58b8f0656f08de9e59253b105903c73d64569e69b120281b2f15a56526f9cfd6586889191e740fe3b85446944e5c1149668d9b0d7df89eaf5fcb2b74d46c1baa020a19521bd1a6062465a48928c0e607e3ded0400f5a8c1a2c2f5c587e58b07e0ba6cfd5174c71c28139642651be6a967a595c566bd7eb6a21911dfd5e87174411c1bfef27ec89c8dbc9cf45f16ece8e05c61c9788730d5460ca81ee1f0c7fd0b1d47791b5f59300b81bf6849537672ad280f4d393be599431f5bb00a8d313d9cb1fae81d1b542f2bb30f01a4c1d17373311b60b8d21188538267ae55799e08677284ab8b4224e8d5a58433d4ab4eb176ecf869e052377d4f3cc44b620a5f05145cec7798b5e70eb52ddb1ee0509987eb0603f52c90f2dfcc2b0242c246df2249cd43588d3aa20a2e1adf2a1077c536b420fb8f3b86f3da3cd9945e2ec0657aaf05c6551377517fea9cd2cd0836c6a47fbde75ef83acf95dbddc1b8d931dfe9d6c5895aad68c5b5e5e816ea580277ea81b9b04a5656b2e7031aec5a1f231c2316978f553c7f70bcc7614e367b4bb3ee6eec0a2c895e2d2fb99b261ed36f38549d55ff78ca3ec051ab28f75699830c67e954f0f1897c9b7ebfcdf524bb7939d64e99bfddf83f2745abb29efcd3f3280eb61c1ff5811e1c08ad3ab02418588de1052c1f1057474757125440facc3f580f17a73c1f8a4863661b2e85c47b945c5ad167317d5b6e878ff431e9c28768f3f6e729edd6fe3280a249aa08c7ed80b484a319aea04c8bb47b59b225625efc78c6937937b045fa2ca5c92ca7e1b906b08c7bdf808bcaa935db029e4acef1f8a10ca2b61e9844dbe875e1d92b735efbeda995d95cc204927c8552b59e85cea08319410054113617bd62be852b407607b571875e61ea493702a909b029d68e7df3ecf773c1c761f19531dcd2b71dda471260bcfe8bc44210a73be907b73106d2dd8403b3cea2412c733347f27a5839ecbad504bca93fe7f979ce1328e8d6943bc0c94e95300818d0279b2ec4df149769dd4b5d5234cee31f6ae4373c0863e0e3628e2c9e28e4b4e09ed91adfe907ecbe7e592af3eccbfebf91733369a85e90fb928c78f632de6499a86d9375b0276d90662fefc279fec68c31c53dd294004d44dc197ed537ace3ff2529114743793556349c7575f60b53095fb0d3c91046200efe71e5adce9bf5ee0e4a73240386e13313257f0fbfe71cb48d79107b01bbc65ec481b09341c102432dfd79b00a348467b421dcf2f7618001a9b27a59cb98ca4ca55677e08cf580581705c5ada7e5ac2c661d065e393b822d61898e128b74403c2befb8e56fab44ecc4b85712c25977859fde4f2ae275744e103dd8e8cdf716f8489cc267427b53c613f7031d18c1fe6dfbd00de2ac223cc257ba15968678ff8eee7ad95204322dc30ad8f93ed1f7f3a0d7933a933c473136ee4fc79a10b912bfb65a980a86cc1db590b6c9c350e00f3aaf2a8217b7251e39987aed8e05d23f448af03418f398464ccc3858d18a292ba267d4e6c37a248adc6ce7a4ef8d0c87572c652e00171fefc9dee11d3b055007f8dcff1ba1f37233cbddc9c0a413e8858f24139c9f9a68728c5fecd892b16086868d1f8ee5e73be9aac4bab48099965f2112a69acd5444dce05ad4dd1857d88a6917a314d8a7864d4ce143f0dcc30a42a311b4708add834c4b005be192a8ecb27829179903440fb0cd7e4b690fc748b6387672b185c2437d84f6677828e7867262564067e4117d2ff717476ec215980f0f66e2a0f5a7561728b75d0370bb903c8398383755f285e1ab7f7856508008ff174d18bdb884ae53d1251f2cdef89fe8941efb18ab73d2cd5e0d0b5fe64945f744aa1fc8f4f5238ef2ac4755c9b2f9e5075d19e3454105caf8a9978747180c51cd396e13edc981f0a5146cec4fface7dc811432c59aa88c011570dfe7a2016a2c7e177702214423574a33ac223ad88896c36590e925d224931d49477957f553ba86ab079e969292c2f57fcd09aa28779df5d84e9cc55b2e863fbf180d177050462895ec327b4ca937083f76ade695f66f6975636d4bc65cdc6fd784a65954f13bbcb4d3f45d9e7f6d93ffb2de54abfb620f3232590a5e0c282a9a426b055b154c21cbc9ecad3f25a194e37c7402a12061f073563be17e079f08d3f8372ccb861b59d98feba92679033b38089cf7f8cb2f7a17755f26cc2a8368b194ade1e4d4a9f9d9e078e0b18e05a368d5d60e1aaa99fdfa2a4ebee7ca8910b894deefc86f5426497128126b5dd3b6f764cf62c05d3659b97dc3b95107fc8f3d5e0fcf479e72e1dc2fbcf4784e14c04bf8282e932eb8627053a949ed6ac6e087d5de908a06683e5e472d8d432afdae8d15eac00020a80872f80267dbc6d8d3aeebf4d24bf57b00ea5f598516181daf54f347b9d9854a0e126c5d817b0cbfe34fe5b5d257caa94040ee44787a12d38466cf3c23396d040613d32331c786f37ea85629da345a6aedebae5ef8d6e848cc61d5e9d8adcaf715a6f4a686232eb41e95511079f129ce29b8a9be7412185779ee361474622f6a9e29839f85e15da0ed8e53d86fc7091375616f1cb591c76329be7cfc6c888c0cc2e6f1df0d428ee39c889fc61f8a4001f42011717944fa35cb69ed4f13c9d275e04f98814a9f739ee6a26d599e17b969fd84d8711b8dbe914643f07e690596680bd341999f68361b8752c23810f6eba5f9ad2a812477d7944283cf0b294a10cdb23dba4de1b8f8fa792930e5ef90b68d52031b580e01bcc3b3c514f75e35ba0bb87f4bd8aaded46dfe507d27fb02e3728b644a23d9f8aec2036dbf7babd298d1e9cb4681951049837a72e12248c261ce49d1f6c6b4564d07c149cf271e57f8ffaf17a66d06d2eb4450cc20f2a40aa1b62dc13f9a30c983b194bf8e8ce2c9ff71f551d196553c9a09303900a0ee304e8f9fc086c351245eedb7c610cfbd2a52c297401f8f8cf5e254a36cdd48fbfe1578681b6fb78106fbfafa2bf780cd34e7346ed8f1f3f2ae3020a266a0bf3f9c50ecd8371fad27268d9581971c7df623b5302772cf18a5a29150fd962c33bb3989987568a0c000f11909631df7df7eb8f7cd6ca2ee7e7416c8172ef7648136a559f3f5d9421b60b5b7bf92be6bc32565bfb71a338176bc446f4f5f6b2a68288334325c3e0ac2f72fabf5ff39a74a951926732ddba8bbb2dbeb02d1fce03e16c8c284c5eea142b5e9baff4a540990de916569f9ba82e7d4152b1291e2960544e94758ab9c758f69b5a0e2d259979704d03482424e7c824d025ccca49d11ae8d389b8b1f5a6f7b0b9e40f6fd9bd666f2d1067f9ff0b1573c39e63c02056c6d35299e1c2583323e79fff20ce103e50aa9771e39445938a217c2976c5bf5fde126d5c86ce95b6a516e09dcac3ae59da39d12542e6652025f849ada58e06e32884005bc13e3e52703aac007fbb714d3f26958319c5087b3510f6ae79b89250a137cfa365cab1efa66bb0a5eff4ee5785062d9f7cdc1fc3deba2cf06867dcab842f8be7d82a456ff5c61dacdb9219e3afd6278b6f898b08c1696893e231f32ba0deeb24c92c2ba8561c3bbd143beada88dbeff22e9d101f1e389126cc78db2ced0c5c275e917871fd5cd689adbb6794a8dc12bbb606e6fe25a8d37dafa82c78a377b4602f9487a844561be286cd47febc691025d220952f37115bd91c0384492566571b944f0d03fdf50994ed34b63678834d3ff651f36a032ddcd6d35860bbb40c41df43db0401fb51996eb99f1f4e1207344b154b9df143e0c9a01593e2b2da4ea3526a832b4cb438bb1e8008f55ad01d48d3e522b42ef5dfb821fadfdccfe11997a7c1ac1d653d53945da56a6b6353b7ad5bd2f4ce3f8704fd7f8e0338cf07bb0a381d6437bebc371ac32e34998d7b3ed861f1406cad6a108278b233b635f68449d9f91872afbedbd5ac649461b36cfa0c2590443746fbafacd431bf8d0e029fe88ba4e77bc734f1be62be8e25b6ab185268a52d1892a856aecc34ae5c0031d2606f77f48c584e5cb4f0501c54a70b29517e7421e11955bc438f1f7fa29a7f91cd7df820a81e92f3c7fe0fd750ad4d70d64467f1d3d1c98daf80c9365e95837d4d38a748de1d8ee5351b3a372997c2302c5379f21ac9e224eddd348e398ef829e620f05d2036576af7914def7a50e997df6ad644aa88402805572ed95ca7ead7fda2cb203d3f59009d618e6a66ac4a4f8aef99818bbdec8f4e2be16cb709d5e31320319bca0b66af81738682f0df375b258ab2da8cf84a3ab80e11153b25bf5e0dc5031224cd3f08f29beeb8ee03996b2e4c6e6a7ce677de45808720fedd66287b83c42b61f87fec1add6831bd1d3b38550683837d88c1ecb9b0351ae6b878392547e6a0b3df200c89fa0f395d1c72e5d85f3599f38e54547c926c358db1ccb96b9474d7ec198636a2ba4c1723374148533b31d6f6a5ed0c3e04869fb2700e0778fee8cc39dc1b710c349ed11a08232401b34f4d7068193c2bdbe88306681684b202c0b2ebb0334b792b956e2c1efe94bf2ea450595f52b92f341a4db50cb9d00ee0c437e4c5942152dbaf462ba362439035e16fd1bef9d473278a03242147271963ec946a4cb53f958b0bf3e74ee54c51a0362cb461da2f55fd37d5ff3d15bddf90c2772f28c76716a671346f759ef3fc854518741e72e5221f1950c70a5e4513c37a041436dffd738471840dba1427025d028dca875d2f951e2544879baa0e4ceb9388d7d2f9b10a3c72fd30949a5867569fba09cce1ba03c5a3eac254818e5f9bdde3f652d5cb196fc8c5db0da2f8ee5bdb72b6de729f036bfc6e20d58df90fe1611730732c1a6b2c3aa349b7b058cc72cba6fcba3400098f3972121417080f5ad093c5ece474bd8697a27649e1a9aade64b44320f159a69164b32fb714f1601c5a5152be0c72e79b9ade993f4dc38c7517fc438f38bf2917cb44faa0c863b2f187b459b96b5c4faae108eed6b0bc3c962d3ebdd0d224ef7ba7e004f33f46c7f07da5ffa9c9537209d2f2b1161a75d51cc1e1b36011f9070a83ee1d4f6f6ab8670213d0946e811007fe23f5799b052762f9cc221667cb750ff347692fe8f5bbddef448902dd5f59e85e47e99ef0de6a9c6e03cdc5cc214e2749de52e304908d686ed2ce47b0bbf3715de0c23ada3c9a3c93d739f6300837b751e8903330fc975bf077cc313522fc0b70ab66f4847bd253d56c1b8ae1e2aa401d83041879094dc62ba34abc6334901dbc8b66088ecb438d3472882dad85c73afc71bbf1a36b84f801a1b598224bf735f81fe142aba3c47cf4daf698ef0f00e84d07bae5227e2f3fd6098b0088b3322dcfacab599387ac7d2c63e61b444692514f606bec62442e2ee533c27f7bd088faab31b2d8cb081b311cf12e287df646e7529775df317019181ed7be89efbd4b88ed670933781894212957d562cc82d106a2cdbcbc7492d6352906b6c52faacf50fba2fd91c1fece4cbabbd06734c782060199899ed81b0c44efd3d2a56816d4eaa80aa42d9986082fada258d83e695b225fc94806bbb3fe15b259df364f36406d6e08017d3b8b3cd0e8384abd8ecc510fd594778a240330f11c6a02d93cb6c6ae9f38aebc9ea3fc9c0d39395240b7e532f0a738401a204c36ad0a92f294f9a02cd6fec0a74c938006b3475eb24f0b97f65e0690990b69c925c1f51da3099930c2ce71e2ba8939c8d0a324fc2b682e09d415eef2001ed0bd6753a34b66f1c202dd40615e58d21578c57783efa4ae7915206fc0cf91f2d0475b232868c20be0682e934ff9f294a0c713e3ccff23770fc3ee0d2b5a1d4ef2d25d14b66f983bf361b34594da182db5edf2efc9fbc900fae73b0e1ebf15f52e7ee97ab85f2b175b8b27e5fc4af6d2ee4a19816db68935da4502fc1fa50beb0194819a4f416cd2240fcfae152cf2b003dfae59ad6c33471b43ab34da00c61578c7c343a88c97b3e069bac36e96e16fe69e95d12f9680885d73ddeae6f7532b5e9432fc643c531209079a03ab4e5421f8e19fa709f8a8a5b0dce8f3ba597c781fa9174c32fb8b5b3fb2631e23ca5091149a6abefb3d598d5b16e87507c17a9f0b6784dd7c02bf50d0159ec4dcba5783284f1e1cbaac4051dfaae58208f6226ae56451d03950db3f8c43295176a76a69c7aa9457da81c080f65a7ca0087a56e8925b52e26b58ca6711b39282be178dc9553353c40372cdad59b504f551393205c974437a9ab44722dee37250e831c7b47aa5d1a67d41bd64fec613388f29da756f4ed266c797c037abc3d1459855ea014f5e3b092edec3cf5bacf059be7ad350514a368cd9542ffa6634e7556a3e09a10540a23867d0955d64f4b05daed284b99689f5f529f6ffb51d7f16d3e062cd5a9b94288dcb9f10f760df95294d5aeb4e9ed8c3482fdd8f68f639236da71774315a3544581fa3a715372310599208730c663a79b8d8a846d65e51e217294e1e75594492c03d5bb142d23a01a00ca8fec6ec7dbd63cd1dd937f7fa7138abb52aac8f674cb47b915b4a0b2f0eb77dd76be584f2a07ab46b0bbfe857e753c27494ed899e7c45e81fee0e5ec6f82f51f237d2c1f399cfb1050719ad5efbd7cd7c943c1fec7aed869d248b252f5489e1bbca14fb82d0f92185782dbede8a345723c7a1badf647aa7f98c6955c5ff78ce5621d16f95a64319ab7ae22e9af3df7744c4d35f67dec3b21115e79b695566ea38d5f4d712ea9a469cf98cfccd6a62a0f857ee6d489fa6bc1cf380b8fe95566c81f1555be675bbac6c5dec099201d6f1808dfda5237a98c07d0994c7fa84974f4d2d167ec6a77e2b6423e16951265f1211e59dff1a08dc78156a5dff11a223b423d6ce06c4603bf26655baeeebac0c4c02fbc210d0ab72f6435f5a4658f546f541a72b2bde2f1443900f0ca0bc5ba2c872623733a9ba6b9d9a28dcad3f953c3a01cd48d71f10ab512d267d1670db8648ea51e4da20856544d2ec7f4915bdda7c50733a83f1d7544d144de2a450bb57e2290ae1e8e270c41744ce38014f11f2d86cce4a08c7ad3ad3798b69a3c48cda4c5361f388af444d7ecf22824c54fd67a4bb86d223d3482820558312ebc271e8d24163379b3a89faffbff9a8e6fd534d518c7a61b18214ada3efe94b33e0be5c206587baae179858d7554dd46f98fd25658abf187ca8ee4edb2bf0599a7707821418686f6317542fdf4a5ca7ebd6ff0a5c52c75bcdfe771ff4a95beab0b9d07455da9f29defd0f6c5c187ed3ec23538d27f7b04befb5c4af9abe101f6e28c908194a86a04a07b45bd8209689830909cc9aba12b1872ce3d5868c87fe8568825058e411d7c7442e558f815bdb1c11d817546bcba7533c6aacf2f4995432687dcf6194aa6d62d41dbc011344c4e08e10363f6a1a9bc2df535df911555937713f11b85f34008aa3dece08cef8a7e34604522a3a69d88d4d460df77d8e42194163429774ada4c21bdd40ed6b28c7d099252998ed2a05d48d8a37c1757c7ef44884e966840956032e9f5c34a949ba34ae8715aef935726d43b750bbea0e101d2930ef48c625b7205eab4975405b938f132e602f387f297b3c7cb54436aace96fc8b3dad228e0edd88e0923fdc44196556649a14022ea41deae15fa6f9a891ceb784ec57abdea80f3398a49118da5e505b570c8c84c2c226f21f7eabf236c864c42ac19c74d11707e8930748ef9d8a1d9fd1a9b492dc6da7d92d1b0cc87722bc6d4537a25c0d77fe7a68f9232066b8ca9489d05401b8385d0bbf631d3277896f854ec301d7527d0cd87a254f4289bd0897ad546e18e457ebb240fbac406b72cb56fd4bb23fa02157d3a494fd69202513333463823532452cbf78e2cbf2fdda6289b1125acc188f7f2523e1d9ee05d8555215ef2b2cf5a41c7dfc59d5ff37e0de35b183ba3db40ee2d715d286783c968af20bd53e8ba377ed4c568f4e1f0ffaa02824bdf7d99daa9d68444e2b28fca2e065fe81a4c752807552f7199cf7e866381d930703c8602e53340534e021f93b7647b541b2aeac7c4d3defa8a8a023056c02beb03a6be645f61108201917b4006f8b70a813294528f134594888dbd64f0fd2b282ab7d8ad21549ffbe3ee34ccbb87f423f0a90c8030298872dcccbaa189fe3be339bf1cfaba6545211b443f47935dcf613daebf3f1de41931f9251aa951427990b4f4829f38ab9cac7fd7eff8fccce9f014a16383f98aa9955d9e619c78b731bda0e19011c8fe8e052c10cb3b3eb783db85b1572befd9806d50c73ff614644a2bd460b8bae69823bf2945a3bd72e5aabdc619645d6b072096f32e45c6d0aada5380c372c4606e0a421bea082cc093c81653922e1f1323e7835ed89d8fb5cef0ce70aa38af43dfe67faf7452f38dfb09752af3e7e2b50b180ce883626e4dd1d4732edff46f5543820c56d8811a424e0441004eed35f26bf0b1452d43267ae215ba502cf16fecf770bdffd0125f5114f43d85ce070a59fea4bfd69eadadb5eb5228641d5eaa6780d2f7e01e974df793984d5a25c4b94166137df34e0279642205634b488a9925d49eb0d0fd52688971da450999903c1ab819e0402e88fd0f280d7ee44a9dcf856bb36bc525f153a6272227f9f16f7fb192c56f54eb4d4481f1d292d32c9cf1c8f08d3c8b31101e33f810ebbd5e3a40e58959a1bb8bb8434d39ffb8c0a5139ed7e9da55ec453644118e7b4a7d72ff594c5bfbb3362b6992e03fcc7b8cb063449bfb5ea74d10f4e242c54ac8db9075adf63aa72b19a6bed6c50143a563f18426a0e6ee14f94726ed4f39c123c12527ca2dfa1d4546b4ec99514dfecc825e6151835738f35ae5c7654299e4e2916f090838655ee83601065211bef7f188bdc429091b4ec45996d9fec58a88fd822acf28fdd7dc6918af91479b6481d8ce086a5ecbc7005e4d27e3d1bcca6a6f32fc8d2c134f7c74b418e8d3305c74f8087bc3aac22f45f8d547021bb686e9b8cd24d5d0132c5374f5fa04a53dd8fe1cec24f73a38ea14a678dbf9488738f8401253bfe916b3541184eb2d6bf9b900f5b4d11fbb80ad3746e2ac874a44a60dcd82a751366998ccf67d0fb60720de63fa6abfb787edd6f949abfb3e6394fc884480dbeee5447674a2c7c50ca62ab2b12b14e241830c59c3d9337e9976c7cebfadf372e08309886ecbfe28a27ad27b88a026a8dcf99b751e9f7e02e9d54f8d30c2f8e7bcbd30f0f17390951f3a729e516309476a6f8cd022e31f086cb629e85f687f0b0737268ff8d0655cfe9b1ef7c79b41b6a0248cee1b1d88a99927542d5092300baa36f3e7ee31b1d10db6cae97e6f91c815c030b4a596c9c13ad6e610d65a50d5280aad9d4ee44dc54d46e50388256c68db94699104e4116ecae609e38535389a61c0e20d0d0428f45e9cfc8df9a6b9bcad460dd753d2d6485edb920bccdd104bfbfce308ed5dfa0c2b737e525d9c575aba044185ec22706503dcd676978527a285816be7c2520ac8b95f21f769c62908f31f66abfdae2dd8d84ee01f1630d344e4a401a2332390f5809efe0e64e8377d501a2c0a79b582bd556e9cb6903a446cc3ca3efff065efc791ad6fd37e14cc506740e1a45f23faac403a8c89c64e826fb282028b0d8e4a947ef587961184559dfc543fa792315ed94acbbe7802103fbdbd99ebbc0cd0c2357d055e76eb37f625dc1f590ae9c4c1ed5756a99f7aec74f6aad4d076adbdf400add3297115cbd89325c7ce5b155669c795628869f911ba030f80cfe7a75a1b36f17223dc14d00f425a712cc72a8abba354dca6a72c18f2df0d91f28a282369ad8bacaa632279363e0f1b4a1fe1b837a7eccda4d2b721a6f16ce4fdff6a49145696f987939f28fb1e637b06da406d54a38a8be52b0eccff534680c6197ce37c36da19de5912e82daa089695cd9edeaf3a75b393c2c2a38f4db13161a3917b2ee41fba28c60f9e2931ed1c3d7f713d2df92630be3cc2d0483ff4c3cebfde739bc6a48483c8304aed75f34017d4cab0a8e15f65dc75f5103328fe91681acb165e642bd4449edbd5b970f0ca2125c8d4a84a363f22b90365f07b542235e7d19d8a54dec05076d6a43a6e6cbf8c57979def1a5de5947b51d9f67291f95dd88c3f1cad545fa927604e4d9f80f9b60e60607ce24efd0f51081ece8be4c0611f6e5673fb7b928645e5625cac4ac50a55466aad97390850eca3ce64a7a5985fff028b7ea04fddde58a3f6f832acc27bc1744bbdc562f7406b60acb8c17cbc95f91167747e68e3c07726a1d88aede51df2b6b5c70e32c7a2bdb87adef8d63afc26f4f8e0049d185d0c29182fa1d2b370d30ef7dcb2b7a5ce220771608766a50d176a3faef82a81bc95355f56aaaf6a224b286b6878d7969481e6a2f735a2314fe5d8bdd6ce17ece0a82d3bce594594f01d6530947f9a2d4b079dfa69cad2c2e4f61db50065364a242f8774b73f0a7b06ae864714fd82015179667a96b89a3f3651ecb4b7cc425a3d73174a9c8a98994f25001ae46d8411cbb334b7696e85b7e9284eeaa779e7e762b4f47ab492def6a6886113136c3d18128a404759a1edaf81512e64a41ea87076f8be6677c3335613711bfead7ba61b5e90e22dbd6256dc82ccc4ddf6fceeca2f885817749e98f37f4d24d341cc6b96de7d0945af18a047949ccfd55f4200a0d1fef2ea3af4c8b7688bb0c5345a7db1edc3afe6c27239f7af61faf2d54bd95beb8521830574f4d9c10092a11b147b8232a86bd09cc9f4c9af26a7d018e725067277fbc95ad530b5893e12726b5872db8edffd32e23aa2313389e20fd2a4933138fe325e5777b339da09603a7e0ca08aae84f55fbb94d410c163c3a20f38caca0467836a7cfbf6f57cf81e93f78af939ad1cb0314eaebbcb04a679b2f2b7687739174b092b25a3ec7f8d4c89c279542a4d8216841f97dbffc2c0cc42b2b837940725fea470be5efa383d1023006e52c895476a8e00e2b1b248789719651ef7701de22a80d05cebdc39be7557e9ab65361f898b61c9762d404cdf91a9c43859b76d1d019dbacbe41ab8cd5d5e7257a4ddce492d9c421a829ef4d149648eab7ca3bc206ea1bad2e19754f82b316a4b461ff5b9d7205e315dd3861c16528d47ccefc8db4c2f7e5615a1ed9d075638679990b57b2e9110f4fd50fb4e4ad14590b3c4f9eed996bc8763afebfeab71509a32772da8898cc6766b104eb425b50f144cdce7c04b0757694a0d893ce2d62966ec8f9ba08ea45c470e6c4ac3cbb202df5c6b94fe620e95e80daa68bbd750a09435404720158869a5a3eead71e44abe7cfcb064e90a7aa114d7ce2626a6493c88ae0226b79cf0a8adde9770cc820bd3bf921e533c7270f772bc3c1e612d1d88b18f9d5d7d576c7221b97b4a9b690998a82a5c096530c4bd14e1e2225073232ad5b981cb75872893b613abfadf2a2ee6d0024ae9511f11c74075396a63c76fdc934c765ab8162964fb06d74ce62a0adee02e33c03123ceeda467634a369b9e0c2be37b14ec286446cccd14fd9dbd106151dbeed95894400755394ff51ac3323b098539f5936512ef3eff8e70af4015b001a647e6d0acb77e8cef35cc6e0adc3f69b6e67baf1980cc9fb7ab2479997ba154f7e54def9c5cf70091c55edda17c9500293815b26859dd721806f42f5da6433e438c19619f1cd4ab81fe0ee7a69cfbca5f11263bf81ab848834865232b10fd3b105cf445a1d4663c2816f6658c13fbca7787bf2cbfec26c0f790aa299ef993bcf9f7950dba4fd66627b6f0f0571308b24d8ffe3a94b80d3cfe072561ef440d71c70f605fe47a5f928c544fbf0788256d28109c2d6acad4e6cabf4c1e7ce9e51a66c5333f0be1667055a3c5ff3b38cc907cbaa0ea692dfeb7c146af6687e59cbab2f9afe4753137d45d2f2af90a8939f108254c182a2ed1abce7fa7662f0d35fe6697ecc2fbe3e253513673de9a946d45ed643401bec5eea8f6e5d4ca80bca8c02426289f5b924152a886ea51cc3e0d5f00c68f36bf71ad56c5502e355c39a939a0f409ead8836a614309499317ae4379283e01a2403d30b0c6165e58bd3d24f4243406ed00757c553fc253be0157ca26858922e2436cb63b95f413c04c47304999cfe52ccff5738f3f5e74b1bd9c1ef90bb6c01cddc7d530c896a8758743d7fe5bbe9b1a0389dda86450485de75580826296518265b084cdd494fe5ec3c9c5bf867849af0e804a6a38e643b0b19737754ce464ab84b1efd1f3c297ffab39eabca019969caf8c5c5131ecd1f2fc829b2245c159b5570583b02bb61893c173ddaf81577c99df5bc472766cd955e8658fbe4870af40c4b638cb4949db18835e63bd13f930616c243498ece41af56a70e401e326304ddd07450f3744c925301bf5b1a32564e33daa66457bbb316d6556db376dd1f5a205cfd92a489d7b0421ec9daf7aa81b5e90134f32c4f07472fc1e1a22bbadfed398027b21e631a51084da4c1f098735af6cb2685da852a01d6d3f3a1935c8f580d4b92e523101d1dc840deaa24b189d4e808db5f1290bb774883bc72d90e3047fa9cf6aa9216ff7ce554984a27a69adbe02e9fd4dad9bcd3e758a1606eac1999e9ae394c57d97bc21a68fecd2b4d979aadb44e5067584118658445b5d062004ae497fb67ed077db318272e1d9f955a32d16c44d0da86b61b0ac97125e2e5e29ebc0b481fa3ebcc809a229079f0065a61c0e9714587033df3949ae59439039c6f3917fedecb0bd773b357732655011fcbc8fa8fd8084b0f64a52fc97518c7099b00f478d1707f35fe5a81b70a9c75342b68cc8cb5eef0503105c9dce91ef3cd0dadb00778adeb09a52d063442cd6b8cec373511adf399eae609e0f82b52dc8b71a318f9516c20ee60054c4bbe1597f8145280dccd1630fca527fc2b4104fb419d9776491cf50e9afa8ab6bcaf0558aea435a38dee44598702c9cb1848499545c8f385e7cef9a17affdc045794601813b41eafcbcedf63f6573f432f0182e266facef0aa396689ce61981e4139e7ea463eae94f61f14635e5733f8814c32818742d5ff79c0ac0d270091c6b54fcb2b19db279d1be984fd9a3ff5abc4bfef557866c3e44b0ac5ab54a15879327502b371307943f24ad9b9067c9087bd93df38208c62aa8401d82eae6214ef6986c20756c3e4b663f7f460e44b8ab15e330b237d0716dca4d1d81515437045985b8c3e4c8514cc1b1d4e0f03de7068dfa87fb2481c6f5ac0167aa45434c29e687b35f94a1579245d775688a29dda8377444a0a0c22e303265a6831001b8b315e318197cd3f3691267a4dce5bdba25915537789ab741c5bba5d570c9db705fee1e47b839b10da6e2db3352fb7c916dd22a2f3fff8e0de320016ded41f62a26bbd24850a9ad04176b710a7f0876936d91b0aed726df23afd8094e24ed1a22b67515a867c26cd76fcb9c63423beecff6b44a5c1e8fd2ab53677cc921adce113bbfba63c292dfa4bd4eeb5707a8f9fdcd85c5add8f802c003f1756a6aefa34fcc08745c8c5ff6aa1d0edf26dfa14aca8abbd9ed140b49b518529cfdd9844027df4911b049c9cc19bc5c322bbe3a3b517781c5bcf007df917ef93773c10f1d4e5f2a0818623a8df17ab9d25237598952b6cd3601695ebea55ad5e4296fcfc983fdca6f3528dd6061b160663acdec8a2da2b02d77b3f23d8150c16fc57941b8da0262b6663c03ce96bf9dbc9d45bc719284544d334acffc1661288fca6ac95acf95b7954a55f47293c548291666b4bdca53141e8e75e4108116ead1225b6c5c0ce5e6ea118e6c5865afcd7de89423aad87b470e90bc2b3b0cc283ec2b540882784e79e160636f2f1888ff47979e45964303acf13ab339149283b62dbbc4019fd8393e0bc618d7ebff152e0bb29a0f7d79da8e1afc8a3f056be9e33683625744690a40369625c6337cc6fad2a02f1b601e9c9d733ee2eda815e333bce38df9e876f83cb03d570fe1e51748c1d0e105dd9092dfaef65db0237a131c4c79892a4a89ed502bfbffc5771810f3449e9bf17ae3131235331a40e5de3745fde3f0df362f2b914f4fd9a67bd99efeb7b1d72ab9df1e632790350900499ebff8d1c4fda7fc0a1bd297f6ea377795d774c7c8a7cbc9c6f9c5788e20bbf7de2a6efb38ca5f6640e01bcaa2529e1a5a8109e35ae51f968ef723bfd462037f5bf0fae4748da15c18c1a3e379dbc36f4e9d735f866065f99e5e3cf3c425cfe2d4046d784ea13e3b457b0f12c6ec7ae10249874be50d3dc7c3bb5cd5e780307e110445ae195066b0b70b7f1f4e5f87f049e12da6ceff49e355d65abcf4bda77ca328c1bd7a7f09c39b9d342344da2421f97f14b2fb2654457ca2150bebaf27ad4ee05f05f1719731ac1deb34c7154cb74339c0252dddfbde11e2e4c5761a113fc5f5841af9054979fc85a4bf8c6eed69e2aa7584d46abe5ca539462c26ef0b441c6749a55c1ac8f221e608df57d46e51d1b0ba883335071de77730ee8fc762c1cbbafb6138235a42d29099a0aa12d6d81b0d5bd3280502afb1e2bb484c69a8ad6653e6c3a253f7a69cf71e1d4357db4eaa58c127c53d771a916d8ad1edbcd24b5b7db836dd4a368638971aad3831260db5363d3949bbab7fbbce7bf859aca3a20504f06602a475a5478e7a5a02dc0a7bdd3472686080e4673894e7b1729f56b46a83539b9791b3b7a72a0bc0f0a576d2fa6ab9274cd931ebd14d56e8377e42c77b5e21c2443990adc7486fe655e334108f876c3bec62f4512555f6ea6046b9ce36a6bb59b593e9eb5c2c6a9575a7f70a5051dc845ba3e0cc81d84cd88635cd06302c55c2def53e9ec750883e21b995ab1680767ad20ee5d8c211ea4b606569d5ea8e11cb7b1d60f6d4bd2f6571d5bcb6761613f03956410da1321bc1442dcda555fa4cef6d5ebf1e237104fb6e24eaacc6ac06e6bb831b4766b7d747f5c2cff3152291442d7777029e9cbccabb1983ef0526e18801a5f3465cd3b433fe6400a4f69beed0ee5cf02a2c7498101ed794d57a7b9c729b3aa2b0bdf5f90908db323a0d08b96941877ef0236b4a6826731bf3d247006106c02a48c2d2f36f57bae6e3e223b94a25b39e397842abf41d04717ac99daf774369bb17568b9e3fdee5ec506fb565f555c2941c69ffca814bcd022cd9bf4a6d318f4fd54a48df8c1371151ba8ecbf0deebdcf38430895d2fc9007375121b193d6e255570a3da6a42da24085bc647b0a49223a06333a8f3677c5b5d3abf2e136a5449172f3b7944a06b70de48ce8b7bdfd3605ad058ded1085d528b7e39a573a52ef0b9630a01e15fa87a331dc714504f30c905e2ef2a8f103f294627742b9bee5a320e09e977aefe113adb474bbebd0fafa4a38f831b5c15c9f1d425f673954df703ae7cf99764948ca8574441de2fd4ad5a323ded58abcf3bda2527757ac864827f401185ce97deee0c4c92d1356bca1895040acbf5326aeedbd767cf4eb3682c8080b18916f8c643274b8501a8590368e22231183edcaed23c4ff87fcacf49b2ef3c3ef747151c591f6e6ded28916c059834ad00b9479ee75047df28d67b77405c67a1cb5587a0858d46af193ecf0a64a9160191c05eb73c4e5ad1bf23bea04a3b5535577a885d4fd7c66f20fbdce6f8237a0406b3f790ec4998f6d63d2a8d20802b7c634beb017c34c46e59e673df8e31df0aea3eecf1c0d2b9e705a9aecca6ba6e0bca551e3f4f46398817411b62cb36b5aa9ef8156cc988d99383986db452e5d5582c3c82171d8810aaf4bf023aff6b2a98b0de3d5bf587097d93f30473765300347a700462ad68bc6c15c6231dc29889b2db74fa3065e86b4a01d4b0c98f674a87ddb1c923504c22951c028ee5da4d06c09a3d8be15cf0d15cdfb42fbb14173ea82b82f2458d2c82c277e80b1ca928bdb20730a023bf96a9fd4248b89a520e6b56bf49adf228cfd4043a647504363899b7225f0f31f0874b6cc823acc91a3b3ab1387484269421c85ce178f8ade6eb51c1c824b61ebdb67f0e57260b52235cfa50936a1d5519d154cd8d4575f70ef1fe19b9ae2cd3696f5cc96f39627eaf319bd66234ac83efb13c5f3110017b097cdf0e1fdab5238e4df63b210893763ac24d913c36dcdbf434e273ab756c40f702d5574b9814e6e7831036a099cd6b2b0eb64fda026192092ba57e4ddce49e5705fecf2131b1c533c2f210f01fbbb755b013fd9fb6a9fd0100131b19d914513cedf9a975e57cad61d6ee028b5d1d96ae7e3491051d8292c4ad4faa847925d83c23905817991bb9c89b838da413e85fcfc51bd628302384bcc16dcd970a62158c33bbfbc3e466b9abe5490207e5b733907da48db8a34e69d8716f3528d656c68c48983b7a03e224b526d3ae7037b22cfc5911fb99be23832c44e84fda5950644bba175a351e0bbb1ad65895058e191cc47534479fae192e73fa3c429f04703c7c673d6d4ecacc8ba1b603c5155bdcf78a740a4cfff04352a1108c94bca974dca807a6e77d20b098b2cd21fda48dbb4188b2cc503cef1b7f1f8528e377960079b5b94caaec9ca6932b9030625d5a41faa69e3117beabf48cafc241141bd4665323fea74c78a6b5adeac4540ab5b96597802115be14a9610faa33042e6fd0767aabae049ea6da7260f2562b63708ca8fea8f71aaa9751decb4268065274567a9fdb3d196a242807139b6337bfd8a5158447f008aa4c635401a2700db89324c47151f057665f5a5e2c87c09984ed931fed18dc17d59120196ec1229b37f0ba5c23caf6e8085f0ee58ff4b2282ee675bbfd8d4ed6144e9b74fd2afc97cba43c06f6953e1fa74159b6480234d5146ca97b25be2353278cef494d7e5b93b0e301ba0edbeb9b26db5bc40c534e94c7a1fc16c34fba8a9359fae0274d8cedc4ddf732c09bf488c34f77ec2b6f2f6618a403f1fabb9c3035a6a8eeaa3a6c9cecfc5c114a3c7dde72a9be2d13ee8702f46432272ffdb49a50bb0a92f37468fe4166ba333eece165443d0e0d7a35a08936494b45657ee4a6a99f5c21d0487e221c3932b4c38715570655216e6346a58e61d3eace9118345b1983031a6854568caf57528dad615dcb18a2979f65372b11383c0b4190c032a5b69d17d267e8dd3af8f07252a80963ccb877395921053df8ae3f3d3df13a6e0f274f49498dfb57e8b2e1903d6e2461c54c4abc3b5141b0a5a04062b14d9b34df963822d1731692536a02e2c8bb727a54ef05115883ef47390fe8177043cd1a270831e98f2eb609e2bc72b34a9f0dc519d4c38f615f2f980062b6e0d272b83c15060c74504d43e660348689f438f31faf775bd98256723960d7af12a41fb5b436fab4c627759efd07522b542c490d926a081304551058df96c9156a59103390f0d77a98276f4c810a60849f71fa577104ab4fb7f3c92e41468baacad91a606d5ab0abd876668d2f9850aec8d1f6e1f3078ab75ed6e3e505b8e24bd1b9866a0f714a00e698bb34dfd5023b808e473aee90e44500994aa8d2e75ede03396a9b202a223d372df456b627e088a24cd59e44432bf9fe101a3542ea9e411bb1eee653e4da2491a15b110303ad7607d8f890a34eb16760b66e0d9c8e8715cd48eb43ec6156810633c0e6e0930905319865ac6e1c04c4a7f080e948ab2d464ca502cf47405690ae8e2029778eb3f1f538ca0fad54c46c1f0d95662dc2dc944085c3724def889d194bb9adb0f512ff41f40b5c64445a9e5490fa06c608f3d393244bcd6635979170d79ba2777989ce0679a7d1a98a94f46200e036a8932d9236a9f7e7e4a7787fe64b8475a405558deae59d3ffb964dde68a3d6f90e206701f47de634cabf5bb59c423a57e378274d0989f03f1e814d7d9e332bc4556b79033a9db5170f971303c0bb21da45c80c13f3a8114ceead1fa215ac9f755d2d2f9d3b67d2968b08aefc58014a941b5daffd9469b4b05a02813c8597680334fe11d41bc7f07e5f5fb513d9c01ae4721f2843cd7a59277727270143384941b4d9c8b88cff7e3088adce36436dfa5f9c100649eaaa169a1a8ecf93ba5753f4ce75f226941ad7998d230dd22a85201c58e930d2373f541bba81e8776396f8ca73226c7a1e6823ffa28b28e4cc94be2412a98112a23d657b8fafbe7d9d6e6894b26baf12dcb1bb183baf47cde817597e3e1178a56a838c61456cd34532148983d03f02fd56658c0fcae36389164635a92b371dd4d2c5cc8d161ba1e36d841172e9b914ecda1acb85faa24aaa691cbe9cb3fa3dcb59ba41143059fd585f0f447c8f0ab911bb769221ddadde26236114acc7a0f097583f56c9eff1708083b224b420b4a8d730ac329fdf55e9159a6029034e7704caa468765c737947fd8e3e145733d5091c3efb4c425205221bbb77cca6b0be2198d4e3813ea078042aa12727eda1f03ad4b07d9c23d2074a0b91211d25aee2e729952fd98622819c12926824a537519f297d2bf474daed61582ac0e326b17f3abceeb3b9f800787245ecf95a363bb5cfcca4b7d1e6595befdafdea3a2ebf4ffaa11bd15a7b0e887606f195db4efd58c8aa2ef1a0ebba853b06e58b86c74dc0b4e50fccf82e12c7596dcbd72e7cc8b6d4630f9b99c74e1f43bb05822219f11cabdb8b3f8bd371875b8ddb14a5a96facb784f52a158163b6739259ff6f17897177a6a01fbb68fbfae38e09d8ef85ff183f6b3ca98904f38d8459d34ba074f502960f95353427d57595e267a94dbddbd24706378bc4c6d1869dd562d5752e0c558f09cac65a5ba00d1b4a4544200a9f3e5a14e28befe680de6dc0b2f3701df29c6ad337b2ab8ee247706a9d60f3599fe1ba247013fb340d24845d62364be6037835a6a9410b9d132424c9933895b02b38c4a7e4cc31a00f14acd59c2996161111e7102a1b093bdf0eb8b4b7106db6b7ef0de081cdcfd597c41aea1487fd03ffda0c77ecc7e689fa4c8b7ff8c2ade3f10bfc5ae3bf38ed10c6ff44c9a6e2a6318dcf1a43a9ee68b23fab2fe1b992aebb0f2b9ef5f67d7f3728b874f0d77ec3a6329c922aa2b608a338641827c565652234f4e7ebe8a24c17de7a970d43fcf4fe414055970493284ebcbaf5e2b13da9001553e8e277d8edea25fb0c0992d123776c032fe20b6d68864d1e90ec4eb3b0cc4a3b177bc0739aaddd8b36e2516660bc38a307220a98c7d1bde46148347ca1f0072c608eb3f7202f0faf607589e89a76e5e5fc7dfbfb8df05aa624d1a82e59468449bd31fbba88d2790c3e080679d0be75a48bc6df9452497aad3fde7e40ba0b98c173d83c21885daaf24d1f944f7189df836ee162e61938313e96fce1be882bd80ecb4418be70c0599509313516e41b2263f38b2a92840ed810effe18eecf74292cd4c38fb33ca53f995c510fa64e446f1fc5dc1eade9ab4738467df1fedc722a104443cd1d5c1ea70662cfbb150fc9173c5888076dafe3cead65f15596e581734c0ee2933874b0ac11c4e221f902266e2e75e29613a6730072b66383ed66ac22a9af63bdb5f150b58a7536001f26d023aff777c99d549ec84e035cc5fa264fd3d5e8eb2adc5ae19ea27242d681f9004982dcc3ca32fd0e8ad409a93bfd3bc8c789cb1db6236185030c7eff57ae46616ed83d01416942a30093ae2017e0d60cd0e4545c41f6a93784878ca9ecfb8b9cfe8cf7fbbf997db1cbbcb880a14d55c51ad713e51d65e0826a3ebd596befe3754f78642cd16089dcc2a26c5329ae1f1964522e7998e6cb06990e1e19609f47cfa7a2a33571523dd212680260eb5a5de262202765f41d5aca4156b910ab17642fa4e6450d855f3022346b8eafb80e12d62c7a18d13cc932946a1b781f90d613c9e2c876d9d3ea4823f0ff1c75ee83f74d70e2e4e222cac118c865940537c289029233d2af47e4d171b0ae4f52efaba7825409910f2fa60d3673e5004f9887c22023f2fffe7ef07b3703fb4c5314a0961f6107e17d62e6bc8b01d7ae7f0c610e46f73aedd20fbfaa1cf7f05d2eeefc7191e86a22f34b3439a8b0df37766837d2b1729b3a8ff741b0b2e9de18add9523745a510ac493cb651375727207ebb4ed0b0b72e6410b2276dde649f19e85403c6ba45c9e1610149b9ec1f044c8816f4b74fe89e262933bc87fe6ae226b3234caca2d3380e379a0b085a99e3274098e02fcb6d7b225c17d8d5f65ac2f488781d1abbcdec787aa393c3ce76454a47e53828113e19f6bad1c52443275abf6305efb8962a10fd96c57928a5e240496f8b81965e880598b19ee83beee86f5fe31c8f0d91772350b1f21680c85675b50d16a29b52c339684db215f64a159a4e878f3a14b324d0595b4dc851647595d56d5a405b43ddf23bd390d2307b8a78c4468ee5b7e846841a1d6b9a67e6a2445568c04793725162e8274bf23019f9e676e1fa54fb010264a996d03e95254f7ca71bc745b971af927ef564c528be5e4ace257f97f622ed52d0ab67ae3919055404c18b7c52049e5b12d4c18b7a12533e6dbb457eaf7a750261139bce576cfb61f6beab0efcf697d2af1f6521f095a96bed7e8e302a880515c959d563350b61818e7cad0c49395836c3de305177b46aae215701f43bceb8fa9a426d58d766e8845aa96a323f3a8da732f8c50701c193ce0b060bc17ed4c1ece7d47d5e9a34da6031078c7cff2784f6023d28366216ef319ff9269f4b789810156074c9b0d4cfc19c667f549a4a82f636013049a9e1dc9e93e502b1f6ebc4779d6dcc035db5d10c8c3ed7b7fab04e4e6f7b06527663aa6c49a2aa3485df97d553c1239228b4c89f5b35c7cf8053e0ecc54d2ae013aaa8e2fc645bc15b18901b6dcb9e91bae322ac8e318fcdd6fb61be43f66ceec15e2edf5b997e86191cbb6283aec24a59274cde02740f0523dd8059bc064065b752912197c12191cbfd4d642066c5fd2f1b04d39406c30ba7328783d6712cf7d11f001b3d61c5f039bf7bb15e42e88ef868413b9836e18308101077eb0e9dc9acea51929ac8b70bf5b9a1d18fa50ba90916b3d1b89973cc1e3a74df5313edf6b0bab68e34c28ebb3c9977dd05957f37ffba4ef7d24591b1a169210581090032064906c02085be002cb6c52170c46bfb645418f3dde6f712bbdf930f7ab7a7ba6276098c593d2bad4454068ce09963be6162b9700e038447a6cff1ea6d4cbfc7c9fcb2aed67388357950e4f9ae687f0533cfde65e5965811da40b6ce1bc879d5f0a6c8a5576eb0c01f9cac0211cc8fe1e7aad791f47d063cc4e745d5c2e9bcaf0d34496f5a33620d9f8569ee66c3717f7ca0ec73c80c7d37d08c2dc59f5e0d9de32573f2f45fed5dcbec48f717417e055f5bd9a5daf5c82260deaee1be3169113a3e7fb45e884684dc39fc177c49b6e17adfaf5579e5264e6464434635c9cf319aa8142f570a9afdf3354adbe5b69423142acd02f9ed6bcfeca769c0fd1357cfdea7a2585b9002a6b500f7d9dc41e1deb1d0e819daae288451b4223c86216ce16208bf00c7a41590fbf993a6f234e34c8bde47e5b0df6fb30e448a3055b629e042686cb6b72e507e05d9600c7eaa819178e9b6e0f0c7016b0d409d2183c892770edca1fe95309a35250f59b07d699450b62f8f1bf3f033373cdaa200d9c3acc29f8aa2192116a33a2f38fbc75e87ad8456585381c6b9bf2b1a218893885cb149e27ac97e27b297d98410609b0ba2c5db5c0030183d438fba3cd3a51ed52b6debcb2a07c8966081da3d776ebee3b0629a4564c7f9506eb8539adec53e27424240bf54ef7ce8b5b09cf63e87a0ba938168e8a25d12528abaca852bd9989c3ab724f245c0881e8ba92789917f2087a9cb8751cd28bb1a5e253eef81c60aa2e0031282e3ef898f2f41aa80bda3eb3835cfe18c6b7acf9accf42da2a8bb0a18c2ec8a004be1d148b7328b76431a0bf3a6dbadfd3cbdc13229460934c959a58bc26efa30e6517f16f8dbee56d092cc402ebf0d9c6c01be755cf5d81e124594d65005704cb640c813abb62561a15637942bc73806b41dfd1a30a51ac04faf1b620e502da4eeb47df92c8b7a30e40c4b239620a0189f37c951cd4d804505e7da788083c473d82c2185dad0949cef8edc14b83fbace9d055d527a0cb9a806d310b70f365f19f6539899d2aa29cf022ec203b4ebb0f93b26471c1af9c1ebe4d93001afbf1fb9da37c802f9186bb3d25cb5be535ae85565ad337ab3747dd4382764b72fc9c0adff466798afe9c52ccf717d9f9d333e1b6994fcf0d9b400f8a1d3166918452e18d0aed39e55c117658434dc46e754841b6e494c92969c28227bae786390255c0861f672908c3088e0f7eb2ff273cf73f76ca74a1d33be011f83f0f90dff712d1c9b9b470329a8be0747721e57ffe041228dea121c1005bed2f7db566133a0a04b9508841ed0138c5777085a3e6c49f63dfc05968680a89f78ef2343ee92c85f95536c1448f99d8ab0be43e899502c5e161d3fe2ace220497a5fd10bd11bbf3e9f3b1ab658eba437e36bea4a05cbbecb66d9a71050a825ae50046eb4996562a579bc1b084636c12f4770a5a5cee4eb66d6a3203800bcf82ebc0ad7202fbfbc8b1d091377847d68a9b89e754c2cab58a92dfad7f9c600b586b3925e1e58ee81c202797a971113926997538c1cf168dfb2b3ed28c6f44549c8a2ee23317d88526dd5fddab59262343142f1f5b30b4918c526084687edcb687486b9ea186c2c6d9f0e3b4a753ee88ebe4b3d25be10ca45a5e9c8da33b8b5d9ded3f38e505dbc5d0be2a5c625992ecf3b7f27455ee531010d2b300378b4695e3629be9ea6fb9b2ae9f41b8df7d5a372ef75ea468d173cb3eb6ad5cf06454534dd61677a79ad57bc0b7b2f486a667008955a98f5dcf9bfcd498ee50f348af447fd0019398e74c7cf4325a18935e7745b11410a23f1a0fafc9ce3dbe445821176655f3a50b3f18db4f00368c3c180959e4819553f398a22f696d25bcc523693f754305bb82943e8e8be7f0bdd110207eb93d5e9e4ad1d6c6100f90ef131fcfc5426598f917f58034b7cb5b37a6e719fd6b47221183805465d33202e3f4e651d509f73913b3aa856fa7490238daa60269939cf66d7cad2beb668311d30f2a7b9e6764bb3a53d3ada7f09599afe02aa642855b79a089d927367a714edd791d51541d1d1337f47ca9cd8a25dbf60e7720410c5754df6ed06490f709af8d6f46ebdf85e4574a23ac7c7d66582afe8d499a21e0adc4aa5b69262c1ac868e4125d0a9b75a33c52d3dc6d449196ee48fd3aec6485f0e061cc44fc8ffe3c69eacc8838b84d8e6a9d1aecd106cc78ebe1d9e7f96a262d133241840cb5fa0bacec6b43ada491efa9e9ab40f164946e661aacb791073b8c81902acc1861a166662d7ca4067b09e720db60f67f5974596a69eef7d3789de67ef6e6b56632039e2a921e1b3c5807dec83a6bc8637f35eacff0c3c1a4e7de0273167580706e3f7e20f760e9c4857f3f9488836f136eec7b3717021c73298f3dcab3667fc227b889e8a887ed74688be4afc128eee0833168aea3f468212c757be3d946edb272c861c0cd9537d3c6620cc27b14f887d3540fb502d68109b5a3f6c841aa066ecaf0aec1cc0fe66e3a116b37949d25a0f91c7a7e05c9bc4156cb58e770e597129f660845b4afa838b70ea9bdea96ca4439295ccbc433427831c1931e0d8ffe9c8d81c9ecea42efcc4757c985af29e2a780e153da1491c3610e66e6e0ecdb7affa70e9192bde0c878e2b8d4cfcd1fafeb6361c3ed79b5fa2ad63987a72774a6acd03faf9e431d67cbd2a3ca29eee70be43f7914f5b4e0fb00467348a0a7a78377cab8c56f492a1e55d970785dcad95545e7c33c447588be622b81e93e22aec317b07e565789002f2ab9f63b85493d29b169c3531f230af734e690323602370dd1d93bdf74602f3b15e752708d8222176c3d43bf4ddac082f372c5ccfa22bb9a05f86b629e0694ae16c2fe84efc30b3c34d25b760788837551e0f809cf7d539e7423ead6c9b149e45357547335370eff345e380357610ae3e358a1cff506dbe6a6aff02bd12803de7ff0112bc69ef96dc085223b8b9baf2b1f26e495331413a4df29de3f6b28872200647c91f9432eba33ccb20a3a60b3b396884b60befb11a89e39e92f9960baa90ce166e81b532b0d38ce158b4be7e13c986f28abfac1fb5d1d84f89e8b939698fb3ac537eb8aa77c04111c872e85d92daebb2cd2afd6411bac419db0623130f3c1b373bd5655702c04025afc0e365bda332f6d86991cf78332b41d69127164c5db3f97da2fbc00969618f312f01f8bdf2d76037e7b2849da755df348021dcd1d58070792258471fa74b060a24837124b5b42a2a402172ca928c492d109a39b7073f7a2d47b1f3db9d3028c0096acc26aaa120d27e2a0a73dcbc36fd135e4d6a5a0117fae633f47297a3227dd109d75f6d0f002430e4f04015b928df08f3a041d27769ef83276f9579fb511bed6ecd76fad7bfb998c0249f34caeaed67abef5489d9b2b711252030bc5281242013661dcfa3c97d307f8d9fd7f549d6b493b904a15d42d27fd4b9f78281f534a54266fad1960ba83c3fcb2b9a6c70f8b80c800f9cb19c16e03a197c7998e50395366aaa5767368a212e6ddea75d3e94562be786c33d7bc6bb76c33e9a8cfbc65a78537b59456bab4d70e0342e70ae3be12582f5a64828ca57ee2958633054b0bd31cfa1834948fa2362a5b21dd9204959a925916fd9b344f4c1c806697b5122da097c77f756547c7d895f0bcf639d6a11ff0db7a3c0fc2fe248dd37552d9f0d9564c6cfadf4f36a6f1a062d9abfee042192d4015261dffef1e95429760618388605c6e9e90893fdcc81816327502c91b0514aacdc3a68aa4b1b9824af391744426dff587e9c4a52d6f0812ed626cf8d17cfe6802b254f197f76da7da2f843db8f29c24fc65aed2587ace44119b29a6757f097f4b27714c45aa112aed19134c258752ba763fa831079f9b1dbd7bb43f1f08df168d5fcb85bf37eeffce3a89a708e6ce91eed153ee5ce085dd6a48e17cc2b09e4d42ae4a616e554c879121b650b9859e73d71825afe6a7f6af37c0a73c0f2876052120e5ecf0134cbcbf44f10f197bdca29e011e9a81a607b0204220f7fffa265bda454455290557aa646f7cdec7b2bc2c631eb1f5625b5b9a6bc01d61abec70fb3d0633816e6cb31c6bdcaf6fa2006ce28ed6d26a3625f854a6503e229f5a83252c416854a1a3ce60f069ebaa3b7eb27503f301023242fc9dd0f1cb06ee519f67ffa1b202818bd2161d1c81297d4668a7be59c9983548ae4757c470d4a13862bd1aed6a60e48e6ee1cd166baff620ce7b3450a84a91dfc9ac3db10c3a1db77174f33f176b233b5a475cd111be56d81c13fad5c2f152443af2a63c3550b28f2e72bd7874f7c8897bf5451adec3593771decbe8e69d67345b83ea68c2db18e3c3f7f72c64ef48d67a16ccb1a89496ba09963dc245ca4966168d4a64514d79cf5debfad7b058ed79812f73008bbf28ccaf70a6ec6be8e239a4829106d694bf12986a98d4e769811f7e20c67cda51bf4df3c9744abb499378b7ec8bdee568aeca63992bd499acff93d000327bea9663839a4501f5616a8896cee107ad08</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
    <category term="个人笔记" scheme="https://ruvikm.gitee.io/tags/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>在Centos7上安装Daikon</title>
    <link href="https://ruvikm.gitee.io/posts/6aa701de.html"/>
    <id>https://ruvikm.gitee.io/posts/6aa701de.html</id>
    <published>2024-05-11T14:12:12.000Z</published>
    <updated>2024-05-21T09:04:01.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Daikon简介"><a href="#Daikon简介" class="headerlink" title="Daikon简介"></a>Daikon简介</h2><p>来自官方的翻译</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Daikon 是动态检测可能不变量的一种实现;也就是说,Daikon不变量检测器会报告程序中可能存在的不变量。不变量是程序在某个点或某些点上所持有的性质;它们通常出现在断言语句、文档和形式规范中。不变量可用于程序理解和许多其他应用。例如:&#x27;x.field &gt; abs(y)&#x27;; &#x27;y = 2*x+3&#x27;; &#x27;数组 a 是有序的&#x27;; 对于所有列表对象 lst,&#x27;lst.next.prev = lst&#x27;; 对于所有树节点对象 n,&#x27;n.left.value &lt; n.right.value&#x27;; &#x27;p != null =&gt; p.content in myArray&#x27;;等等。</span><br></pre></td></tr></table></figure><p>这样的解释可能有点太晦涩，下面是省流版</p><p>Daikon是一个工具,它可以通过观察程序运行时的数据,自动发现一些潜在的规律或模式,我们把这些规律或模式称为不变量。比如说,你写了一个程序对一组数字从小到大排序。在排序之后,数组中的元素肯定是按升序排列的,即array[i] &lt;= array[i+1]。这就是一个不变量,无论输入数据是什么,只要排序成功,这个性质总是成立。再举一个例子,如果一个程序购物车的代码,不变量可能是”购物车不为空,则必须有商品被添加”。</p><p>Daikon可以自动分析程序运行轨迹,发现诸如”数组是排序的”、”购物车非空必有商品”这样的不变量规律,并将它们报告给程序员,供他们理解程序、检查错误或声明一些规范性的性质。</p><h2 id="安装Daikon"><a href="#安装Daikon" class="headerlink" title="安装Daikon"></a>安装Daikon</h2><h3 id="安装Daikon所需环境"><a href="#安装Daikon所需环境" class="headerlink" title="安装Daikon所需环境"></a><strong>安装Daikon所需环境</strong></h3><p>首先需要安装JDK，如果使用的是Centos 7自带的，则使用不了javac等命令，需要参考<a href="https://blog.csdn.net/four404/article/details/105597485">javac命令报错bash:javac:command not found</a>这篇博客进行修改</p><p>安装JDK可以参考<a href="https://blog.csdn.net/codedz/article/details/124044974">CentOS7 安装jdk8教程</a>这篇文章</p><h3 id="下载Daikon"><a href="#下载Daikon" class="headerlink" title="下载Daikon"></a><strong>下载Daikon</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找一个位置新建一个daikonparent文件夹，假设建立在home目录下</span></span><br><span class="line"><span class="built_in">mkdir</span> daikonparent</span><br><span class="line"><span class="comment"># 移动到daikonparent文件夹</span></span><br><span class="line"><span class="built_in">cd</span> daikonparent</span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget http://plse.cs.washington.edu/daikon/download/daikon-5.8.18.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">sudo tar zxf daikon-5.8.18.tar.gz</span><br></pre></td></tr></table></figure><p><strong>tips：如果下载太慢，如果是虚拟机的话可以用下载到本机上，利用<code>VMware Tools</code>之类的工具拷到虚拟机上（移动后一定检查文件完整不！！！这没弄好导致卡了我半天）。如果不是虚拟机，可以试试<a href="https://blog.csdn.net/qq_40430360/article/details/128670486">wget换源</a>的操作，如果还不行，最好使用magic了</strong></p><h3 id="配置Daikon"><a href="#配置Daikon" class="headerlink" title="配置Daikon"></a><strong>配置Daikon</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 转到用户根目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="comment"># 打开配置文件.bashrc</span></span><br><span class="line">sudo vim .bashrc</span><br></pre></td></tr></table></figure><p>然后在<code>.bashrc</code>文件最下面加入下面两句话（按下<code>I</code>键进入插入模式，在最下面粘贴完下面两句话后，按下<code>ESC</code>，然后输入<code>:wq</code>保存并退出）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 你自己的Daikon绝对路径，以刚刚建立在home下daikonparent文件夹的为例</span></span><br><span class="line"><span class="built_in">export</span> DAIKONDIR=daikonparent/daikon-5.8.18</span><br><span class="line"><span class="built_in">source</span> <span class="variable">$DAIKONDIR</span>/scripts/daikon.bashrc</span><br></pre></td></tr></table></figure><p>然后应用设定</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure><p>编译 Daikon 并构建其他工具</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装make工具</span></span><br><span class="line">sudo yum install make</span><br><span class="line"></span><br><span class="line">sudo make -C <span class="variable">$DAIKONDIR</span> rebuild-everything</span><br><span class="line">make -C <span class="variable">$DAIKONDIR</span> compile</span><br><span class="line">make -C <span class="variable">$DAIKONDIR</span> daikon.jar</span><br></pre></td></tr></table></figure><p>之后会编译一段时间就安装完成了，编译完成后是支持<code>Java</code>语言的</p><h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a><strong>验证安装</strong></h3><p>这里使用Daikon自带的测试用例</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入测试用例目录</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$DAIKONDIR</span>/examples/java-examples/QueueAr</span><br><span class="line"><span class="comment"># 编译Java文件</span></span><br><span class="line">sudo javac -g DataStructures/QueueArTester.java</span><br><span class="line"><span class="comment"># 对QueueArTester程序进行监控和追踪执行</span></span><br><span class="line">sudo java -<span class="built_in">cp</span> .:<span class="variable">$DAIKONDIR</span>/daikon.jar daikon.DynComp DataStructures.QueueArTester</span><br><span class="line"><span class="comment"># 运行QueueArTester程序，并生成一个声明文件，其中包含了程序中变量的类型信息等</span></span><br><span class="line">sudo java -<span class="built_in">cp</span> .:<span class="variable">$DAIKONDIR</span>/daikon.jar daikon.Chicory --daikon --comparability-file=QueueArTester.decls-DynComp DataStructures.QueueArTester</span><br><span class="line"><span class="comment"># 与第3条类似，仅仅运行程序并使用之前生成的声明文件</span></span><br><span class="line">sudo java -<span class="built_in">cp</span> .:<span class="variable">$DAIKONDIR</span>/daikon.jar daikon.Chicory --comparability-file=QueueArTester.decls-DynComp DataStructures.QueueArTester</span><br><span class="line"><span class="comment"># 运行Daikon不变量检测器,输入之前生成的追踪文件</span></span><br><span class="line">sudo java -<span class="built_in">cp</span> <span class="variable">$DAIKONDIR</span>/daikon.jar daikon.Daikon QueueArTester.dtrace.gz</span><br></pre></td></tr></table></figure><p>如果能生成<code>QueueArTester.dtrace.gz</code>文件，则说明安装成功，这里是仅支持Java的，如果想支持C++还需要安装<code>kvasir</code></p><p><img src="https://s21.ax1x.com/2024/05/11/pketf4f.png" alt="image-20240511230506582"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Daikon简介&quot;&gt;&lt;a href=&quot;#Daikon简介&quot; class=&quot;headerlink&quot; title=&quot;Daikon简介&quot;&gt;&lt;/a&gt;Daikon简介&lt;/h2&gt;&lt;p&gt;来自官方的翻译&lt;/p&gt;
&lt;figure class=&quot;highlight tex&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="个人笔记" scheme="https://ruvikm.gitee.io/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>研究生因公出国参加会议攻略——以内蒙古大学为例</title>
    <link href="https://ruvikm.gitee.io/posts/6831e4ad.html"/>
    <id>https://ruvikm.gitee.io/posts/6831e4ad.html</id>
    <published>2024-05-07T09:25:20.000Z</published>
    <updated>2024-05-14T08:29:12.916Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e2cd7bf3a14eca95b6db278fa39fc9bebd51d53ebac4ca4ae8009e11d3eabf4a">f666a1e82130d441cf5f17739ffab4075a317a77dcaf23bc89a4de7efe3e46fd4d2010f6e25f1abdb985a1f8a6a7a1c5b41b57df75c6da10eb8d70b80c6d74c5b18802e327487092ce886f17176aec3f3c8dabaa4b7bff29edc81bd98c0487ab74c5858d0fa3b8cf5ab84024ee7ddf048d9f3508ea22212a7deed7fa6c8ece57733fcd01adfb454e9ddcdabded800f20d2b59129ca15eb26842d30a40e08b461bbe7414e5f86ce88cfcf646db830f875337e37612ea4f85eca80afca5354db7d7c4c1da37febf35e7634a23586e50f41a66f329ff93b60129415d36b171be3d9c21d54f01e70dae1c67daa604cb5b63b73f16e66376af57e5d28cc157f960cecfb526a06153d06e58215dd4d27bd3c786a1f12ac31e791df5ce2e10fdc24759c29aa953ba1347f59c74b3926d250008790899d57bda207b241ba109a906b441a867b86e04cb1c5015285da0a7dbb25b45a3b682bbcda830661a3accbcd05165e7f712e2292eccbb630be1e96d370021ff1d1835b8af25989195f61c407dd39a50cd52eb46274426320ba0094ca9c4b879d4ea486f9ab5ce532e09fa468788de3f3f42db3ad88aa8e0258cefa2cfe991408bbcbdbf87d9de54a612bc8786078508a6e7cc4c16a255ba9e2b41a4ad1b1d28f4c6ae25ac7e63b1a7e5cd80040d419dcca6f81f32e4a3395e769b51f35d40e6025d7650dcf39e36a016d64c3dd00e1f34967e8d5e389b74eb2fb7ae7a8678e4ea9ae7f9fabad086f291cbad77ab96264aead0f2f66fdd8c33c21ed9d09d620bb6e4b7c0b861b8658a4970d03d28092fbc097425ef99de29cefd3dfe885ee74bcfa8c0f528e8241558d582bd4e84219b82303e44be5247f5b866fe08f196e0d61159fa1b2295d678852cd381c7da13df8bccfffc480e7b4b1c013f06aa0fe7a8a45cf250ff8180e917170833aa8e6693b93a38f59d623b3a3d92cec397035235dda4be11e9a0d8591a9fd410663cd44f019f3064b5a494b39a5e782b6ddde523ea9159d1ad2ca8687996f291c7c05f44dfda613827b23c5b4b8be5fcac8abae776c09efa05e6fd6db5f39f2fe0901dc67c799b6ddd3f76f34da8829573fe78cb3013b106a58c180d99feff69d54f7c738f204fe2c0b993a1d991029ca51c0cc6ea10ed1c7c691dee356150379591bda6cac48e8098049af6736a6add93cb5f6e5005525caf2ef9e16dd162fc6c84b9f1c9e6d540f276fefee335ec00653a0558f9bad4bf284c340db7e972b9b2beeb55304e284f99d6e42a25c55fac25720a0cbf0260b5ae2a7f48285a03562c42000462aa7e996c84016b7088d30a728b2968f5b7b43b35a69c95935f38f5b1148e8d1f3530dc15d8af0e9935f50bf5a30b93a2e65af19dbd09eb0fbb01d59c7f71469b1c70bf09e1ce34cafcd1206b63cad44eb026089ad1f8e8c104a6247a6e20a56cac0b3b3ff8446d88d21fd03aeb7f4161ebaa958e1fb9b4b8c21a88a7139e134d9ce3c545196ab591bf0ebd3984f7d19b25e4c4bd747113a9b33669a7f4b39a429e67e96fd2c479a3a149e7cb73d51eedf675731c75f83af67e8909f82fa8b0511fdd3e37257e4cb4aa00d3e804ddfba52d18d153975e2b7417f08bf5e215eb7648788a02cdcecab01ec2751be36dbd0c34d9cdb1f94b6a3bf469fe6befbf6467e3b0783098ac12eb4ef8ae53aeee2a65416088cd764ff8a1b097ae2742679716a81965e8a15be0c2ec960789be948334d263496abeffed47602f9e0ae5450575da30dc22526e831436aa1e42fde9efa7322598f09892a8e57fccfaa84b123eced5e6bc035ac06084a9bb5b65760b894ef8bb5c4f47ec9de2b383b6cf3860ebc8a91ef5fd479161a8781fffc4c7936eb8739753ab845017ba8efafc94ec65aa9f5cc2bfd6106c737c52b5acbff3e8a576699c4c5a97505d89a46a846478b919231c6f14ff6fd8304fb0bc06132630aa186b6e981d3934fe06a50a564a67ecc3ff8ea9d4bf7b7c32447c8df21a393e4b2c7d580c93b52190706db33f25707fc05a4a64ee5ff10710507e70bdb4606f986acbf3adf67dafbe33ddc18cc9c38c488dde9696725a4925acf5c20c2a6540d4fcdbf18b3c5387e2e997c91deea8e7394adeb03a8979b9a7cdee560e291032e8c624f1e5c598215e1f40155536b713d90db8ac8400058e2b8c8258733ca1a3bea73df7735df591ae8e79eb2eb27ba315000f0c096c6f882d09b94caefa647791f6bab4fb239626c1399fb44eb089a5b880e9da75bb770b8202df1aceaf2c5a2dc82dad86cf7f40a14fc7887a267ba306357360bf3417330812ff34fc1bb0c4de2d31946580da77efc7dd6d78b851415131256d2750cb37069dae35d7816bcd664d747bba91ccd2d84aa99560857a84e57bfe384a630ac3afd00a689a514d8b882862c3fef813c6e5fa2d5e0e4a38b36c9560d060e98d86c67c0d69eb2b16083ee008e82331cc6d1e404be7b23e1d5d52ae38da6b169378dcd934932c50e506544415af4cdcf2adbc5e2e1882a2767abe322d32a12e06aa36f02cd4b3bdf76e717df4c61c5798172896a2c4291b1fbcba7597ef3959be1dd492f034a4e330199791c81933d863136146d18ea029d0a944bd84be07abd944c2f1dd4b575446902276312665d64ab141ddebba9514e5f1caea8c1e25d6080ae753ec3cd7ced909378dab6d3ac9933544b49aeec896924e5f2322e248ddaa8d5fac1a2c209c74b18fccaac019a46396b36a74d020143772e4b07f3d750a46d8c308716f7b08f33364bcf47b74096bad57e2d7e3e7677b9a5ec678378fd5a3dc366df4c672ac09d9775e7ff2eeb5313d3958b005ea355007b0e8841263fb2d374d18995855ee2dd6ea967ce7b7f6de6c25be84945f752a040dd1054b59477340e9230c440310a348e0d2358b81e13d1ae7d8dd7fa5d8164bbc668a683cbde0cbb2ea963cd58bbf15d5df51155df9471b8cbc148b638d3baf1f8fc3472dba4b73859c81aaee71c6ae2b48f52b4153b515c4c1d0ef45c3f1dc38b259e5aa899d662acdde1450eb07cf4e9bedec158995f41884f54ce5706b88412873278518dff0073b441911bbd91f5f1abdc6d4574afdd21025dc70d5f29ec0311465412dfad70ef1f69354e5876b5a26ccee2b815e3791da801a44368e4cc911b527f57d1e75d2b9980d8dd497dfa7ab43a319127fb5333991a9e5241ec76144beb8ff8ec4fba6e935d138cf408938a5daf2493970d3ef7e2c6e355b0841f4eb4138a2ebd0de0310d56ed040f069c14693714af63e78558f846a0f0ec9d493d2abc6d0dc1d114665798ae920e3618babe9480e823390f8f71e845b8f07c9509e6f7434bd569f40c73d3350cfee4ef59a6f011af6feef3b1ec3942b14f7dad83d224a0594b895d069e0b104c7689a51e5e3b39f2ec16d89a3b2880d8718ee149a02b55a7a6e6781744e7e090069701edce94b53f16e0e782092a7a1019c4c3648fc111a40907f565f6176d018553a8a5dd29a86c03cf9e2a72a8470e8755273e03b2b9afc5b38cad40a88b9a6f43b3e54f3b75ae09a81589a6fe66a1ef0d761711298d6bbfc7cf1a252bbfda8efea7b87b9ced13b68864fba7867a261d94a2e5b4a8d8cece02f8424acd2e3c2d084d0c6059c311954196a4c474977edb8ddb8756fcdba4e1d087c31c92940408f3e3e9bd590e755ad36cb36db90e83fb2d76675f42d86345bce5c5aba5d1b969a4e8cdc659647d055a585da470efaefe71acdcbd1fb7baa7d606809089f9929c6afce7d56e65f28cccde7fb4c5d3eaceb3e42f690840da6a31c7a584f132deca20ca0b9865e9689b60327d3f6ea7c79750a28b255e225e21e33c11e8e38f7d9a4fb153a6b39c4a166830ae6878c829b2d46d5134f3337288ceaf7f24d200fc4e371e50bcc1ce681b35df5dd328d8059a1d07ff12db3d72d2b7c75523f3b536fe90025c2e25682a75816abf304eaa49be0b420326006b7f04c3da3d839a095417d13b9685b6507637929d0f5dad54902ed163baa72be1f0effcbc6dd5be0c00b49fb1fccd916de63c6813c48103a057607f549c064ba3e0c3307c6b78506d79dd81e4a820558c1efaca74b66aacca7aad6a17bca2cead389e4400f75cb93ffe873984cd7054b50e5ca40e1e7944dd6c5b8d62f9f995809afd58dff093657cbfb7c6f8568ea02ad3e5a325f2ad545791f39c671d7897ebd58317b0809357fd14ea71801087a27dc24264adff52e7037f71a4db36e0b9c7d60bb350ba5427d7cfcf4a5345fa7bd4bb3ce87287989f00f8a37167e1fa45971c6b79770ffac481bb0bffd3fe2d8cf0e5e2e4caad9afa6cc2052a026fc545ee824961f65cf42e9c7e590fd6f31d38e4d512ab4ad8d583c0c4c71c3276155c0adad2e8a584694c6ac29132a28571a03438b1e8a2354264d223456b5f92593f60be4dc8009c267dec56cf0814f21b4bb25191998c5efb5ff3f29b75d2f13edafe022916d06d5617cfe51a0c13afc2c9f306557668b3ba884fd33c3a2c95c9708e19c0955d98ceacf632dd26409f65d58c15e65f4ab7b0f945117376703af4ab4f973fffd6875b0849c11132045db741d8d88ea399b09536aba6b0ff9f27e1963f777c42e096215940895e8b94728ef6e751584bdd2f854c91ff272bafd237e803831088a737c0b2fadfa2d3644c518eb139bd8269075065e69797d4378e876ecaaebaaacf69351b46948c53bdfef90a72194cd0c6b1ecc2ec7541b49100eebbd60f5a12e7e1da2f7aec57adb0</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="个人笔记" scheme="https://ruvikm.gitee.io/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos 7常用操作记录</title>
    <link href="https://ruvikm.gitee.io/posts/4c414756.html"/>
    <id>https://ruvikm.gitee.io/posts/4c414756.html</id>
    <published>2024-05-03T11:08:37.000Z</published>
    <updated>2024-05-11T02:50:24.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h2><h3 id="搜索某一个进程-以进程Server为例"><a href="#搜索某一个进程-以进程Server为例" class="headerlink" title="搜索某一个进程(以进程Server为例)"></a>搜索某一个进程(以进程Server为例)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep 进程名 <span class="comment"># 根据进程名查看进程信息</span></span><br><span class="line"></span><br><span class="line">netstat -tunlp | grep 端口号 <span class="comment"># 根据端口查看对应进程，查看占用8080端口的进程id</span></span><br></pre></td></tr></table></figure><p>举例</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep Server</span><br><span class="line"></span><br><span class="line">netstat -tunlp | grep 8080</span><br></pre></td></tr></table></figure><h3 id="关闭进程"><a href="#关闭进程" class="headerlink" title="关闭进程"></a>关闭进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 端口号</span><br></pre></td></tr></table></figure><p>举例：例如要关闭端口号为8088的进程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 8088</span><br></pre></td></tr></table></figure><h2 id="防火墙相关"><a href="#防火墙相关" class="headerlink" title="防火墙相关"></a>防火墙相关</h2><h3 id="放行端口"><a href="#放行端口" class="headerlink" title="放行端口"></a>放行端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=4568/tcp --permanent   <span class="comment"># 开放4568端口</span></span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=public --remove-port=4567/tcp --permanent  <span class="comment">#关闭4567端口</span></span><br><span class="line"></span><br><span class="line">firewall-cmd --reload   <span class="comment"># 配置立即生效</span></span><br></pre></td></tr></table></figure><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>查看当前命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;进程相关&quot;&gt;&lt;a href=&quot;#进程相关&quot; class=&quot;headerlink&quot; title=&quot;进程相关&quot;&gt;&lt;/a&gt;进程相关&lt;/h2&gt;&lt;h3 id=&quot;搜索某一个进程-以进程Server为例&quot;&gt;&lt;a href=&quot;#搜索某一个进程-以进程Server为例&quot; class</summary>
      
    
    
    
    <category term="个人笔记" scheme="https://ruvikm.gitee.io/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>客户端升级封装EasyTcpClient，同时与多个服务端进行网络通信</title>
    <link href="https://ruvikm.gitee.io/posts/56591828.html"/>
    <id>https://ruvikm.gitee.io/posts/56591828.html</id>
    <published>2024-04-28T14:54:33.000Z</published>
    <updated>2024-05-03T12:52:04.002Z</updated>
    
    <content type="html"><![CDATA[<p>封装客户端操作<code>EasyTcpClient.hpp</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> EasyTcpClient.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EasyTcpClient.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  <span class="comment">//uni std</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCKET int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INVALID_SOCKET  (SOCKET)(~0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCKET_ERROR            (-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MessageHeader.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span><span class="comment">//C++标准线程库</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EasyTcpClient</span></span><br><span class="line">&#123;</span><br><span class="line">SOCKET _sock;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">EasyTcpClient</span>() &#123;</span><br><span class="line">_sock = INVALID_SOCKET;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//虚构析函数</span></span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">EasyTcpClient</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化Socket</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//启动Win Socket 2.x环境</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA dat;</span><br><span class="line"><span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line"><span class="comment">// 1 建立一个socket</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsRun</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt; 关闭旧连接...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">Close</span>();</span><br><span class="line">&#125;</span><br><span class="line">_sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">IsRun</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;建立Socket失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;建立Socket成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接服务器</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* ip, <span class="type">unsigned</span> <span class="type">short</span> port)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">IsRun</span>()) &#123;</span><br><span class="line"><span class="built_in">InitSocket</span>();</span><br><span class="line">&#125;</span><br><span class="line">sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">_sin.sin_family = AF_INET;</span><br><span class="line">_sin.sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">_sin.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(ip);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">_sin.sin_addr.s_addr = <span class="built_in">inet_addr</span>(ip);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt; 正在连接服务器&lt;port:&quot;</span> &lt;&lt; port &lt;&lt; <span class="string">&quot;&gt;...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span>  ret = <span class="built_in">connect</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(sockaddr_in));</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == ret) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt; 连接服务器&lt;port:&quot;</span> &lt;&lt; port &lt;&lt; <span class="string">&quot;&gt;失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt; 连接服务器&lt;port:&quot;</span> &lt;&lt; port &lt;&lt; <span class="string">&quot;&gt;成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭套接字closesocket</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsRun</span>()) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="built_in">closesocket</span>(_sock);</span><br><span class="line"><span class="comment">// 清除windows socket环境</span></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="built_in">close</span>(_sock);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line">_sock = INVALID_SOCKET;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//相应网络请求</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnNetMsg</span><span class="params">(DataHeader* header)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (header-&gt;cmd) &#123;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGIN_RESULT: &#123;</span><br><span class="line"></span><br><span class="line">LoginResult* login = (LoginResult*)header;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;收到服务端消息：CMD_LOGIN_RESULT, 数据长度：&quot;</span> &lt;&lt; login-&gt;dataLength &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGOUT_RESULT: &#123;</span><br><span class="line">LogoutResult* logout = (LogoutResult*)header;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;收到服务端消息：CMD_LOGOUT_RESULT, 数据长度：&quot;</span> &lt;&lt; logout-&gt;dataLength &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_NEW_USER_JOIN: &#123;</span><br><span class="line">NewUserJoin* userJoin = (NewUserJoin*)header;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;收到服务端消息：CMD_LOGOUT_RESULT, 数据长度：&quot;</span> &lt;&lt; userJoin-&gt;dataLength &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接受数据 处理粘包 拆分包</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RecvData</span><span class="params">(SOCKET _cSock)</span> </span>&#123;</span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="type">char</span> szRecv[<span class="number">4096</span>] = &#123;&#125;;</span><br><span class="line"><span class="comment">// 5 接收客户端数据</span></span><br><span class="line"><span class="type">int</span> nLen = <span class="built_in">recv</span>(_cSock, szRecv, <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">DataHeader* header = (DataHeader*)szRecv;</span><br><span class="line"><span class="keyword">if</span> (nLen &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;与服务器断开连接，任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line"><span class="built_in">OnNetMsg</span>(header);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询网络数据</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">OnRun</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsRun</span>()) &#123;</span><br><span class="line">fd_set fdReads;</span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdReads);</span><br><span class="line"><span class="built_in">FD_SET</span>(_sock, &amp;fdReads);</span><br><span class="line">timeval t = &#123; <span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">select</span>(_sock + <span class="number">1</span>, &amp;fdReads, <span class="number">0</span>, <span class="number">0</span>, &amp;t);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;select任务结束1...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">Close</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(_sock, &amp;fdReads)) &#123;</span><br><span class="line"><span class="built_in">FD_CLR</span>(_sock, &amp;fdReads);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == <span class="built_in">RecvData</span>(_sock)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;select任务结束2...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">Close</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否在工作</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsRun</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _sock != INVALID_SOCKET;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送数据</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SendData</span><span class="params">(DataHeader* header)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">IsRun</span>() &amp;&amp; header)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">send</span>(_sock, (<span class="type">const</span> <span class="type">char</span>*)header, header-&gt;dataLength, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> SOCKET_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>封装消息头<code>MessageHeader.hpp</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _MessageHeader.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _MessageHeader.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _MessageHeader.hpp</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region 结构体定义</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CMD</span> &#123;</span><br><span class="line">CMD_LOGIN,</span><br><span class="line">CMD_LOGOUT,</span><br><span class="line">CMD_ERROR,</span><br><span class="line">CMD_LOGIN_RESULT,</span><br><span class="line">CMD_LOGOUT_RESULT,</span><br><span class="line">CMD_NEW_USER_JOIN</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataHeader</span> &#123;</span><br><span class="line"><span class="type">short</span> dataLength;</span><br><span class="line"><span class="type">short</span> cmd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Login</span> : <span class="keyword">public</span> DataHeader &#123;<span class="comment">//DataPackage</span></span><br><span class="line"><span class="built_in">Login</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Login);</span><br><span class="line">cmd = CMD_LOGIN;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line"><span class="type">char</span> PassWord[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoginResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LoginResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LoginResult);</span><br><span class="line">cmd = CMD_LOGIN_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Logout</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">Logout</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Logout);</span><br><span class="line">cmd = CMD_LOGOUT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LogoutResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LogoutResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LogoutResult);</span><br><span class="line">cmd = CMD_LOGOUT_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NewUserJoin</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">NewUserJoin</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(NewUserJoin);</span><br><span class="line">cmd = CMD_NEW_USER_JOIN;</span><br><span class="line">sock = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sock;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataPackage</span> &#123;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br></pre></td></tr></table></figure><p>重构客户端代码<code>Client.cpp</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">﻿<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;EasyTcpClient.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cmdThread</span><span class="params">(EasyTcpClient *client)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="type">char</span> cmdBuf[<span class="number">256</span>] = &#123;&#125;;</span><br><span class="line">cin &gt;&gt; cmdBuf;</span><br><span class="line"><span class="comment">/*cout &lt;&lt; cmdBuf &lt;&lt; endl;*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(cmdBuf, <span class="string">&quot;exit&quot;</span>)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;退出cmdThread线程&quot;</span> &lt;&lt; endl;</span><br><span class="line">client-&gt;<span class="built_in">Close</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(cmdBuf, <span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">Login login;</span><br><span class="line"><span class="built_in">strcpy</span>(login.userName, <span class="string">&quot;lyd&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(login.PassWord, <span class="string">&quot;lydmm&quot;</span>);</span><br><span class="line">client-&gt;<span class="built_in">SendData</span>(&amp;login);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(cmdBuf, <span class="string">&quot;logout&quot;</span>)) &#123;</span><br><span class="line">Logout logout;</span><br><span class="line"><span class="built_in">strcpy</span>(logout.userName, <span class="string">&quot;lyd&quot;</span>);</span><br><span class="line">client-&gt;<span class="built_in">SendData</span>(&amp;logout);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;不支持的命令...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> Local_ip[] = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> Local_port = <span class="number">4568</span>;</span><br><span class="line">EasyTcpClient client;</span><br><span class="line">client.<span class="built_in">Connect</span>(Local_ip, Local_port);</span><br><span class="line"><span class="function">thread <span class="title">t1</span><span class="params">(cmdThread, &amp;client)</span></span>;</span><br><span class="line">t1.<span class="built_in">detach</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> Centos_ip[] = <span class="string">&quot;192.168.88.130&quot;</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> Centos_port = <span class="number">4567</span>;</span><br><span class="line">EasyTcpClient client2;</span><br><span class="line">client2.<span class="built_in">Connect</span>(Centos_ip, Centos_port);</span><br><span class="line"><span class="function">thread <span class="title">t2</span><span class="params">(cmdThread, &amp;client2)</span></span>;</span><br><span class="line">t2.<span class="built_in">detach</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动UI线程</span></span><br><span class="line"><span class="keyword">while</span> (client.<span class="built_in">IsRun</span>() || client2.<span class="built_in">IsRun</span>()) &#123;</span><br><span class="line">client.<span class="built_in">OnRun</span>();</span><br><span class="line">client2.<span class="built_in">OnRun</span>();</span><br><span class="line">&#125;</span><br><span class="line">client.<span class="built_in">Close</span>();</span><br><span class="line">client2.<span class="built_in">Close</span>();</span><br><span class="line"><span class="comment">//保留界面</span></span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2024/04/28/pkibI00.png" alt="image-20240428230519330"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;封装客户端操作&lt;code&gt;EasyTcpClient.hpp&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ruvikm.gitee.io/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="C++socket项目" scheme="https://ruvikm.gitee.io/tags/C-socket%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>备战2026校招</title>
    <link href="https://ruvikm.gitee.io/posts/4bf9d947.html"/>
    <id>https://ruvikm.gitee.io/posts/4bf9d947.html</id>
    <published>2024-04-27T09:13:38.000Z</published>
    <updated>2024-05-03T12:52:03.995Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3b9793d73b82b290e20f8c248d726f96aad294091a8caf910dae698177693778"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="人生规划" scheme="https://ruvikm.gitee.io/categories/%E4%BA%BA%E7%94%9F%E8%A7%84%E5%88%92/"/>
    
    
  </entry>
  
  <entry>
    <title>实习规划</title>
    <link href="https://ruvikm.gitee.io/posts/261b5ce3.html"/>
    <id>https://ruvikm.gitee.io/posts/261b5ce3.html</id>
    <published>2024-04-27T08:57:02.000Z</published>
    <updated>2024-05-03T12:52:04.002Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6c3c453af3bdd54753d6502ff1a75d5bcb20a0fbd4fd2f9883eacea165c02326"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="人生规划" scheme="https://ruvikm.gitee.io/categories/%E4%BA%BA%E7%94%9F%E8%A7%84%E5%88%92/"/>
    
    
  </entry>
  
  <entry>
    <title>学校GPU平台使用教程(优化版)</title>
    <link href="https://ruvikm.gitee.io/posts/72bb20cc.html"/>
    <id>https://ruvikm.gitee.io/posts/72bb20cc.html</id>
    <published>2024-04-01T11:10:22.000Z</published>
    <updated>2024-05-03T12:52:03.999Z</updated>
    
    <content type="html"><![CDATA[<p>首先连接内网登录<a href="http://paas.183-175-12-11.nip.io:30080/">平台</a></p><p>一般使用的话，直接找到<code>开发环境</code>一栏，创建环境。然后通过<code>Pycharm</code>中的<code>ssh</code>连接</p><p><img src="https://s1.ax1x.com/2023/08/28/pPaw2X6.png" alt="屏幕截图 2023-08-28 221321"></p><p>在<code>Pycharm</code>中，找到工具—部署—配置</p><p><img src="https://s1.ax1x.com/2023/08/28/pPad5zq.png" alt="image-20230828220300678"></p><p>点击<code>+</code>后选择<code>SFTP</code></p><p><img src="https://s1.ax1x.com/2023/08/28/pPaw5Ae.png" alt="屏幕截图 2023-08-28 221526"></p><p>在<code>SSH配置</code>那里后点击后面<code>...</code></p><p><img src="https://s1.ax1x.com/2023/08/28/pPawbct.png" alt="屏幕截图 2023-08-28 092517"></p><p>进入后填写主机名和用户名，这里详细讲一下</p><p>例如平台给的ssh连接是</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">ssh://root@paas.xxx-xxx-xx-xx.nip.io:xxxxx</span><br></pre></td></tr></table></figure><p>这里用户名就需要填写</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root</span><br></pre></td></tr></table></figure><p>主机名填写</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">paas.xxx-xxx-xx-xx.nip.io</span><br></pre></td></tr></table></figure><p>端口号填写<code>xxxxx</code></p><p>然后填写创建环境时设置的密码</p><p><img src="https://s1.ax1x.com/2023/08/28/pPawjHS.png" alt="屏幕截图 2023-08-28 092917"></p><p>这一步完事以后，点击确定，返回到之前的页面，点击<code>映射</code></p><p><img src="https://s1.ax1x.com/2023/08/30/pPd7RaD.png" alt="屏幕截图 2023-08-30 145658"></p><p>配置好本机的地址和远程的地址，点击确认</p><p><img src="https://s1.ax1x.com/2023/08/30/pPd7LdS.png" alt="image-20230830145937224"></p><p>之后选择工具—部署—选项</p><p><img src="https://s1.ax1x.com/2023/08/30/pPdHIkF.png" alt="QQ截图20230830150656"></p><p>可以根据自己习惯决定是否配置一下</p><p>之后就可以用Pycharm作为修改代码和文件传输的工具了</p><p>由于Pycharm自带的终端个人认为并不好用，所以可以使用Xshell软件使用终端操作，Xshell的配置同上</p><p><img src="https://s21.ax1x.com/2024/04/01/pF7gw01.png" alt></p><p>由于已经在里面安装了Anaconda，所以每次跑一个项目的时候新建一个虚拟环境即可</p><h3 id="切换环境"><a href="#切换环境" class="headerlink" title="切换环境"></a>切换环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate cu118py310</span><br></pre></td></tr></table></figure><h3 id="查看并删除环境"><a href="#查看并删除环境" class="headerlink" title="查看并删除环境"></a>查看并删除环境</h3><h4 id="查看环境列表"><a href="#查看环境列表" class="headerlink" title="查看环境列表"></a>查看环境列表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda info --<span class="built_in">env</span></span><br></pre></td></tr></table></figure><h4 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda remove -n 环境名 --all</span><br><span class="line"></span><br><span class="line">eg:conda remove -n code --all</span><br></pre></td></tr></table></figure><h3 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n 环境名 python=版本号</span><br><span class="line"></span><br><span class="line">eg:conda create -n ChineseBERT python=3.8</span><br></pre></td></tr></table></figure><h3 id="退出当前环境"><a href="#退出当前环境" class="headerlink" title="退出当前环境"></a>退出当前环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate base</span><br></pre></td></tr></table></figure><h3 id="查看当前环境已安装的包"><a href="#查看当前环境已安装的包" class="headerlink" title="查看当前环境已安装的包"></a>查看当前环境已安装的包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先连接内网登录&lt;a href=&quot;http://paas.183-175-12-11.nip.io:30080/&quot;&gt;平台&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一般使用的话，直接找到&lt;code&gt;开发环境&lt;/code&gt;一栏，创建环境。然后通过&lt;code&gt;Pycharm&lt;/code&gt;中的&lt;co</summary>
      
    
    
    
    <category term="个人笔记" scheme="https://ruvikm.gitee.io/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>客户端服务端跨平台移植，并添加线程</title>
    <link href="https://ruvikm.gitee.io/posts/7cdb8e03.html"/>
    <id>https://ruvikm.gitee.io/posts/7cdb8e03.html</id>
    <published>2024-03-31T12:14:57.000Z</published>
    <updated>2024-05-03T12:52:04.003Z</updated>
    
    <content type="html"><![CDATA[<p>客户端代码：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  <span class="comment">//uni std</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCKET int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INVALID_SOCKET  (SOCKET)(~0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCKET_ERROR            (-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span><span class="comment">//C++标准线程库</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> g_bRun = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region 结构体定义</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CMD</span> &#123;</span><br><span class="line">CMD_LOGIN,</span><br><span class="line">CMD_LOGOUT,</span><br><span class="line">CMD_ERROR,</span><br><span class="line">CMD_LOGIN_RESULT,</span><br><span class="line">CMD_LOGOUT_RESULT,</span><br><span class="line">CMD_NEW_USER_JOIN</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataHeader</span> &#123;</span><br><span class="line"><span class="type">short</span> dataLength;</span><br><span class="line"><span class="type">short</span> cmd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Login</span> : <span class="keyword">public</span> DataHeader &#123;<span class="comment">//DataPackage</span></span><br><span class="line"><span class="built_in">Login</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Login);</span><br><span class="line">cmd = CMD_LOGIN;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line"><span class="type">char</span> PassWord[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoginResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LoginResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LoginResult);</span><br><span class="line">cmd = CMD_LOGIN_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Logout</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">Logout</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Logout);</span><br><span class="line">cmd = CMD_LOGOUT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LogoutResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LogoutResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LogoutResult);</span><br><span class="line">cmd = CMD_LOGOUT_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NewUserJoin</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">NewUserJoin</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(NewUserJoin);</span><br><span class="line">cmd = CMD_NEW_USER_JOIN;</span><br><span class="line">sock = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sock;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataPackage</span> &#123;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">processor</span><span class="params">(SOCKET _cSock)</span> </span>&#123;</span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="type">char</span> szRecv[<span class="number">4096</span>] = &#123;&#125;;</span><br><span class="line"><span class="comment">// 5 接收客户端数据</span></span><br><span class="line"><span class="type">int</span> nLen = <span class="built_in">recv</span>(_cSock, szRecv, <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">DataHeader* header = (DataHeader*)szRecv;</span><br><span class="line"><span class="keyword">if</span> (nLen &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;与服务器断开连接，任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (header-&gt;cmd) &#123;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGIN_RESULT: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">LoginResult* login = (LoginResult*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到服务端消息：CMD_LOGIN_RESULT, 数据长度：&quot;</span> &lt;&lt; login-&gt;dataLength &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGOUT_RESULT: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">LogoutResult* logout = (LogoutResult*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到服务端消息：CMD_LOGOUT_RESULT, 数据长度：&quot;</span> &lt;&lt; logout-&gt;dataLength &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_NEW_USER_JOIN: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">NewUserJoin* userJoin = (NewUserJoin*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到服务端消息：CMD_LOGOUT_RESULT, 数据长度：&quot;</span> &lt;&lt; userJoin-&gt;dataLength &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cmdThread</span><span class="params">(SOCKET sock)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="type">char</span> cmdBuf[<span class="number">256</span>] = &#123;&#125;;</span><br><span class="line">cin &gt;&gt; cmdBuf;</span><br><span class="line"><span class="comment">/*cout &lt;&lt; cmdBuf &lt;&lt; endl;*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(cmdBuf, <span class="string">&quot;exit&quot;</span>)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;退出cmdThread线程&quot;</span> &lt;&lt; endl;</span><br><span class="line">g_bRun = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(cmdBuf, <span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">Login login;</span><br><span class="line"><span class="built_in">strcpy</span>(login.userName, <span class="string">&quot;lyd&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(login.PassWord, <span class="string">&quot;lydmm&quot;</span>);</span><br><span class="line"><span class="built_in">send</span>(sock, (<span class="type">const</span> <span class="type">char</span>*)&amp;login, <span class="built_in">sizeof</span>(Login), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(cmdBuf, <span class="string">&quot;logout&quot;</span>)) &#123;</span><br><span class="line">Logout logout;</span><br><span class="line"><span class="built_in">strcpy</span>(logout.userName, <span class="string">&quot;lyd&quot;</span>);</span><br><span class="line"><span class="built_in">send</span>(sock, (<span class="type">const</span> <span class="type">char</span>*)&amp;logout, <span class="built_in">sizeof</span>(Logout), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;不支持的命令...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="comment">//启动Windows socket 2.x环境</span></span><br><span class="line">WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA dat;</span><br><span class="line"><span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line"><span class="comment">// 用Socket API 建立一个简易的TCP服务端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 建立一个socket</span></span><br><span class="line">SOCKET _sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == _sock) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;建立Socket失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;建立Socket成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 连接服务器 connect</span></span><br><span class="line">sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">_sin.sin_family = AF_INET;</span><br><span class="line">_sin.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="comment">/*_sin.sin_addr.S_un.S_addr = inet_addr(&quot;192.168.88.130&quot;);*/</span></span><br><span class="line">_sin.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">_sin.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;192.168.88.130&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//_sin.sin_addr.S_un.S_addr = inet_addr(&quot;127.0.0.1&quot;);</span></span><br><span class="line"><span class="type">int</span>  ret = <span class="built_in">connect</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(sockaddr_in));</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == ret) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;连接服务器失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;连接服务器成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 启动线程</span></span><br><span class="line"><span class="function">thread <span class="title">t1</span><span class="params">(cmdThread, _sock)</span></span>;</span><br><span class="line">t1.<span class="built_in">detach</span>();</span><br><span class="line"><span class="keyword">while</span> (g_bRun) &#123;</span><br><span class="line"></span><br><span class="line">fd_set fdReads;</span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdReads);</span><br><span class="line"><span class="built_in">FD_SET</span>(_sock, &amp;fdReads);</span><br><span class="line">timeval t = &#123; <span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">select</span>(_sock + <span class="number">1</span>, &amp;fdReads, <span class="number">0</span>, <span class="number">0</span>, &amp;t);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;select任务结束&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(_sock, &amp;fdReads)) &#123;</span><br><span class="line"><span class="built_in">FD_CLR</span>(_sock, &amp;fdReads);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == <span class="built_in">processor</span>(_sock)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;select任务结束2...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线程thread</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;空闲时间处理其他业务 ...&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//仅仅适用于Windows</span></span><br><span class="line"><span class="comment">// Sleep(1000);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="comment">// 7 关闭套接字closesocket</span></span><br><span class="line"><span class="built_in">closesocket</span>(_sock);</span><br><span class="line"><span class="comment">// 8 清除windows socket环境</span></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="built_in">close</span>(_sock);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;客户端已退出,任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//保留界面</span></span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端代码：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  <span class="comment">//uni std</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCKET int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INVALID_SOCKET  (SOCKET)(~0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCKET_ERROR            (-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span><span class="comment">//C++标准线程库</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region 结构体定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CMD</span> &#123;</span><br><span class="line">CMD_LOGIN,</span><br><span class="line">CMD_LOGOUT,</span><br><span class="line">CMD_ERROR,</span><br><span class="line">CMD_LOGIN_RESULT,</span><br><span class="line">CMD_LOGOUT_RESULT,</span><br><span class="line">CMD_NEW_USER_JOIN</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataHeader</span> &#123;</span><br><span class="line"><span class="type">short</span> dataLength;</span><br><span class="line"><span class="type">short</span> cmd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Login</span> : <span class="keyword">public</span> DataHeader &#123;<span class="comment">//DataPackage</span></span><br><span class="line"><span class="built_in">Login</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Login);</span><br><span class="line">cmd = CMD_LOGIN;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line"><span class="type">char</span> PassWord[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoginResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LoginResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LoginResult);</span><br><span class="line">cmd = CMD_LOGIN_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Logout</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">Logout</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Logout);</span><br><span class="line">cmd = CMD_LOGOUT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LogoutResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LogoutResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LogoutResult);</span><br><span class="line">cmd = CMD_LOGOUT_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NewUserJoin</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">NewUserJoin</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(NewUserJoin);</span><br><span class="line">cmd = CMD_NEW_USER_JOIN;</span><br><span class="line">sock = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sock;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataPackage</span> &#123;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;SOCKET&gt; g_clients;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">processor</span><span class="params">(SOCKET _cSock)</span> </span>&#123;</span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="type">char</span> szRecv[<span class="number">4096</span>] = &#123;&#125;;</span><br><span class="line"><span class="comment">// 5 接收客户端数据</span></span><br><span class="line"><span class="type">int</span> nLen = (<span class="type">int</span>)<span class="built_in">recv</span>(_cSock, szRecv, <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">DataHeader* header = (DataHeader*)szRecv;</span><br><span class="line"><span class="keyword">if</span> (nLen &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;客户端&lt; socket = &quot;</span> &lt;&lt; _cSock &lt;&lt; <span class="string">&quot; &gt;已退出，任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (header-&gt;cmd) &#123;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGIN: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">Login* login = (Login*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到客户端&lt;Socket = &quot;</span> &lt;&lt; _cSock &lt;&lt; <span class="string">&quot;&gt;请求：CMD_LOGIN, 数据长度：&quot;</span> &lt;&lt; login-&gt;dataLength &lt;&lt; <span class="string">&quot; ,userName =  &quot;</span> &lt;&lt; login-&gt;userName &lt;&lt; <span class="string">&quot; PassWord = &quot;</span> &lt;&lt; login-&gt;PassWord &lt;&lt; endl;</span><br><span class="line"><span class="comment">//忽略判断用户密码是否正确</span></span><br><span class="line">LoginResult ret;</span><br><span class="line"><span class="built_in">send</span>(_cSock, (<span class="type">char</span>*)&amp;ret, <span class="built_in">sizeof</span>(LoginResult), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGOUT: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">Logout* logout = (Logout*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到客户端&lt;Socket = &quot;</span> &lt;&lt; _cSock &lt;&lt; <span class="string">&quot;&gt;请求：CMD_LOGOUT, 数据长度：&quot;</span> &lt;&lt; logout-&gt;dataLength &lt;&lt; <span class="string">&quot; ,userName =  &quot;</span> &lt;&lt; logout-&gt;userName &lt;&lt; endl;</span><br><span class="line"><span class="comment">//忽略判断用户密码是否正确</span></span><br><span class="line">LogoutResult ret;</span><br><span class="line"><span class="built_in">send</span>(_cSock, (<span class="type">char</span>*)&amp;ret, <span class="built_in">sizeof</span>(ret), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line">DataHeader header = &#123; <span class="number">0</span>,CMD_ERROR &#125;;</span><br><span class="line"><span class="built_in">send</span>(_cSock, (<span class="type">char</span>*)&amp;header, <span class="built_in">sizeof</span>(header), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="comment">//启动Windows socket 2.x环境</span></span><br><span class="line">WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA dat;</span><br><span class="line"><span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line"><span class="comment">// 用Socket API 建立一个简易的TCP服务端 1 建立一个socket 套接字</span></span><br><span class="line">SOCKET _sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="comment">// 2 bind 绑定用于接受客户端连接的网络接口</span></span><br><span class="line">sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">_sin.sin_family = AF_INET;</span><br><span class="line">_sin.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);<span class="comment">// host to net unsigned short</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">_sin.sin_addr.S_un.S_addr = INADDR_ANY;<span class="comment">//inet_addr(&quot;127.0.0.1&quot;);</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">_sin.sin_addr.s_addr = INADDR_ANY;<span class="comment">//inet_addr(&quot;127.0.0.1&quot;);</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bind</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(_sin)) == SOCKET_ERROR) &#123;</span><br><span class="line"><span class="comment">//绑定错误</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;绑定网络端口失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;绑定网络端口成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3 listen 监听网络端口</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">listen</span>(_sock, <span class="number">5</span>)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;监听网络端口失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;监听网络端口成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">// 伯克利套接字 BSD socket</span></span><br><span class="line">fd_set fdRead; <span class="comment">//描述符(Socket) 集合</span></span><br><span class="line">fd_set fdWrite;</span><br><span class="line">fd_set fdExp;</span><br><span class="line"><span class="comment">//清理集合</span></span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdRead);</span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdWrite);</span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdExp);</span><br><span class="line"><span class="comment">//将描述符(socket)加入集合</span></span><br><span class="line"><span class="built_in">FD_SET</span>(_sock, &amp;fdRead);</span><br><span class="line"><span class="built_in">FD_SET</span>(_sock, &amp;fdWrite);</span><br><span class="line"><span class="built_in">FD_SET</span>(_sock, &amp;fdExp);</span><br><span class="line">SOCKET maxSock = _sock;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line"><span class="built_in">FD_SET</span>(g_clients[n], &amp;fdRead);</span><br><span class="line"><span class="keyword">if</span> (maxSock &lt; g_clients[n]) &#123;</span><br><span class="line">maxSock = g_clients[n];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//nfds 是一个整数值，是指fd_set集合中所有描述符(socket)的范围，而不是数量</span></span><br><span class="line"><span class="comment">//既是所有文件描述符最大值+1，在Windows中这个参数可以写0</span></span><br><span class="line">timeval t = &#123; <span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span>  ret = <span class="built_in">select</span>(maxSock + <span class="number">1</span>, &amp;fdRead, &amp;fdWrite, &amp;fdExp, &amp;t);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;select任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断描述符(socket)是否在集合中</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(_sock, &amp;fdRead)) &#123;</span><br><span class="line"><span class="built_in">FD_CLR</span>(_sock, &amp;fdRead);</span><br><span class="line"><span class="comment">//4 accept 等待接受客户端连接</span></span><br><span class="line">sockaddr_in clientAddr = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> nAddrLen = <span class="built_in">sizeof</span>(sockaddr_in);</span><br><span class="line">SOCKET _cSock = INVALID_SOCKET;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">_cSock = <span class="built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, &amp;nAddrLen);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">_cSock = <span class="built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, (<span class="type">socklen_t</span>*)&amp;nAddrLen);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line"><span class="keyword">if</span> (_cSock == INVALID_SOCKET) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;接受到无效客户端SOCKET...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 新客户端加入，群发</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line">NewUserJoin userJoin;</span><br><span class="line"><span class="built_in">send</span>(g_clients[n], (<span class="type">const</span> <span class="type">char</span>*)&amp;userJoin, <span class="built_in">sizeof</span>(NewUserJoin), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">g_clients.<span class="built_in">push_back</span>(_cSock);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;新客户端加入：socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_cSock &lt;&lt; <span class="string">&quot;, IP = &quot;</span> &lt;&lt; <span class="built_in">inet_ntoa</span>(clientAddr.sin_addr) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(g_clients[n], &amp;fdRead)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">processor</span>(g_clients[n]) == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">auto</span> iter = g_clients.<span class="built_in">begin</span>() + n; <span class="comment">//std::vector&lt;SOCKET&gt;::iterator</span></span><br><span class="line"><span class="keyword">if</span> (iter != g_clients.<span class="built_in">end</span>()) &#123;</span><br><span class="line">g_clients.<span class="built_in">erase</span>(iter);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;空闲时间处理其他业务 ...&quot; &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line"><span class="built_in">closesocket</span>(g_clients[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6 关闭套接字closesocket</span></span><br><span class="line"><span class="comment">//7 清除windows socket环境</span></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line"><span class="built_in">close</span>(g_clients[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;服务器已退出,任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//保留界面</span></span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2024/04/01/pF72K3D.png" alt="image-20240331210407460"></p><p><img src="https://s21.ax1x.com/2024/04/01/pF72QjH.png" alt="Screenshot 2024-03-31 204407"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;客户端代码：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ruvikm.gitee.io/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="C++socket项目" scheme="https://ruvikm.gitee.io/tags/C-socket%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>复现KnowLog模型</title>
    <link href="https://ruvikm.gitee.io/posts/2a42dcdb.html"/>
    <id>https://ruvikm.gitee.io/posts/2a42dcdb.html</id>
    <published>2024-03-31T01:52:08.000Z</published>
    <updated>2024-05-03T12:52:03.996Z</updated>
    
    <content type="html"><![CDATA[<p>这次要复现的一个项目是<strong><a href="https://github.com/LeaperOvO/KnowLog">KnowLog</a></strong>，首先创建一个虚拟环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create KnowLog -n python=3.8</span><br><span class="line">conda activate KnowLog</span><br></pre></td></tr></table></figure><p>然后来到项目的根目录，安装项目所需的环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>之后尝试运行训练的部分</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python KnowLog_pretrain.py --pretrain_data ./datasets/pre-train/all_log.json --abbr ./datasets/pre-train/abbr.json --base_model bert-base-uncased</span><br></pre></td></tr></table></figure><p>毫无意外的会出报错，提示少了什么包，这时候提示缺什么用pip安装即可</p><p>再安装完这些包之后，再次尝试训练，出现了下面这个错</p><p><img src="https://s21.ax1x.com/2024/03/31/pF7ZiLT.png" alt="image-20240331100215828"></p><p>查了一下是python关于SSLError的错误，尝试降级版本解决</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install urllib3==1.25.11</span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2024/03/31/pF7ZkeU.png" alt="image-20240331101640666"></p><p>成功解决问题，开启魔法可以正常下载了</p><p><img src="https://s21.ax1x.com/2024/03/31/pF7ZAwF.png" alt="image-20240331101821967"></p><p>但是发现下载一半又断开连接了，可能是这种下载方式不支持断点续传，于是打算先把预训练模型下载到本地试试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">huggingface-cli download --resume-download google-bert/bert-base-uncased --local-dir bert-base-uncased</span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2024/03/31/pF7ZEo4.png" alt="image-20240331104044658"></p><p>下好了之后再次尝试跑一下，应该是下了CPU版的torch，重新安装一下吧</p><p><img src="https://s21.ax1x.com/2024/03/31/pF7ZeY9.png" alt="image-20240331104118085"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install pytorch==1.10.1 torchvision==0.11.2 torchaudio==0.10.1 cudatoolkit=11.3</span><br></pre></td></tr></table></figure><p>再次尝试训练，跑通了！！！</p><p><img src="https://s21.ax1x.com/2024/03/31/pF7ZuS1.png" alt="image-20240331110908244"></p><p>但是一直卡在34%了…重启运行了一下代码，把代理开了开（可能是代理的原因？）就可以继续往下跑了，但是好像跑不动，之后在GPU服务器上跑一下试试</p><p><img src="https://s21.ax1x.com/2024/03/31/pF7ZKQx.png" alt="image-20240331112852208"></p><p>尝试直接验证一下模型</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python KnowLog_finetune_single.py --train_data ./datasets/tasks/MC/hw_switch_train.json --dev_data ./datasets/tasks/MC/hw_switch_dev.json --test_data ./datasets/tasks/MC/hw_switch_test.json</span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2024/03/31/pF7Z3wD.png" alt="image-20240331113220505"></p><p>也跑通了，之后在服务器上完整的跑一下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这次要复现的一个项目是&lt;strong&gt;&lt;a href=&quot;https://github.com/LeaperOvO/KnowLog&quot;&gt;KnowLog&lt;/a&gt;&lt;/strong&gt;，首先创建一个虚拟环境&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="论文复现" scheme="https://ruvikm.gitee.io/categories/%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>客户端服务器升为select模型</title>
    <link href="https://ruvikm.gitee.io/posts/cbda1d27.html"/>
    <id>https://ruvikm.gitee.io/posts/cbda1d27.html</id>
    <published>2024-03-02T02:17:20.000Z</published>
    <updated>2024-05-03T12:52:04.003Z</updated>
    
    <content type="html"><![CDATA[<p>服务端</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//只有在WIN里可以</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region 结构体定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CMD</span> &#123;</span><br><span class="line">CMD_LOGIN,</span><br><span class="line">CMD_LOGOUT,</span><br><span class="line">CMD_ERROR,</span><br><span class="line">CMD_LOGIN_RESULT,</span><br><span class="line">CMD_LOGOUT_RESULT,</span><br><span class="line">CMD_NEW_USER_JOIN</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataHeader</span> &#123;</span><br><span class="line"><span class="type">short</span> dataLength;</span><br><span class="line"><span class="type">short</span> cmd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Login</span> : <span class="keyword">public</span> DataHeader &#123;<span class="comment">//DataPackage</span></span><br><span class="line"><span class="built_in">Login</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Login);</span><br><span class="line">cmd = CMD_LOGIN;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line"><span class="type">char</span> PassWord[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoginResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LoginResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LoginResult);</span><br><span class="line">cmd = CMD_LOGIN_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Logout</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">Logout</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Logout);</span><br><span class="line">cmd = CMD_LOGOUT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LogoutResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LogoutResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LogoutResult);</span><br><span class="line">cmd = CMD_LOGOUT_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NewUserJoin</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">NewUserJoin</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(NewUserJoin);</span><br><span class="line">cmd = CMD_NEW_USER_JOIN;</span><br><span class="line">sock = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sock;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataPackage</span> &#123;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;SOCKET&gt; g_clients;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">processor</span><span class="params">(SOCKET _cSock)</span> </span>&#123;</span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="type">char</span> szRecv[<span class="number">4096</span>] = &#123;&#125;;</span><br><span class="line"><span class="comment">// 5 接收客户端数据</span></span><br><span class="line"><span class="type">int</span> nLen = <span class="built_in">recv</span>(_cSock, szRecv, <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">DataHeader* header = (DataHeader*)szRecv;</span><br><span class="line"><span class="keyword">if</span> (nLen &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;客户端&lt; socket = &quot;</span> &lt;&lt; _cSock &lt;&lt; <span class="string">&quot; &gt;已退出，任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (header-&gt;cmd) &#123;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGIN: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">Login* login = (Login*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到客户端&lt;Socket = &quot;</span> &lt;&lt; _cSock &lt;&lt; <span class="string">&quot;&gt;请求：CMD_LOGIN, 数据长度：&quot;</span> &lt;&lt; login-&gt;dataLength &lt;&lt; <span class="string">&quot; ,userName =  &quot;</span> &lt;&lt; login-&gt;userName &lt;&lt; <span class="string">&quot; PassWord = &quot;</span> &lt;&lt; login-&gt;PassWord &lt;&lt; endl;</span><br><span class="line"><span class="comment">//忽略判断用户密码是否正确</span></span><br><span class="line">LoginResult ret;</span><br><span class="line"><span class="built_in">send</span>(_cSock, (<span class="type">char</span>*)&amp;ret, <span class="built_in">sizeof</span>(LoginResult), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGOUT: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">Logout* logout = (Logout*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到客户端&lt;Socket = &quot;</span> &lt;&lt; _cSock &lt;&lt; <span class="string">&quot;&gt;请求：CMD_LOGOUT, 数据长度：&quot;</span> &lt;&lt; logout-&gt;dataLength &lt;&lt; <span class="string">&quot; ,userName =  &quot;</span> &lt;&lt; logout-&gt;userName &lt;&lt; endl;</span><br><span class="line"><span class="comment">//忽略判断用户密码是否正确</span></span><br><span class="line">LogoutResult ret;</span><br><span class="line"><span class="built_in">send</span>(_cSock, (<span class="type">char</span>*)&amp;ret, <span class="built_in">sizeof</span>(ret), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line">DataHeader header = &#123; <span class="number">0</span>,CMD_ERROR &#125;;</span><br><span class="line"><span class="built_in">send</span>(_cSock, (<span class="type">char</span>*)&amp;header, <span class="built_in">sizeof</span>(header), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//启动Windows socket 2.x环境</span></span><br><span class="line">WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA dat;</span><br><span class="line"><span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line"><span class="comment">// 用Socket API 建立一个简易的TCP服务端 1 建立一个socket 套接字</span></span><br><span class="line">SOCKET _sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="comment">// 2 bind 绑定用于接受客户端连接的网络接口</span></span><br><span class="line">sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">_sin.sin_family = AF_INET;</span><br><span class="line">_sin.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);<span class="comment">// host to net unsigned short</span></span><br><span class="line">_sin.sin_addr.S_un.S_addr = INADDR_ANY;<span class="comment">//inet_addr(&quot;127.0.0.1&quot;);</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bind</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(_sin)) == SOCKET_ERROR) &#123;</span><br><span class="line"><span class="comment">//绑定错误</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;绑定网络端口失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;绑定网络端口成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3 listen 监听网络端口</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">listen</span>(_sock, <span class="number">5</span>)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;监听网络端口失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;监听网络端口成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">// 伯克利套接字 BSD socket</span></span><br><span class="line">fd_set fdRead; <span class="comment">//描述符(Socket) 集合</span></span><br><span class="line">fd_set fdWrite;</span><br><span class="line">fd_set fdExp;</span><br><span class="line"><span class="comment">//清理集合</span></span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdRead);</span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdWrite);</span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdExp);</span><br><span class="line"><span class="comment">//将描述符(socket)加入集合</span></span><br><span class="line"><span class="built_in">FD_SET</span>(_sock, &amp;fdRead);</span><br><span class="line"><span class="built_in">FD_SET</span>(_sock, &amp;fdWrite);</span><br><span class="line"><span class="built_in">FD_SET</span>(_sock, &amp;fdExp);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line"><span class="built_in">FD_SET</span>(g_clients[n], &amp;fdRead);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//nfds 是一个整数值，是指fd_set集合中所有描述符(socket)的范围，而不是数量</span></span><br><span class="line"><span class="comment">//既是所有文件描述符最大值+1，在Windows中这个参数可以写0</span></span><br><span class="line">timeval t = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span>  ret = <span class="built_in">select</span>(_sock + <span class="number">1</span>, &amp;fdRead, &amp;fdWrite, &amp;fdExp, &amp;t);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;select任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断描述符(socket)是否在集合中</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(_sock, &amp;fdRead)) &#123;</span><br><span class="line"><span class="built_in">FD_CLR</span>(_sock, &amp;fdRead);</span><br><span class="line"><span class="comment">//4 accept 等待接受客户端连接</span></span><br><span class="line">sockaddr_in clientAddr = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> nAddrLen = <span class="built_in">sizeof</span>(sockaddr_in);</span><br><span class="line">SOCKET _cSock = INVALID_SOCKET;</span><br><span class="line">_cSock = <span class="built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, &amp;nAddrLen);</span><br><span class="line"><span class="keyword">if</span> (_cSock == INVALID_SOCKET) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;接受到无效客户端SOCKET...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 新客户端加入，群发</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line">NewUserJoin userJoin;</span><br><span class="line"><span class="built_in">send</span>(g_clients[n], (<span class="type">const</span> <span class="type">char</span>*)&amp;userJoin, <span class="built_in">sizeof</span>(NewUserJoin), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">g_clients.<span class="built_in">push_back</span>(_cSock);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;新客户端加入：socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_cSock &lt;&lt; <span class="string">&quot;, IP = &quot;</span> &lt;&lt; <span class="built_in">inet_ntoa</span>(clientAddr.sin_addr) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> n = <span class="number">0</span>; n &lt; fdRead.fd_count; n++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">processor</span>(fdRead.fd_array[n]) == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">auto</span> iter = <span class="built_in">find</span>(g_clients.<span class="built_in">begin</span>(), g_clients.<span class="built_in">end</span>(), fdRead.fd_array[n]);</span><br><span class="line"><span class="keyword">if</span> (iter != g_clients.<span class="built_in">end</span>()) &#123;</span><br><span class="line">g_clients.<span class="built_in">erase</span>(iter);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试中间select函数最后一个参数</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;空闲时间处理其他业务 ...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> n = g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line"><span class="built_in">closesocket</span>(g_clients[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6 关闭套接字closesocket</span></span><br><span class="line"><span class="comment">//7 清除windows socket环境</span></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;服务器已退出,任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//保留界面</span></span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//只有在WIN里可以</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region 结构体定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CMD</span> &#123;</span><br><span class="line">CMD_LOGIN,</span><br><span class="line">CMD_LOGOUT,</span><br><span class="line">CMD_ERROR,</span><br><span class="line">CMD_LOGIN_RESULT,</span><br><span class="line">CMD_LOGOUT_RESULT,</span><br><span class="line">CMD_NEW_USER_JOIN</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataHeader</span> &#123;</span><br><span class="line"><span class="type">short</span> dataLength;</span><br><span class="line"><span class="type">short</span> cmd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Login</span> : <span class="keyword">public</span> DataHeader &#123;<span class="comment">//DataPackage</span></span><br><span class="line"><span class="built_in">Login</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Login);</span><br><span class="line">cmd = CMD_LOGIN;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line"><span class="type">char</span> PassWord[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoginResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LoginResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LoginResult);</span><br><span class="line">cmd = CMD_LOGIN_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Logout</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">Logout</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Logout);</span><br><span class="line">cmd = CMD_LOGOUT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LogoutResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LogoutResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LogoutResult);</span><br><span class="line">cmd = CMD_LOGOUT_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NewUserJoin</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">NewUserJoin</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(NewUserJoin);</span><br><span class="line">cmd = CMD_NEW_USER_JOIN;</span><br><span class="line">sock = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sock;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataPackage</span> &#123;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">processor</span><span class="params">(SOCKET _cSock)</span> </span>&#123;</span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="type">char</span> szRecv[<span class="number">4096</span>] = &#123;&#125;;</span><br><span class="line"><span class="comment">// 5 接收客户端数据</span></span><br><span class="line"><span class="type">int</span> nLen = <span class="built_in">recv</span>(_cSock, szRecv, <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">DataHeader* header = (DataHeader*)szRecv;</span><br><span class="line"><span class="keyword">if</span> (nLen &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;与服务器断开连接，任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (header-&gt;cmd) &#123;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGIN_RESULT: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">LoginResult* login = (LoginResult*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到服务端消息：CMD_LOGIN_RESULT, 数据长度：&quot;</span> &lt;&lt; login-&gt;dataLength &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGOUT_RESULT: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">LogoutResult* logout = (LogoutResult*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到服务端消息：CMD_LOGOUT_RESULT, 数据长度：&quot;</span> &lt;&lt; logout-&gt;dataLength &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_NEW_USER_JOIN: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">NewUserJoin* userJoin = (NewUserJoin*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到服务端消息：CMD_LOGOUT_RESULT, 数据长度：&quot;</span> &lt;&lt; userJoin-&gt;dataLength &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//启动Windows socket 2.x环境</span></span><br><span class="line">WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA dat;</span><br><span class="line"><span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line"><span class="comment">// 用Socket API 建立一个简易的TCP服务端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 建立一个socket</span></span><br><span class="line">SOCKET _sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == _sock) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;建立Socket失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;建立Socket成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 连接服务器 connect</span></span><br><span class="line">sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">_sin.sin_family = AF_INET;</span><br><span class="line">_sin.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);</span><br><span class="line">_sin.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">connect</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(sockaddr_in));</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == ret) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;连接服务器失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;连接服务器成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">fd_set fdReads;</span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdReads);</span><br><span class="line"><span class="built_in">FD_SET</span>(_sock,&amp;fdReads);</span><br><span class="line">timeval t = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">select</span>(_sock, &amp;fdReads, <span class="number">0</span>, <span class="number">0</span>, &amp;t);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;select任务结束&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(_sock, &amp;fdReads)) &#123;</span><br><span class="line"><span class="built_in">FD_CLR</span>(_sock, &amp;fdReads);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == <span class="built_in">processor</span>(_sock)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;select任务结束2...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;空闲时间处理其他业务 ...&quot;</span> &lt;&lt; endl;</span><br><span class="line">Login login;</span><br><span class="line"><span class="built_in">strcpy</span>(login.userName, <span class="string">&quot;lyd&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(login.PassWord, <span class="string">&quot;lyd&quot;</span>);</span><br><span class="line"><span class="built_in">send</span>(_sock, (<span class="type">const</span> <span class="type">char</span>*)&amp;login, <span class="built_in">sizeof</span>(Login), <span class="number">0</span>);</span><br><span class="line"><span class="comment">//仅仅适用于Windows</span></span><br><span class="line"><span class="comment">// Sleep(1000);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 7 关闭套接字closesocket</span></span><br><span class="line"><span class="built_in">closesocket</span>(_sock);</span><br><span class="line"><span class="comment">// 8 清除windows socket环境</span></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;客户端已退出,任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//保留界面</span></span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s11.ax1x.com/2024/03/02/pF0yFOS.png" alt="image-20240302101949530"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;服务端&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;defin</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ruvikm.gitee.io/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="C++socket项目" scheme="https://ruvikm.gitee.io/tags/C-socket%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>nginx反向代理出错</title>
    <link href="https://ruvikm.gitee.io/posts/548bc04a.html"/>
    <id>https://ruvikm.gitee.io/posts/548bc04a.html</id>
    <published>2024-01-26T13:24:54.000Z</published>
    <updated>2024-05-03T12:52:03.991Z</updated>
    
    <content type="html"><![CDATA[<p>使用yum安装好了nginx</p><h2 id="问题再现"><a href="#问题再现" class="headerlink" title="问题再现"></a>问题再现</h2><p>进入路径配置好了<code>nginx.conf</code>文件</p><p><img src="https://s11.ax1x.com/2024/01/26/pFnwVDP.png" alt="QQ截图20240126212909"></p><p>验证<code>nginx.conf</code>文件是否有语法错误</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure><p>重载nginx服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>然后启动程序，发现nginx报错</p><p><img src="https://s11.ax1x.com/2024/01/26/pFnwmE8.png" alt="img"></p><p>在终端可以尝试输入了这样一句话</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setsebool -P httpd_can_network_connect <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>解释：可能是SELinux的原因，它会基于最小权限原则默认拦截了 Nginx 的请求</p><p><img src="https://s11.ax1x.com/2024/01/26/pFnwnUS.png" alt="image-20240126213917121"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用yum安装好了nginx&lt;/p&gt;
&lt;h2 id=&quot;问题再现&quot;&gt;&lt;a href=&quot;#问题再现&quot; class=&quot;headerlink&quot; title=&quot;问题再现&quot;&gt;&lt;/a&gt;问题再现&lt;/h2&gt;&lt;p&gt;进入路径配置好了&lt;code&gt;nginx.conf&lt;/code&gt;文件&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="个人笔记" scheme="https://ruvikm.gitee.io/tags/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>在虚拟机Centos 7中配置Redis环境</title>
    <link href="https://ruvikm.gitee.io/posts/undefined.html"/>
    <id>https://ruvikm.gitee.io/posts/undefined.html</id>
    <published>2024-01-08T12:05:08.000Z</published>
    <updated>2024-01-08T13:04:38.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载fedora的epel仓库</span></span><br><span class="line">sudo yum install epel-release</span><br><span class="line"><span class="comment"># 安装redis数据库</span></span><br><span class="line">sudo yum install redis</span><br></pre></td></tr></table></figure><p>测试是否安装成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动redis</span></span><br><span class="line">service redis start</span><br><span class="line"><span class="comment">#查看redis进程</span></span><br><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure><p><img src="https://s11.ax1x.com/2024/01/08/pFSvcQg.png" alt="image-20240108203745982"></p><h2 id="配置Redis"><a href="#配置Redis" class="headerlink" title="配置Redis"></a>配置Redis</h2><p><strong>以需求为远程连接Redis为例</strong></p><p>开始配置之前，先关闭Redis服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭redis</span></span><br><span class="line">service redis stop</span><br></pre></td></tr></table></figure><h4 id="打开配置文件"><a href="#打开配置文件" class="headerlink" title="打开配置文件"></a>打开配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/redis.conf</span><br></pre></td></tr></table></figure><p>进入编辑器后，输入<code>/</code>+<code>搜索的内容</code>然后回车进行搜索，按<code>n</code>键查找下一个(eg:修改端口号时输入/port)，按<code>i</code>进入到插入模式进行修改，修改完后按<code>Esc</code>退出插入模式</p><h4 id="修改端口号（按照需求修改）"><a href="#修改端口号（按照需求修改）" class="headerlink" title="修改端口号（按照需求修改）"></a>修改端口号（按照需求修改）</h4><p><img src="https://s11.ax1x.com/2024/01/08/pFSvmM4.png" alt="image-20240108202709064"></p><h4 id="修改默认密码（建议修改）"><a href="#修改默认密码（建议修改）" class="headerlink" title="修改默认密码（建议修改）"></a>修改默认密码（建议修改）</h4><p><img src="https://s11.ax1x.com/2024/01/08/pFSvnsJ.png" alt="image-20240108202554924"></p><h4 id="取消只允许在本机连接redis"><a href="#取消只允许在本机连接redis" class="headerlink" title="取消只允许在本机连接redis"></a>取消只允许在本机连接redis</h4><p><img src="https://s11.ax1x.com/2024/01/08/pFSzuU1.png" alt="image-20240108202958241"></p><p>将<code>bind 127.0.0.1</code>注释掉</p><p>然后输入<code>:wq</code>保存并退出</p><h4 id="设置Redis开机自启"><a href="#设置Redis开机自启" class="headerlink" title="设置Redis开机自启"></a>设置Redis开机自启</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig redis on</span><br></pre></td></tr></table></figure><h2 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h2><p>在linux下的防火墙中开放6379端口（如果上面更换了端口号就按自己的来）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br></pre></td></tr></table></figure><p>重启防火墙</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure><h2 id="使用可视化软件连接Redis"><a href="#使用可视化软件连接Redis" class="headerlink" title="使用可视化软件连接Redis"></a>使用可视化软件连接Redis</h2><p>下载可视化软件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://gitee.com/qishibo/AnotherRedisDesktopManager/releases</span><br></pre></td></tr></table></figure><p>查看自己ip地址</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><p><img src="https://s11.ax1x.com/2024/01/08/pFSzK4x.png" alt="屏幕截图 2024-01-08 204612"></p><p>配置远程连接，地址为上面的箭头所指的ip地址，密码为刚刚配置Redis时配置的</p><p><img src="https://s11.ax1x.com/2024/01/08/pFSzQC6.png" alt="屏幕截图 2024-01-08 205033"></p><p>连接成功</p><p><img src="https://s11.ax1x.com/2024/01/08/pFSzl8K.png" alt="屏幕截图 2024-01-08 205120"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装Redis&quot;&gt;&lt;a href=&quot;#安装Redis&quot; class=&quot;headerlink&quot; title=&quot;安装Redis&quot;&gt;&lt;/a&gt;安装Redis&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    
    <category term="个人笔记" scheme="https://ruvikm.gitee.io/tags/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>建立一个简易的TCP客户端与服务端</title>
    <link href="https://ruvikm.gitee.io/posts/aa711198.html"/>
    <id>https://ruvikm.gitee.io/posts/aa711198.html</id>
    <published>2023-12-15T10:19:52.000Z</published>
    <updated>2024-05-03T12:52:04.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP服务端"><a href="#TCP服务端" class="headerlink" title="TCP服务端"></a>TCP服务端</h2><p>分为一下六步：</p><ol><li>建立一个socket 套接字</li><li>bind 绑定用于接受客户端连接的网络接口</li><li>listen 监听网络端口</li><li>accept 等待接受客户端连接</li><li>send 向客户端发送一条数据</li><li>关闭套接字closesocket</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//只有在WIN里可以</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//启动Windows socket 2.x环境</span></span><br><span class="line">WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA dat;</span><br><span class="line"><span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line"><span class="comment">// 用Socket API 建立一个简易的TCP服务端</span></span><br><span class="line"><span class="comment">// 1 建立一个socket 套接字</span></span><br><span class="line">SOCKET _sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="comment">// 2 bind 绑定用于接受客户端连接的网络接口</span></span><br><span class="line">sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">_sin.sin_family = AF_INET;</span><br><span class="line">_sin.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);<span class="comment">// host to net unsigned short</span></span><br><span class="line">_sin.sin_addr.S_un.S_addr = INADDR_ANY;<span class="comment">//inet_addr(&quot;127.0.0.1&quot;);</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bind</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(_sin)) == SOCKET_ERROR) &#123;</span><br><span class="line"><span class="comment">//绑定错误</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;绑定网络端口失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;绑定网络端口成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3 listen 监听网络端口</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">listen</span>(_sock, <span class="number">5</span>)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;监听网络端口失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;监听网络端口成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4 accept 等待接受客户端连接</span></span><br><span class="line">sockaddr_in clientAddr = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> nAddrLen = <span class="built_in">sizeof</span>(sockaddr_in);</span><br><span class="line">SOCKET _cSock = INVALID_SOCKET;</span><br><span class="line"><span class="type">char</span> msgBuf[] = <span class="string">&quot;Hello ,I&#x27;m Server.&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">_cSock = <span class="built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, &amp;nAddrLen);</span><br><span class="line"><span class="keyword">if</span> (_cSock == INVALID_SOCKET) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;接受到无效客户端SOCKET...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;新客户端加入：IP =&quot;</span> &lt;&lt; <span class="built_in">inet_ntoa</span>(clientAddr.sin_addr) &lt;&lt; endl;</span><br><span class="line"><span class="comment">//5 send 向客户端发送一条数据</span></span><br><span class="line"><span class="built_in">send</span>(_cSock, msgBuf, <span class="built_in">strlen</span>(msgBuf) + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6 关闭套接字closesocket</span></span><br><span class="line"><span class="built_in">closesocket</span>(_sock);</span><br><span class="line"><span class="comment">//7 清除windows socket环境</span></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="comment">//保留界面</span></span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TCP服务端-1"><a href="#TCP服务端-1" class="headerlink" title="TCP服务端"></a>TCP服务端</h2><p>分为四步：</p><ol><li>建立一个socket</li><li>连接服务器 connect</li><li>接受服务器信息 recv</li><li>关闭套接字closesocket</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//只有在WIN里可以</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//启动Windows socket 2.x环境</span></span><br><span class="line">WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA dat;</span><br><span class="line"><span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line"><span class="comment">// 用Socket API 建立一个简易的TCP服务端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 建立一个socket</span></span><br><span class="line">SOCKET _sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == _sock) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;建立Socket失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;建立Socket成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 连接服务器 connect</span></span><br><span class="line">sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">_sin.sin_family = AF_INET;</span><br><span class="line">_sin.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);</span><br><span class="line">_sin.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">connect</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(sockaddr_in));</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == ret) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;连接Socket失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;连接Socket成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3 接受服务器信息 recv</span></span><br><span class="line"><span class="type">char</span> recvBuf[<span class="number">256</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> nlen = <span class="built_in">recv</span>(_sock, recvBuf, <span class="number">256</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (nlen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;接收到数据为：&quot;</span> &lt;&lt; recvBuf &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4 关闭套接字closesocket</span></span><br><span class="line"><span class="built_in">closesocket</span>(_sock);</span><br><span class="line"><span class="comment">// 5 清除windows socket环境</span></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="comment">//保留界面</span></span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h2><p><strong>服务端</strong></p><p><img src="https://s11.ax1x.com/2023/12/15/pi41BFK.png" alt="屏幕截图 2023-12-15 181558"></p><p><strong>客户端</strong></p><p><img src="https://s11.ax1x.com/2023/12/15/pi41DJO.png" alt="屏幕截图 2023-12-15 181602"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TCP服务端&quot;&gt;&lt;a href=&quot;#TCP服务端&quot; class=&quot;headerlink&quot; title=&quot;TCP服务端&quot;&gt;&lt;/a&gt;TCP服务端&lt;/h2&gt;&lt;p&gt;分为一下六步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建立一个socket 套接字&lt;/li&gt;
&lt;li&gt;bind 绑定用于</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ruvikm.gitee.io/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="C++socket项目" scheme="https://ruvikm.gitee.io/tags/C-socket%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>JZ22 链表中倒数最后k个结点</title>
    <link href="https://ruvikm.gitee.io/posts/8f3b69e8.html"/>
    <id>https://ruvikm.gitee.io/posts/8f3b69e8.html</id>
    <published>2023-11-20T08:08:47.000Z</published>
    <updated>2024-05-03T12:52:03.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>输入一个长度为 n 的链表，设链表中的元素的值为 a_i ，返回该链表中倒数第k个节点。</p><p>如果该链表长度小于k，请返回一个长度为 0 的链表。</p><p>数据范围：</p><script type="math/tex; mode=display">0 \leq n \leq 10^5,0 \leq a_i \leq 10^9,0 \leq k \leq 10^9</script><p>要求：空间复杂度 <em>O</em>(n)，时间复杂度 O<em>(</em>n)</p><p>进阶：空间复杂度O(1)，时间复杂度 O(n)</p><p>例如输入{1,2,3,4,5},2时，对应的链表结构如下图所示：</p><p><img src="https://z1.ax1x.com/2023/11/20/piap43j.png" alt="img"></p><p>其中蓝色部分为该链表的最后2个结点，所以返回倒数第2个结点（也即结点值为4的结点）即可，系统会打印后面所有的节点来比较。</p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">&#123;1,2,3,4,5&#125;,2</span><br><span class="line">返回值：</span><br><span class="line">&#123;4,5&#125;</span><br><span class="line">说明：</span><br><span class="line">返回倒数第2个节点4，系统会打印后面所有的节点来比较。 </span><br></pre></td></tr></table></figure><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">&#123;2&#125;,8</span><br><span class="line">返回值：</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="题解1"><a href="#题解1" class="headerlink" title="题解1"></a>题解1</h2><p>首先求出链表的长度<code>n</code>，从题目的倒数第<code>k</code>个结点，推出是正数的第<code>n - k</code>个结点。若<code>n - k &lt; 0</code>，则返回空值</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param pHead ListNode类</span></span><br><span class="line"><span class="comment">     * @param k int整型</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">FindKthToTail</span><span class="params">(ListNode* pHead, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">        ListNode* p = pHead;</span><br><span class="line">        <span class="keyword">for</span> (; p != <span class="literal">nullptr</span>; p = p-&gt;next, len++);</span><br><span class="line">        <span class="type">int</span> step = len - k;</span><br><span class="line">        <span class="keyword">if</span> (step &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (step--) &#123;</span><br><span class="line">            pHead = pHead-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题解2"><a href="#题解2" class="headerlink" title="题解2"></a>题解2</h2><p>用一个栈处理，由于栈是后进先出的，所以正好符合题意的倒数。倒数第k个结点就意味着栈需要弹出k次即可。</p><p>这里有一个细节，栈都弹完了，k还是大于等于0的，则应该返回空值</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param pHead ListNode类</span></span><br><span class="line"><span class="comment">     * @param k int整型</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">FindKthToTail</span><span class="params">(ListNode* pHead, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        stack&lt;ListNode*&gt; st;</span><br><span class="line">        ListNode* res;</span><br><span class="line">        <span class="keyword">if</span>(k &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span> (pHead != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            st.<span class="built_in">push</span>(pHead);</span><br><span class="line">            pHead = pHead-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (k-- &amp;&amp; !st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            res = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;输入一个长度为 n 的链表，设链表中的元素的值为 a_i ，返回该链表中倒数第k个节点。&lt;/p&gt;
&lt;p&gt;如果该链表长度小于k，请返回一个长度</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://ruvikm.gitee.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>jz23 链表中环的入口结点</title>
    <link href="https://ruvikm.gitee.io/posts/f7d0df50.html"/>
    <id>https://ruvikm.gitee.io/posts/f7d0df50.html</id>
    <published>2023-11-20T02:33:18.000Z</published>
    <updated>2024-05-03T12:52:04.007Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给一个长度为n链表，若其中包含环，请找出该链表的环的入口结点，否则，返回null。</p><p>数据范围： n≤10000，1&lt;=结点值&lt;=10000</p><p>要求：空间复杂度 O<em>(1)，时间复杂度 O</em>(<em>n</em>)</p><p>例如，输入{1,2},{3,4,5}时，对应的环形链表如下图所示：</p><p><img src="https://z1.ax1x.com/2023/11/20/piU6lqS.png" alt="img"></p><p>可以看到环的入口结点的结点值为3，所以返回结点值为3的结点。</p><h3 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h3><p>输入分为2段，第一段是入环前的链表部分，第二段是链表环的部分，后台会根据第二段是否为空将这两段组装成一个无环或者有环单链表</p><h3 id="返回值描述："><a href="#返回值描述：" class="headerlink" title="返回值描述："></a>返回值描述：</h3><p>返回链表的环的入口结点即可，我们后台程序会打印这个结点对应的结点值；若没有，则返回对应编程语言的空结点即可。</p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,2&#125;,&#123;3,4,5&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>说明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回环形链表入口结点，我们后台程序会打印该环形链表入口结点对应的结点值，即3   </span><br></pre></td></tr></table></figure><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1&#125;,&#123;&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;null&quot;</span><br></pre></td></tr></table></figure><p>说明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">没有环，返回对应编程语言的空结点，后台程序会打印&quot;null&quot;   </span><br></pre></td></tr></table></figure><h2 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;,&#123;2&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>说明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">环的部分只有一个结点，所以返回该环形链表入口结点，后台程序打印该结点对应的结点值，即2 </span><br></pre></td></tr></table></figure><h2 id="题解1"><a href="#题解1" class="headerlink" title="题解1"></a>题解1</h2><p>如果不考虑空间复杂度，可以使用一个大小为10000的数组<code>a</code>存放各个结点的值，每当遍历到一个节点V的时候，就把<code>a[v-val]++</code></p><p>因为存在换，所以当第一个<code>a[v-val] == 2</code>的时候，即为环的入口结点</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">        val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vt</span><span class="params">(<span class="number">10000</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(pHead != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            vt[pHead-&gt;val]++;</span><br><span class="line">            <span class="keyword">if</span>(vt[pHead-&gt;val] == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pHead = pHead-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题解2"><a href="#题解2" class="headerlink" title="题解2"></a>题解2</h2><p>可以使用快慢指针，快指针<code>fast</code>每次走两步，慢指针<code>slow</code>每次走一步。这样如果有环存在的话，在环中，快慢指针的距离，每移动一次距离就会减一，这样如果它们相遇的话，就一定可以判断链表中有没有环。</p><p>那么如何判断环的入口点是在哪里呢？我们假设环前面的节点有a个，环中的节点有b个，慢指针走的长度为S_dis</p><p>快指针走的路线为F_dis。当两个指针相遇时，依据题意可以等于以下两个等式</p><script type="math/tex; mode=display">F_{dis} = 2  S_{dis}(因为快指针每次走的步数是慢指针的两倍)</script><script type="math/tex; mode=display">F_{dis} = a + nb(当两者相遇时，快指针一定已经绕环走了n圈)</script><p>联立可得</p><script type="math/tex; mode=display">2  S_{dis} = a + nb</script><p>可以得出</p><script type="math/tex; mode=display">a = S_{dis} = nb</script><script type="math/tex; mode=display">F_{dis} = 2nb</script><p>所以当两个指针相遇的时候，将快指针移到链表头部重新往后走，这次一次走一步。慢指针保持原来的位置，继续向后走，也是一次走一步，当两个指针相遇的时候，即是环的入口处。（这时候快指针刚好走完<code>a = nb</code>的长度到达环的入口处）</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">        val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">        ListNode* slow = pHead;</span><br><span class="line">        ListNode* fast = pHead;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            slow = slow -&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            <span class="comment">//如果指向空就说明没有环</span></span><br><span class="line">            <span class="keyword">if</span> (slow == <span class="literal">nullptr</span> || fast == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (slow != fast);</span><br><span class="line">        fast = pHead;</span><br><span class="line">        <span class="keyword">while</span> (fast != slow) &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;给一个长度为n链表，若其中包含环，请找出该链表的环的入口结点，否则，返回null。&lt;/p&gt;
&lt;p&gt;数据范围： n≤10000，1&amp;lt;=结</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://ruvikm.gitee.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>JZ52 两个链表的第一个公共结点</title>
    <link href="https://ruvikm.gitee.io/posts/c87ee886.html"/>
    <id>https://ruvikm.gitee.io/posts/c87ee886.html</id>
    <published>2023-11-19T11:13:13.000Z</published>
    <updated>2024-05-03T12:52:03.992Z</updated>
    
    <content type="html"><![CDATA[<p>输入两个无环的单向链表，找出它们的第一个公共结点，如果没有公共节点则返回空。（注意因为传入数据是链表，所以错误测试数据的提示是用其他方式显示的，保证传入数据是正确的）</p><p>数据范围： n≤1000<br>要求：空间复杂度 O<em>(1)，时间复杂度 )</em>O<em>(</em>n)</p><p>例如，输入{1,2,3},{4,5},{6,7}时，两个无环的单向链表的结构如下图所示：</p><p><img src="https://z1.ax1x.com/2023/11/19/piUE2Pf.png" alt="img"></p><p>可以看到它们的第一个公共结点的结点值为6，所以返回结点值为6的结点。</p><h3 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h3><p>输入分为是3段，第一段是第一个链表的非公共部分，第二段是第二个链表的非公共部分，第三段是第一个链表和第二个链表的公共部分。 后台会将这3个参数组装为两个链表，并将这两个链表对应的头节点传入到函数FindFirstCommonNode里面，用户得到的输入只有pHead1和pHead2。</p><h3 id="返回值描述："><a href="#返回值描述：" class="headerlink" title="返回值描述："></a>返回值描述：</h3><p>返回传入的pHead1和pHead2的第一个公共结点，后台会打印以该节点为头节点的链表。</p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,2,3&#125;,&#123;4,5&#125;,&#123;6,7&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;6,7&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一个参数&#123;1,2,3&#125;代表是第一个链表非公共部分，第二个参数&#123;4,5&#125;代表是第二个链表非公共部分，最后的&#123;6,7&#125;表示的是2个链表的公共部分</span><br><span class="line">这3个参数最后在后台会组装成为2个两个无环的单链表，且是有公共节点的          </span><br></pre></td></tr></table></figure><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1&#125;,&#123;2,3&#125;,&#123;&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2个链表没有公共节点 ,返回null，后台打印&#123;&#125;       </span><br></pre></td></tr></table></figure><h2 id="题解1"><a href="#题解1" class="headerlink" title="题解1"></a>题解1</h2><p>首先先求出两个链表的长度，让长度长一点的指针先往前走几步（走的步数 = 两链表长度差），然后让两个指针分别指向两个链表，当两个指针相等的时候几个返回当前指向的结点</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">            val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">FindFirstCommonNode</span><span class="params">( ListNode* pHead1, ListNode* pHead2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pHead1 == <span class="literal">nullptr</span> || pHead2 == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* res = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="type">int</span> len1 = <span class="number">0</span>, len2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ListNode* p = pHead1; p != <span class="literal">nullptr</span>; p = p-&gt;next, len1++);</span><br><span class="line">        <span class="keyword">for</span> (ListNode* p = pHead2; p != <span class="literal">nullptr</span>; p = p-&gt;next, len2++);</span><br><span class="line">        <span class="type">int</span> step = <span class="built_in">abs</span>(len2 - len1);</span><br><span class="line"><span class="keyword">if</span>(len1 &gt; len2)&#123;</span><br><span class="line"><span class="keyword">while</span>(step--)&#123;</span><br><span class="line">pHead1 = pHead1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(step--)&#123;</span><br><span class="line">pHead2 = pHead2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(pHead1 != pHead2)&#123;</span><br><span class="line">pHead1 = pHead1-&gt;next;</span><br><span class="line">pHead2 = pHead2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> pHead1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="题解2"><a href="#题解2" class="headerlink" title="题解2"></a>题解2</h2><p>用两个指针分别指向两个链表，让其循环移动，当指向同一个结点的时候即为公共结点</p><p><img src="https://z1.ax1x.com/2023/11/19/piUES4f.png" alt="微信图片_20231119204317"></p><p>也就是说，当指针1走完{1,2,3,6,7}的时候，让它指向{4,5}。同理，当指针2走完{4,5,6,7}的时候，让它指向{1,2,3}</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">int val;</span></span><br><span class="line"><span class="comment">struct ListNode *next;</span></span><br><span class="line"><span class="comment">ListNode(int x) :</span></span><br><span class="line"><span class="comment">val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">FindFirstCommonNode</span><span class="params">( ListNode* pHead1, ListNode* pHead2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead1 == <span class="literal">nullptr</span> ||pHead2 == <span class="literal">nullptr</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">ListNode * H1 = pHead1, * H2 = pHead2;</span><br><span class="line"><span class="keyword">while</span>(H1 != H2)&#123;</span><br><span class="line">H1 = (H1 == <span class="literal">nullptr</span>) ? pHead2 : H1-&gt;next;</span><br><span class="line">H2 = (H2 == <span class="literal">nullptr</span>) ? pHead1 : H2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> H1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;输入两个无环的单向链表，找出它们的第一个公共结点，如果没有公共节点则返回空。（注意因为传入数据是链表，所以错误测试数据的提示是用其他方式显示的，保证传入数据是正确的）&lt;/p&gt;
&lt;p&gt;数据范围： n≤1000&lt;br&gt;要求：空间复杂度 O&lt;em&gt;(1)，时间复杂度 )&lt;/em&gt;</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://ruvikm.gitee.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>jz25 合并两个排序的链表</title>
    <link href="https://ruvikm.gitee.io/posts/5ac6a0d9.html"/>
    <id>https://ruvikm.gitee.io/posts/5ac6a0d9.html</id>
    <published>2023-11-18T02:35:51.000Z</published>
    <updated>2024-05-03T12:52:03.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>输入两个递增的链表，单个链表的长度为n，合并这两个链表并使新链表中的节点仍然是递增排序的。</p><p>数据范围： 0≤10000≤<em>n</em>≤1000，−1000≤节点值≤1000−1000≤节点值≤1000<br>要求：空间复杂度 <em>O</em>(1)，时间复杂度 <em>O</em>(<em>n</em>)</p><p>如输入{1,3,5},{2,4,6}时，合并后的链表为{1,2,3,4,5,6}，所以对应的输出为{1,2,3,4,5,6}，转换过程如下图所示：</p><p><img src="https://z1.ax1x.com/2023/11/19/piUEyVI.png" alt="09DD8C2662B96CE14928333F055C5580"></p><p>或输入{-1,2,4},{1,3,4}时，合并后的链表为{-1,1,2,3,4,4}，所以对应的输出为{-1,1,2,3,4,4}，转换过程如下图所示：</p><p><img src="https://z1.ax1x.com/2023/11/19/piUE6at.png" alt="8266E4BFEDA1BD42D8F9794EB4EA0A13"></p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,3,5&#125;,&#123;2,4,6&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,2,3,4,5,6&#125;</span><br></pre></td></tr></table></figure><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;,&#123;&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;-1,2,4&#125;,&#123;1,3,4&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;-1,1,2,3,4,4&#125;</span><br></pre></td></tr></table></figure><h1 id="题解1"><a href="#题解1" class="headerlink" title="题解1"></a>题解1</h1><p>可以使用虚拟头结点，可以再新建一个链表，然后把两个链表的结点从小到大依次插入到新链表中即可。使用双指针分别指向两个链表，然后每次将较小的结点放在虚拟头结点后面，然后指针（刚刚较小的）放后移动，另一个指针不动</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param pHead1 ListNode类</span></span><br><span class="line"><span class="comment">     * @param pHead2 ListNode类</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">Merge</span><span class="params">(ListNode* pHead1, ListNode* pHead2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span> (pHead1 == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> pHead2;</span><br><span class="line">        <span class="keyword">if</span> (pHead2 == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> pHead1;</span><br><span class="line">        ListNode* p = pHead2, *q = pHead1;</span><br><span class="line">        ListNode* newHead;</span><br><span class="line">        newHead = p-&gt;val &lt;= q-&gt;val ? p : q;</span><br><span class="line">        ListNode *res = newHead;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">nullptr</span> &amp;&amp; q != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;val &lt;= q-&gt;val) &#123;</span><br><span class="line">                ListNode* tmp = p-&gt;next;</span><br><span class="line">                ListNode* node = p;</span><br><span class="line">                newHead-&gt;next = node;</span><br><span class="line">                newHead = node;</span><br><span class="line">                p = tmp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ListNode* tmp = q-&gt;next;</span><br><span class="line">                ListNode* node = q;</span><br><span class="line">                newHead-&gt;next = node;</span><br><span class="line">                newHead = node;</span><br><span class="line">                q = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            newHead-&gt;next = p;</span><br><span class="line">            newHead = p;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (q != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            newHead-&gt;next = q;</span><br><span class="line">            newHead = q;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>本来打算将一个链表插入到另一个链表之中的，但是太复杂了，一直没有AC</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;输入两个递增的链表，单个链表的长度为n，合并这两个链表并使新链表中的节点仍然是递增排序的。&lt;/p&gt;
&lt;p&gt;数据范围： 0≤10000≤&lt;em</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://ruvikm.gitee.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>JZ24 反转链表</title>
    <link href="https://ruvikm.gitee.io/posts/628ce84.html"/>
    <id>https://ruvikm.gitee.io/posts/628ce84.html</id>
    <published>2023-11-16T10:48:55.000Z</published>
    <updated>2024-05-03T12:52:03.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给定一个单链表的头结点<code>pHead</code>(该头节点是有值的，比如在下图，它的<code>val</code>是1)，长度为n，反转该链表后，返回新链表的表头。</p><p>数据范围： 0≤10000≤<em>n</em>≤1000</p><p>要求：空间复杂度 O<em>(1) ，时间复杂度 O</em>(<em>n</em>) 。</p><p>如当输入链表{1,2,3}时，</p><p>经反转后，原链表变为{3,2,1}，所以对应的输出为{3,2,1}。</p><p>以上转换过程如下图所示：</p><p><img src="https://z1.ax1x.com/2023/11/19/piUEBKH.png" alt="4A47A0DB6E60853DEDFCFDF08A5CA249"></p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,2,3&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;3,2,1&#125;</span><br></pre></td></tr></table></figure><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">空链表则输出空                 </span><br></pre></td></tr></table></figure><h2 id="题解1"><a href="#题解1" class="headerlink" title="题解1"></a>题解1</h2><p>使用栈当做中转站，把每个节点倒过来，然后重新拼成一个新链表</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param head ListNode类</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        stack&lt;ListNode*&gt; st;</span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            st.<span class="built_in">push</span>(p);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* tail = st.<span class="built_in">top</span>();</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        ListNode* res = tail;</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            ListNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            tail-&gt;next = node;</span><br><span class="line">            tail = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后的节点为原来的头结点，需要将其的下一个节点设为空，否则会构成环</span></span><br><span class="line">        tail-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://z1.ax1x.com/2023/11/16/pit8EWR.png" alt="构成环"></p><p><strong>题目细节</strong></p><p>结点3为<code>tail</code>变量，经过<code>while</code>循环，会使用尾插法将结点1和2都插入到3后面，这期间，结点2和3和<code>next</code>指针都经过了处理，而最后一个结点1的<code>next</code>指针（结点1的<code>next</code>原本是指向结点2的）却没有处理，因为此时已经跳出了<code>while</code>循环。如果不将结点1的下一个结点置为空，则会在结点1和2之间形成环，程序输出会如下：</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">3,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2...</span><br></pre></td></tr></table></figure><h2 id="题解2"><a href="#题解2" class="headerlink" title="题解2"></a>题解2</h2><p>使用两个结点求解，将摘下来的每一个结点使用头插法插入到新的链表中，如图画了程序两步的情况</p><p><img src="https://z1.ax1x.com/2023/11/17/pit5oeP.png" alt="反转链表"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *int val;</span></span><br><span class="line"><span class="comment"> *struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param head ListNode类 </span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        ListNode* newHead = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            ListNode* tmp = head-&gt;next;</span><br><span class="line">            head-&gt;next = newHead;</span><br><span class="line">            newHead = head;</span><br><span class="line">            head = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>扩展思维</strong></p><p>其实用<code>vector</code>容器顺序存放各个结点，然后出来的时候使用头插法新建链表也可以，这样分离结点的时候可能不太容易出错</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param head ListNode类</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        vector&lt;ListNode*&gt; vt;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="comment">//分离结点</span></span><br><span class="line">            ListNode* tmp = head-&gt;next;</span><br><span class="line">            head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            vt.<span class="built_in">push_back</span>(head);</span><br><span class="line">            head = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//新建链表</span></span><br><span class="line">        ListNode* res = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> node : vt) &#123;</span><br><span class="line">            node-&gt;next = res;</span><br><span class="line">            res = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同样也可以不使用<code>vector</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param head ListNode类</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* res = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            ListNode* tmp = head-&gt;next;</span><br><span class="line">            head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            ListNode* node = head;</span><br><span class="line"></span><br><span class="line">            node-&gt;next = res;</span><br><span class="line">            res = node;</span><br><span class="line"></span><br><span class="line">            head = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>tip：之前头插法一直记错了，如果头结点没有数据的话，可以使用下面的操作</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">node-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = node;</span><br></pre></td></tr></table></figure><p>但是如果头结点有值，就要用下列的插入</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">node-&gt;next = head；</span><br><span class="line">head = node;</span><br></pre></td></tr></table></figure><h2 id="解法3"><a href="#解法3" class="headerlink" title="解法3"></a>解法3</h2><p>原地反转，用三个指针逆置</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *int val;</span></span><br><span class="line"><span class="comment"> *struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param head ListNode类 </span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        ListNode* p = head-&gt;next, *pre = head;</span><br><span class="line">        pre-&gt;next = <span class="literal">nullptr</span>;<span class="comment">//第一个结点的next指针要预先处理，循环只能处理后面结点的next指针</span></span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            ListNode* tmp = p-&gt;next;</span><br><span class="line">            <span class="comment">//反转</span></span><br><span class="line">            p-&gt;next = pre;</span><br><span class="line"></span><br><span class="line">            pre = p;</span><br><span class="line">            p = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解法4"><a href="#解法4" class="headerlink" title="解法4"></a>解法4</h2><p>使用递归解决</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param head ListNode类</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* cur_next = head-&gt;next;</span><br><span class="line">        ListNode* newHead = <span class="built_in">ReverseList</span>(cur_next);</span><br><span class="line">        cur_next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;给定一个单链表的头结点&lt;code&gt;pHead&lt;/code&gt;(该头节点是有值的，比如在下图，它的&lt;code&gt;val&lt;/code&gt;是1)，长度为</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://ruvikm.gitee.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>JZ6 从尾到头打印链表</title>
    <link href="https://ruvikm.gitee.io/posts/2423e4d.html"/>
    <id>https://ruvikm.gitee.io/posts/2423e4d.html</id>
    <published>2023-11-15T12:15:13.000Z</published>
    <updated>2024-05-03T12:52:03.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>输入一个链表的头节点，按链表从尾到头的顺序返回每个节点的值（用数组返回）。</p><p>如输入{1,2,3}的链表如下图:</p><p><img src="https://z1.ax1x.com/2023/11/19/piUE8bR.png" alt="103D87B58E565E87DEFA9DD0B822C55F"></p><p>返回一个数组为[3,2,1]</p><p>0 &lt;= 链表长度 &lt;= 10000</p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,2,3&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[3,2,1]</span><br></pre></td></tr></table></figure><h2 id="算法思路1"><a href="#算法思路1" class="headerlink" title="算法思路1"></a>算法思路1</h2><p>主要考察翻转数组的操作，把链表的数据放到数组里，然后在数组里操作，一个比较简单的操作是调用C++的库函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; vt;</span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            vt.<span class="built_in">push_back</span>(p-&gt;val);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(vt.<span class="built_in">begin</span>(),vt.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> vt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="算法思路2"><a href="#算法思路2" class="headerlink" title="算法思路2"></a>算法思路2</h2><p>使用递归的方式解决，递归出口是链表循环到末尾，每次递归做的事就是把当前结点的值放到<code>vector</code>容器中，由于递归到末尾才会开始存放结点（<code>res.push_back(head-&gt;val);</code>）的值，时间顺序正好为从后往前的存放，符合题目要求的逆序</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  struct ListNode &#123;</span></span><br><span class="line"><span class="comment">*        int val;</span></span><br><span class="line"><span class="comment">*        struct ListNode *next;</span></span><br><span class="line"><span class="comment">*        ListNode(int x) :</span></span><br><span class="line"><span class="comment">*              val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">*        &#125;</span></span><br><span class="line"><span class="comment">*  &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(ListNode* head,vector&lt;<span class="type">int</span>&gt; &amp;res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="built_in">reverse</span>(head-&gt;next,res);</span><br><span class="line">            res.<span class="built_in">push_back</span>(head-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">reverse</span>(head,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;输入一个链表的头节点，按链表从尾到头的顺序返回每个节点的值（用数组返回）。&lt;/p&gt;
&lt;p&gt;如输入{1,2,3}的链表如下图:&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://ruvikm.gitee.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
