<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ruvikm</title>
  <icon>https://www.gravatar.com/avatar/710ecfc7f4f0bd22cb3d5ec44d498105</icon>
  <subtitle>Nia~</subtitle>
  <link href="https://ruvikm.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://ruvikm.gitee.io/"/>
  <updated>2024-06-26T13:11:53.314Z</updated>
  <id>https://ruvikm.gitee.io/</id>
  
  <author>
    <name>Ruvikm</name>
    <email>ruvikm@126.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式数据库期末复习</title>
    <link href="https://ruvikm.gitee.io/posts/ab78dc44.html"/>
    <id>https://ruvikm.gitee.io/posts/ab78dc44.html</id>
    <published>2024-06-24T14:12:57.000Z</published>
    <updated>2024-06-26T13:11:53.314Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6e8405721ef049ae460551d253fe78c4dbd00560acb8d98922123b1a9fb32950"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
    <category term="个人笔记" scheme="https://ruvikm.gitee.io/tags/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>在Centos7上安装Daikon</title>
    <link href="https://ruvikm.gitee.io/posts/6aa701de.html"/>
    <id>https://ruvikm.gitee.io/posts/6aa701de.html</id>
    <published>2024-05-11T14:12:12.000Z</published>
    <updated>2024-05-21T09:04:01.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Daikon简介"><a href="#Daikon简介" class="headerlink" title="Daikon简介"></a>Daikon简介</h2><p>来自官方的翻译</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Daikon 是动态检测可能不变量的一种实现;也就是说,Daikon不变量检测器会报告程序中可能存在的不变量。不变量是程序在某个点或某些点上所持有的性质;它们通常出现在断言语句、文档和形式规范中。不变量可用于程序理解和许多其他应用。例如:&#x27;x.field &gt; abs(y)&#x27;; &#x27;y = 2*x+3&#x27;; &#x27;数组 a 是有序的&#x27;; 对于所有列表对象 lst,&#x27;lst.next.prev = lst&#x27;; 对于所有树节点对象 n,&#x27;n.left.value &lt; n.right.value&#x27;; &#x27;p != null =&gt; p.content in myArray&#x27;;等等。</span><br></pre></td></tr></table></figure><p>这样的解释可能有点太晦涩，下面是省流版</p><p>Daikon是一个工具,它可以通过观察程序运行时的数据,自动发现一些潜在的规律或模式,我们把这些规律或模式称为不变量。比如说,你写了一个程序对一组数字从小到大排序。在排序之后,数组中的元素肯定是按升序排列的,即array[i] &lt;= array[i+1]。这就是一个不变量,无论输入数据是什么,只要排序成功,这个性质总是成立。再举一个例子,如果一个程序购物车的代码,不变量可能是”购物车不为空,则必须有商品被添加”。</p><p>Daikon可以自动分析程序运行轨迹,发现诸如”数组是排序的”、”购物车非空必有商品”这样的不变量规律,并将它们报告给程序员,供他们理解程序、检查错误或声明一些规范性的性质。</p><h2 id="安装Daikon"><a href="#安装Daikon" class="headerlink" title="安装Daikon"></a>安装Daikon</h2><h3 id="安装Daikon所需环境"><a href="#安装Daikon所需环境" class="headerlink" title="安装Daikon所需环境"></a><strong>安装Daikon所需环境</strong></h3><p>首先需要安装JDK，如果使用的是Centos 7自带的，则使用不了javac等命令，需要参考<a href="https://blog.csdn.net/four404/article/details/105597485">javac命令报错bash:javac:command not found</a>这篇博客进行修改</p><p>安装JDK可以参考<a href="https://blog.csdn.net/codedz/article/details/124044974">CentOS7 安装jdk8教程</a>这篇文章</p><h3 id="下载Daikon"><a href="#下载Daikon" class="headerlink" title="下载Daikon"></a><strong>下载Daikon</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找一个位置新建一个daikonparent文件夹，假设建立在home目录下</span></span><br><span class="line"><span class="built_in">mkdir</span> daikonparent</span><br><span class="line"><span class="comment"># 移动到daikonparent文件夹</span></span><br><span class="line"><span class="built_in">cd</span> daikonparent</span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget http://plse.cs.washington.edu/daikon/download/daikon-5.8.18.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">sudo tar zxf daikon-5.8.18.tar.gz</span><br></pre></td></tr></table></figure><p><strong>tips：如果下载太慢，如果是虚拟机的话可以用下载到本机上，利用<code>VMware Tools</code>之类的工具拷到虚拟机上（移动后一定检查文件完整不！！！这没弄好导致卡了我半天）。如果不是虚拟机，可以试试<a href="https://blog.csdn.net/qq_40430360/article/details/128670486">wget换源</a>的操作，如果还不行，最好使用magic了</strong></p><h3 id="配置Daikon"><a href="#配置Daikon" class="headerlink" title="配置Daikon"></a><strong>配置Daikon</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 转到用户根目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="comment"># 打开配置文件.bashrc</span></span><br><span class="line">sudo vim .bashrc</span><br></pre></td></tr></table></figure><p>然后在<code>.bashrc</code>文件最下面加入下面两句话（按下<code>I</code>键进入插入模式，在最下面粘贴完下面两句话后，按下<code>ESC</code>，然后输入<code>:wq</code>保存并退出）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 你自己的Daikon绝对路径，以刚刚建立在home下daikonparent文件夹的为例</span></span><br><span class="line"><span class="built_in">export</span> DAIKONDIR=daikonparent/daikon-5.8.18</span><br><span class="line"><span class="built_in">source</span> <span class="variable">$DAIKONDIR</span>/scripts/daikon.bashrc</span><br></pre></td></tr></table></figure><p>然后应用设定</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure><p>编译 Daikon 并构建其他工具</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装make工具</span></span><br><span class="line">sudo yum install make</span><br><span class="line"></span><br><span class="line">sudo make -C <span class="variable">$DAIKONDIR</span> rebuild-everything</span><br><span class="line">make -C <span class="variable">$DAIKONDIR</span> compile</span><br><span class="line">make -C <span class="variable">$DAIKONDIR</span> daikon.jar</span><br></pre></td></tr></table></figure><p>之后会编译一段时间就安装完成了，编译完成后是支持<code>Java</code>语言的</p><h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a><strong>验证安装</strong></h3><p>这里使用Daikon自带的测试用例</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入测试用例目录</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$DAIKONDIR</span>/examples/java-examples/QueueAr</span><br><span class="line"><span class="comment"># 编译Java文件</span></span><br><span class="line">sudo javac -g DataStructures/QueueArTester.java</span><br><span class="line"><span class="comment"># 对QueueArTester程序进行监控和追踪执行</span></span><br><span class="line">sudo java -<span class="built_in">cp</span> .:<span class="variable">$DAIKONDIR</span>/daikon.jar daikon.DynComp DataStructures.QueueArTester</span><br><span class="line"><span class="comment"># 运行QueueArTester程序，并生成一个声明文件，其中包含了程序中变量的类型信息等</span></span><br><span class="line">sudo java -<span class="built_in">cp</span> .:<span class="variable">$DAIKONDIR</span>/daikon.jar daikon.Chicory --daikon --comparability-file=QueueArTester.decls-DynComp DataStructures.QueueArTester</span><br><span class="line"><span class="comment"># 与第3条类似，仅仅运行程序并使用之前生成的声明文件</span></span><br><span class="line">sudo java -<span class="built_in">cp</span> .:<span class="variable">$DAIKONDIR</span>/daikon.jar daikon.Chicory --comparability-file=QueueArTester.decls-DynComp DataStructures.QueueArTester</span><br><span class="line"><span class="comment"># 运行Daikon不变量检测器,输入之前生成的追踪文件</span></span><br><span class="line">sudo java -<span class="built_in">cp</span> <span class="variable">$DAIKONDIR</span>/daikon.jar daikon.Daikon QueueArTester.dtrace.gz</span><br></pre></td></tr></table></figure><p>如果能生成<code>QueueArTester.dtrace.gz</code>文件，则说明安装成功，这里是仅支持Java的，如果想支持C++还需要安装<code>kvasir</code></p><p><img src="https://s21.ax1x.com/2024/05/11/pketf4f.png" alt="image-20240511230506582"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Daikon简介&quot;&gt;&lt;a href=&quot;#Daikon简介&quot; class=&quot;headerlink&quot; title=&quot;Daikon简介&quot;&gt;&lt;/a&gt;Daikon简介&lt;/h2&gt;&lt;p&gt;来自官方的翻译&lt;/p&gt;
&lt;figure class=&quot;highlight tex&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="个人笔记" scheme="https://ruvikm.gitee.io/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>研究生因公出国参加会议攻略——以内蒙古大学为例</title>
    <link href="https://ruvikm.gitee.io/posts/6831e4ad.html"/>
    <id>https://ruvikm.gitee.io/posts/6831e4ad.html</id>
    <published>2024-05-07T09:25:20.000Z</published>
    <updated>2024-05-14T08:29:12.916Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e2cd7bf3a14eca95b6db278fa39fc9bebd51d53ebac4ca4ae8009e11d3eabf4a">f666a1e82130d441cf5f17739ffab4075a317a77dcaf23bc89a4de7efe3e46fd4d2010f6e25f1abdb985a1f8a6a7a1c5b41b57df75c6da10eb8d70b80c6d74c5b18802e327487092ce886f17176aec3f3c8dabaa4b7bff29edc81bd98c0487ab74c5858d0fa3b8cf5ab84024ee7ddf048d9f3508ea22212a7deed7fa6c8ece57733fcd01adfb454e9ddcdabded800f20d2b59129ca15eb26842d30a40e08b461bbe7414e5f86ce88cfcf646db830f875337e37612ea4f85eca80afca5354db7d7c4c1da37febf35e7634a23586e50f41a66f329ff93b60129415d36b171be3d9c21d54f01e70dae1c67daa604cb5b63b73f16e66376af57e5d28cc157f960cecfb526a06153d06e58215dd4d27bd3c786a1f12ac31e791df5ce2e10fdc24759c29aa953ba1347f59c74b3926d250008790899d57bda207b241ba109a906b441a867b86e04cb1c5015285da0a7dbb25b45a3b682bbcda830661a3accbcd05165e7f712e2292eccbb630be1e96d370021ff1d1835b8af25989195f61c407dd39a50cd52eb46274426320ba0094ca9c4b879d4ea486f9ab5ce532e09fa468788de3f3f42db3ad88aa8e0258cefa2cfe991408bbcbdbf87d9de54a612bc8786078508a6e7cc4c16a255ba9e2b41a4ad1b1d28f4c6ae25ac7e63b1a7e5cd80040d419dcca6f81f32e4a3395e769b51f35d40e6025d7650dcf39e36a016d64c3dd00e1f34967e8d5e389b74eb2fb7ae7a8678e4ea9ae7f9fabad086f291cbad77ab96264aead0f2f66fdd8c33c21ed9d09d620bb6e4b7c0b861b8658a4970d03d28092fbc097425ef99de29cefd3dfe885ee74bcfa8c0f528e8241558d582bd4e84219b82303e44be5247f5b866fe08f196e0d61159fa1b2295d678852cd381c7da13df8bccfffc480e7b4b1c013f06aa0fe7a8a45cf250ff8180e917170833aa8e6693b93a38f59d623b3a3d92cec397035235dda4be11e9a0d8591a9fd410663cd44f019f3064b5a494b39a5e782b6ddde523ea9159d1ad2ca8687996f291c7c05f44dfda613827b23c5b4b8be5fcac8abae776c09efa05e6fd6db5f39f2fe0901dc67c799b6ddd3f76f34da8829573fe78cb3013b106a58c180d99feff69d54f7c738f204fe2c0b993a1d991029ca51c0cc6ea10ed1c7c691dee356150379591bda6cac48e8098049af6736a6add93cb5f6e5005525caf2ef9e16dd162fc6c84b9f1c9e6d540f276fefee335ec00653a0558f9bad4bf284c340db7e972b9b2beeb55304e284f99d6e42a25c55fac25720a0cbf0260b5ae2a7f48285a03562c42000462aa7e996c84016b7088d30a728b2968f5b7b43b35a69c95935f38f5b1148e8d1f3530dc15d8af0e9935f50bf5a30b93a2e65af19dbd09eb0fbb01d59c7f71469b1c70bf09e1ce34cafcd1206b63cad44eb026089ad1f8e8c104a6247a6e20a56cac0b3b3ff8446d88d21fd03aeb7f4161ebaa958e1fb9b4b8c21a88a7139e134d9ce3c545196ab591bf0ebd3984f7d19b25e4c4bd747113a9b33669a7f4b39a429e67e96fd2c479a3a149e7cb73d51eedf675731c75f83af67e8909f82fa8b0511fdd3e37257e4cb4aa00d3e804ddfba52d18d153975e2b7417f08bf5e215eb7648788a02cdcecab01ec2751be36dbd0c34d9cdb1f94b6a3bf469fe6befbf6467e3b0783098ac12eb4ef8ae53aeee2a65416088cd764ff8a1b097ae2742679716a81965e8a15be0c2ec960789be948334d263496abeffed47602f9e0ae5450575da30dc22526e831436aa1e42fde9efa7322598f09892a8e57fccfaa84b123eced5e6bc035ac06084a9bb5b65760b894ef8bb5c4f47ec9de2b383b6cf3860ebc8a91ef5fd479161a8781fffc4c7936eb8739753ab845017ba8efafc94ec65aa9f5cc2bfd6106c737c52b5acbff3e8a576699c4c5a97505d89a46a846478b919231c6f14ff6fd8304fb0bc06132630aa186b6e981d3934fe06a50a564a67ecc3ff8ea9d4bf7b7c32447c8df21a393e4b2c7d580c93b52190706db33f25707fc05a4a64ee5ff10710507e70bdb4606f986acbf3adf67dafbe33ddc18cc9c38c488dde9696725a4925acf5c20c2a6540d4fcdbf18b3c5387e2e997c91deea8e7394adeb03a8979b9a7cdee560e291032e8c624f1e5c598215e1f40155536b713d90db8ac8400058e2b8c8258733ca1a3bea73df7735df591ae8e79eb2eb27ba315000f0c096c6f882d09b94caefa647791f6bab4fb239626c1399fb44eb089a5b880e9da75bb770b8202df1aceaf2c5a2dc82dad86cf7f40a14fc7887a267ba306357360bf3417330812ff34fc1bb0c4de2d31946580da77efc7dd6d78b851415131256d2750cb37069dae35d7816bcd664d747bba91ccd2d84aa99560857a84e57bfe384a630ac3afd00a689a514d8b882862c3fef813c6e5fa2d5e0e4a38b36c9560d060e98d86c67c0d69eb2b16083ee008e82331cc6d1e404be7b23e1d5d52ae38da6b169378dcd934932c50e506544415af4cdcf2adbc5e2e1882a2767abe322d32a12e06aa36f02cd4b3bdf76e717df4c61c5798172896a2c4291b1fbcba7597ef3959be1dd492f034a4e330199791c81933d863136146d18ea029d0a944bd84be07abd944c2f1dd4b575446902276312665d64ab141ddebba9514e5f1caea8c1e25d6080ae753ec3cd7ced909378dab6d3ac9933544b49aeec896924e5f2322e248ddaa8d5fac1a2c209c74b18fccaac019a46396b36a74d020143772e4b07f3d750a46d8c308716f7b08f33364bcf47b74096bad57e2d7e3e7677b9a5ec678378fd5a3dc366df4c672ac09d9775e7ff2eeb5313d3958b005ea355007b0e8841263fb2d374d18995855ee2dd6ea967ce7b7f6de6c25be84945f752a040dd1054b59477340e9230c440310a348e0d2358b81e13d1ae7d8dd7fa5d8164bbc668a683cbde0cbb2ea963cd58bbf15d5df51155df9471b8cbc148b638d3baf1f8fc3472dba4b73859c81aaee71c6ae2b48f52b4153b515c4c1d0ef45c3f1dc38b259e5aa899d662acdde1450eb07cf4e9bedec158995f41884f54ce5706b88412873278518dff0073b441911bbd91f5f1abdc6d4574afdd21025dc70d5f29ec0311465412dfad70ef1f69354e5876b5a26ccee2b815e3791da801a44368e4cc911b527f57d1e75d2b9980d8dd497dfa7ab43a319127fb5333991a9e5241ec76144beb8ff8ec4fba6e935d138cf408938a5daf2493970d3ef7e2c6e355b0841f4eb4138a2ebd0de0310d56ed040f069c14693714af63e78558f846a0f0ec9d493d2abc6d0dc1d114665798ae920e3618babe9480e823390f8f71e845b8f07c9509e6f7434bd569f40c73d3350cfee4ef59a6f011af6feef3b1ec3942b14f7dad83d224a0594b895d069e0b104c7689a51e5e3b39f2ec16d89a3b2880d8718ee149a02b55a7a6e6781744e7e090069701edce94b53f16e0e782092a7a1019c4c3648fc111a40907f565f6176d018553a8a5dd29a86c03cf9e2a72a8470e8755273e03b2b9afc5b38cad40a88b9a6f43b3e54f3b75ae09a81589a6fe66a1ef0d761711298d6bbfc7cf1a252bbfda8efea7b87b9ced13b68864fba7867a261d94a2e5b4a8d8cece02f8424acd2e3c2d084d0c6059c311954196a4c474977edb8ddb8756fcdba4e1d087c31c92940408f3e3e9bd590e755ad36cb36db90e83fb2d76675f42d86345bce5c5aba5d1b969a4e8cdc659647d055a585da470efaefe71acdcbd1fb7baa7d606809089f9929c6afce7d56e65f28cccde7fb4c5d3eaceb3e42f690840da6a31c7a584f132deca20ca0b9865e9689b60327d3f6ea7c79750a28b255e225e21e33c11e8e38f7d9a4fb153a6b39c4a166830ae6878c829b2d46d5134f3337288ceaf7f24d200fc4e371e50bcc1ce681b35df5dd328d8059a1d07ff12db3d72d2b7c75523f3b536fe90025c2e25682a75816abf304eaa49be0b420326006b7f04c3da3d839a095417d13b9685b6507637929d0f5dad54902ed163baa72be1f0effcbc6dd5be0c00b49fb1fccd916de63c6813c48103a057607f549c064ba3e0c3307c6b78506d79dd81e4a820558c1efaca74b66aacca7aad6a17bca2cead389e4400f75cb93ffe873984cd7054b50e5ca40e1e7944dd6c5b8d62f9f995809afd58dff093657cbfb7c6f8568ea02ad3e5a325f2ad545791f39c671d7897ebd58317b0809357fd14ea71801087a27dc24264adff52e7037f71a4db36e0b9c7d60bb350ba5427d7cfcf4a5345fa7bd4bb3ce87287989f00f8a37167e1fa45971c6b79770ffac481bb0bffd3fe2d8cf0e5e2e4caad9afa6cc2052a026fc545ee824961f65cf42e9c7e590fd6f31d38e4d512ab4ad8d583c0c4c71c3276155c0adad2e8a584694c6ac29132a28571a03438b1e8a2354264d223456b5f92593f60be4dc8009c267dec56cf0814f21b4bb25191998c5efb5ff3f29b75d2f13edafe022916d06d5617cfe51a0c13afc2c9f306557668b3ba884fd33c3a2c95c9708e19c0955d98ceacf632dd26409f65d58c15e65f4ab7b0f945117376703af4ab4f973fffd6875b0849c11132045db741d8d88ea399b09536aba6b0ff9f27e1963f777c42e096215940895e8b94728ef6e751584bdd2f854c91ff272bafd237e803831088a737c0b2fadfa2d3644c518eb139bd8269075065e69797d4378e876ecaaebaaacf69351b46948c53bdfef90a72194cd0c6b1ecc2ec7541b49100eebbd60f5a12e7e1da2f7aec57adb0</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="个人笔记" scheme="https://ruvikm.gitee.io/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos 7常用操作记录</title>
    <link href="https://ruvikm.gitee.io/posts/4c414756.html"/>
    <id>https://ruvikm.gitee.io/posts/4c414756.html</id>
    <published>2024-05-03T11:08:37.000Z</published>
    <updated>2024-05-11T02:50:24.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h2><h3 id="搜索某一个进程-以进程Server为例"><a href="#搜索某一个进程-以进程Server为例" class="headerlink" title="搜索某一个进程(以进程Server为例)"></a>搜索某一个进程(以进程Server为例)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep 进程名 <span class="comment"># 根据进程名查看进程信息</span></span><br><span class="line"></span><br><span class="line">netstat -tunlp | grep 端口号 <span class="comment"># 根据端口查看对应进程，查看占用8080端口的进程id</span></span><br></pre></td></tr></table></figure><p>举例</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep Server</span><br><span class="line"></span><br><span class="line">netstat -tunlp | grep 8080</span><br></pre></td></tr></table></figure><h3 id="关闭进程"><a href="#关闭进程" class="headerlink" title="关闭进程"></a>关闭进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 端口号</span><br></pre></td></tr></table></figure><p>举例：例如要关闭端口号为8088的进程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 8088</span><br></pre></td></tr></table></figure><h2 id="防火墙相关"><a href="#防火墙相关" class="headerlink" title="防火墙相关"></a>防火墙相关</h2><h3 id="放行端口"><a href="#放行端口" class="headerlink" title="放行端口"></a>放行端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=4568/tcp --permanent   <span class="comment"># 开放4568端口</span></span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=public --remove-port=4567/tcp --permanent  <span class="comment">#关闭4567端口</span></span><br><span class="line"></span><br><span class="line">firewall-cmd --reload   <span class="comment"># 配置立即生效</span></span><br></pre></td></tr></table></figure><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>查看当前命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;进程相关&quot;&gt;&lt;a href=&quot;#进程相关&quot; class=&quot;headerlink&quot; title=&quot;进程相关&quot;&gt;&lt;/a&gt;进程相关&lt;/h2&gt;&lt;h3 id=&quot;搜索某一个进程-以进程Server为例&quot;&gt;&lt;a href=&quot;#搜索某一个进程-以进程Server为例&quot; class</summary>
      
    
    
    
    <category term="个人笔记" scheme="https://ruvikm.gitee.io/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>客户端升级封装EasyTcpClient，同时与多个服务端进行网络通信</title>
    <link href="https://ruvikm.gitee.io/posts/56591828.html"/>
    <id>https://ruvikm.gitee.io/posts/56591828.html</id>
    <published>2024-04-28T14:54:33.000Z</published>
    <updated>2024-05-03T12:52:04.002Z</updated>
    
    <content type="html"><![CDATA[<p>封装客户端操作<code>EasyTcpClient.hpp</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> EasyTcpClient.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EasyTcpClient.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  <span class="comment">//uni std</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCKET int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INVALID_SOCKET  (SOCKET)(~0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCKET_ERROR            (-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MessageHeader.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span><span class="comment">//C++标准线程库</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EasyTcpClient</span></span><br><span class="line">&#123;</span><br><span class="line">SOCKET _sock;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">EasyTcpClient</span>() &#123;</span><br><span class="line">_sock = INVALID_SOCKET;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//虚构析函数</span></span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">EasyTcpClient</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化Socket</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//启动Win Socket 2.x环境</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA dat;</span><br><span class="line"><span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line"><span class="comment">// 1 建立一个socket</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsRun</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt; 关闭旧连接...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">Close</span>();</span><br><span class="line">&#125;</span><br><span class="line">_sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">IsRun</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;建立Socket失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;建立Socket成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接服务器</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* ip, <span class="type">unsigned</span> <span class="type">short</span> port)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">IsRun</span>()) &#123;</span><br><span class="line"><span class="built_in">InitSocket</span>();</span><br><span class="line">&#125;</span><br><span class="line">sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">_sin.sin_family = AF_INET;</span><br><span class="line">_sin.sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">_sin.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(ip);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">_sin.sin_addr.s_addr = <span class="built_in">inet_addr</span>(ip);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt; 正在连接服务器&lt;port:&quot;</span> &lt;&lt; port &lt;&lt; <span class="string">&quot;&gt;...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span>  ret = <span class="built_in">connect</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(sockaddr_in));</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == ret) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt; 连接服务器&lt;port:&quot;</span> &lt;&lt; port &lt;&lt; <span class="string">&quot;&gt;失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt; 连接服务器&lt;port:&quot;</span> &lt;&lt; port &lt;&lt; <span class="string">&quot;&gt;成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭套接字closesocket</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsRun</span>()) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="built_in">closesocket</span>(_sock);</span><br><span class="line"><span class="comment">// 清除windows socket环境</span></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="built_in">close</span>(_sock);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line">_sock = INVALID_SOCKET;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//相应网络请求</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnNetMsg</span><span class="params">(DataHeader* header)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (header-&gt;cmd) &#123;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGIN_RESULT: &#123;</span><br><span class="line"></span><br><span class="line">LoginResult* login = (LoginResult*)header;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;收到服务端消息：CMD_LOGIN_RESULT, 数据长度：&quot;</span> &lt;&lt; login-&gt;dataLength &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGOUT_RESULT: &#123;</span><br><span class="line">LogoutResult* logout = (LogoutResult*)header;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;收到服务端消息：CMD_LOGOUT_RESULT, 数据长度：&quot;</span> &lt;&lt; logout-&gt;dataLength &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_NEW_USER_JOIN: &#123;</span><br><span class="line">NewUserJoin* userJoin = (NewUserJoin*)header;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;收到服务端消息：CMD_LOGOUT_RESULT, 数据长度：&quot;</span> &lt;&lt; userJoin-&gt;dataLength &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接受数据 处理粘包 拆分包</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RecvData</span><span class="params">(SOCKET _cSock)</span> </span>&#123;</span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="type">char</span> szRecv[<span class="number">4096</span>] = &#123;&#125;;</span><br><span class="line"><span class="comment">// 5 接收客户端数据</span></span><br><span class="line"><span class="type">int</span> nLen = <span class="built_in">recv</span>(_cSock, szRecv, <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">DataHeader* header = (DataHeader*)szRecv;</span><br><span class="line"><span class="keyword">if</span> (nLen &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;与服务器断开连接，任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line"><span class="built_in">OnNetMsg</span>(header);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询网络数据</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">OnRun</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsRun</span>()) &#123;</span><br><span class="line">fd_set fdReads;</span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdReads);</span><br><span class="line"><span class="built_in">FD_SET</span>(_sock, &amp;fdReads);</span><br><span class="line">timeval t = &#123; <span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">select</span>(_sock + <span class="number">1</span>, &amp;fdReads, <span class="number">0</span>, <span class="number">0</span>, &amp;t);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;select任务结束1...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">Close</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(_sock, &amp;fdReads)) &#123;</span><br><span class="line"><span class="built_in">FD_CLR</span>(_sock, &amp;fdReads);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == <span class="built_in">RecvData</span>(_sock)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;select任务结束2...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">Close</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否在工作</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsRun</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _sock != INVALID_SOCKET;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送数据</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SendData</span><span class="params">(DataHeader* header)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">IsRun</span>() &amp;&amp; header)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">send</span>(_sock, (<span class="type">const</span> <span class="type">char</span>*)header, header-&gt;dataLength, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> SOCKET_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>封装消息头<code>MessageHeader.hpp</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _MessageHeader.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _MessageHeader.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _MessageHeader.hpp</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region 结构体定义</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CMD</span> &#123;</span><br><span class="line">CMD_LOGIN,</span><br><span class="line">CMD_LOGOUT,</span><br><span class="line">CMD_ERROR,</span><br><span class="line">CMD_LOGIN_RESULT,</span><br><span class="line">CMD_LOGOUT_RESULT,</span><br><span class="line">CMD_NEW_USER_JOIN</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataHeader</span> &#123;</span><br><span class="line"><span class="type">short</span> dataLength;</span><br><span class="line"><span class="type">short</span> cmd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Login</span> : <span class="keyword">public</span> DataHeader &#123;<span class="comment">//DataPackage</span></span><br><span class="line"><span class="built_in">Login</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Login);</span><br><span class="line">cmd = CMD_LOGIN;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line"><span class="type">char</span> PassWord[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoginResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LoginResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LoginResult);</span><br><span class="line">cmd = CMD_LOGIN_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Logout</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">Logout</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Logout);</span><br><span class="line">cmd = CMD_LOGOUT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LogoutResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LogoutResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LogoutResult);</span><br><span class="line">cmd = CMD_LOGOUT_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NewUserJoin</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">NewUserJoin</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(NewUserJoin);</span><br><span class="line">cmd = CMD_NEW_USER_JOIN;</span><br><span class="line">sock = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sock;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataPackage</span> &#123;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br></pre></td></tr></table></figure><p>重构客户端代码<code>Client.cpp</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">﻿<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;EasyTcpClient.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cmdThread</span><span class="params">(EasyTcpClient *client)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="type">char</span> cmdBuf[<span class="number">256</span>] = &#123;&#125;;</span><br><span class="line">cin &gt;&gt; cmdBuf;</span><br><span class="line"><span class="comment">/*cout &lt;&lt; cmdBuf &lt;&lt; endl;*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(cmdBuf, <span class="string">&quot;exit&quot;</span>)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;退出cmdThread线程&quot;</span> &lt;&lt; endl;</span><br><span class="line">client-&gt;<span class="built_in">Close</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(cmdBuf, <span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">Login login;</span><br><span class="line"><span class="built_in">strcpy</span>(login.userName, <span class="string">&quot;lyd&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(login.PassWord, <span class="string">&quot;lydmm&quot;</span>);</span><br><span class="line">client-&gt;<span class="built_in">SendData</span>(&amp;login);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(cmdBuf, <span class="string">&quot;logout&quot;</span>)) &#123;</span><br><span class="line">Logout logout;</span><br><span class="line"><span class="built_in">strcpy</span>(logout.userName, <span class="string">&quot;lyd&quot;</span>);</span><br><span class="line">client-&gt;<span class="built_in">SendData</span>(&amp;logout);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;不支持的命令...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> Local_ip[] = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> Local_port = <span class="number">4568</span>;</span><br><span class="line">EasyTcpClient client;</span><br><span class="line">client.<span class="built_in">Connect</span>(Local_ip, Local_port);</span><br><span class="line"><span class="function">thread <span class="title">t1</span><span class="params">(cmdThread, &amp;client)</span></span>;</span><br><span class="line">t1.<span class="built_in">detach</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> Centos_ip[] = <span class="string">&quot;192.168.88.130&quot;</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> Centos_port = <span class="number">4567</span>;</span><br><span class="line">EasyTcpClient client2;</span><br><span class="line">client2.<span class="built_in">Connect</span>(Centos_ip, Centos_port);</span><br><span class="line"><span class="function">thread <span class="title">t2</span><span class="params">(cmdThread, &amp;client2)</span></span>;</span><br><span class="line">t2.<span class="built_in">detach</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动UI线程</span></span><br><span class="line"><span class="keyword">while</span> (client.<span class="built_in">IsRun</span>() || client2.<span class="built_in">IsRun</span>()) &#123;</span><br><span class="line">client.<span class="built_in">OnRun</span>();</span><br><span class="line">client2.<span class="built_in">OnRun</span>();</span><br><span class="line">&#125;</span><br><span class="line">client.<span class="built_in">Close</span>();</span><br><span class="line">client2.<span class="built_in">Close</span>();</span><br><span class="line"><span class="comment">//保留界面</span></span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2024/04/28/pkibI00.png" alt="image-20240428230519330"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;封装客户端操作&lt;code&gt;EasyTcpClient.hpp&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ruvikm.gitee.io/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="C++socket项目" scheme="https://ruvikm.gitee.io/tags/C-socket%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>备战2026校招</title>
    <link href="https://ruvikm.gitee.io/posts/4bf9d947.html"/>
    <id>https://ruvikm.gitee.io/posts/4bf9d947.html</id>
    <published>2024-04-27T09:13:38.000Z</published>
    <updated>2024-05-03T12:52:03.995Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3b9793d73b82b290e20f8c248d726f96aad294091a8caf910dae698177693778"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="人生规划" scheme="https://ruvikm.gitee.io/categories/%E4%BA%BA%E7%94%9F%E8%A7%84%E5%88%92/"/>
    
    
  </entry>
  
  <entry>
    <title>实习规划</title>
    <link href="https://ruvikm.gitee.io/posts/261b5ce3.html"/>
    <id>https://ruvikm.gitee.io/posts/261b5ce3.html</id>
    <published>2024-04-27T08:57:02.000Z</published>
    <updated>2024-05-03T12:52:04.002Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6c3c453af3bdd54753d6502ff1a75d5bcb20a0fbd4fd2f9883eacea165c02326"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="人生规划" scheme="https://ruvikm.gitee.io/categories/%E4%BA%BA%E7%94%9F%E8%A7%84%E5%88%92/"/>
    
    
  </entry>
  
  <entry>
    <title>学校GPU平台使用教程(优化版)</title>
    <link href="https://ruvikm.gitee.io/posts/72bb20cc.html"/>
    <id>https://ruvikm.gitee.io/posts/72bb20cc.html</id>
    <published>2024-04-01T11:10:22.000Z</published>
    <updated>2024-05-03T12:52:03.999Z</updated>
    
    <content type="html"><![CDATA[<p>首先连接内网登录<a href="http://paas.183-175-12-11.nip.io:30080/">平台</a></p><p>一般使用的话，直接找到<code>开发环境</code>一栏，创建环境。然后通过<code>Pycharm</code>中的<code>ssh</code>连接</p><p><img src="https://s1.ax1x.com/2023/08/28/pPaw2X6.png" alt="屏幕截图 2023-08-28 221321"></p><p>在<code>Pycharm</code>中，找到工具—部署—配置</p><p><img src="https://s1.ax1x.com/2023/08/28/pPad5zq.png" alt="image-20230828220300678"></p><p>点击<code>+</code>后选择<code>SFTP</code></p><p><img src="https://s1.ax1x.com/2023/08/28/pPaw5Ae.png" alt="屏幕截图 2023-08-28 221526"></p><p>在<code>SSH配置</code>那里后点击后面<code>...</code></p><p><img src="https://s1.ax1x.com/2023/08/28/pPawbct.png" alt="屏幕截图 2023-08-28 092517"></p><p>进入后填写主机名和用户名，这里详细讲一下</p><p>例如平台给的ssh连接是</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">ssh://root@paas.xxx-xxx-xx-xx.nip.io:xxxxx</span><br></pre></td></tr></table></figure><p>这里用户名就需要填写</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root</span><br></pre></td></tr></table></figure><p>主机名填写</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">paas.xxx-xxx-xx-xx.nip.io</span><br></pre></td></tr></table></figure><p>端口号填写<code>xxxxx</code></p><p>然后填写创建环境时设置的密码</p><p><img src="https://s1.ax1x.com/2023/08/28/pPawjHS.png" alt="屏幕截图 2023-08-28 092917"></p><p>这一步完事以后，点击确定，返回到之前的页面，点击<code>映射</code></p><p><img src="https://s1.ax1x.com/2023/08/30/pPd7RaD.png" alt="屏幕截图 2023-08-30 145658"></p><p>配置好本机的地址和远程的地址，点击确认</p><p><img src="https://s1.ax1x.com/2023/08/30/pPd7LdS.png" alt="image-20230830145937224"></p><p>之后选择工具—部署—选项</p><p><img src="https://s1.ax1x.com/2023/08/30/pPdHIkF.png" alt="QQ截图20230830150656"></p><p>可以根据自己习惯决定是否配置一下</p><p>之后就可以用Pycharm作为修改代码和文件传输的工具了</p><p>由于Pycharm自带的终端个人认为并不好用，所以可以使用Xshell软件使用终端操作，Xshell的配置同上</p><p><img src="https://s21.ax1x.com/2024/04/01/pF7gw01.png" alt></p><p>由于已经在里面安装了Anaconda，所以每次跑一个项目的时候新建一个虚拟环境即可</p><h3 id="切换环境"><a href="#切换环境" class="headerlink" title="切换环境"></a>切换环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate cu118py310</span><br></pre></td></tr></table></figure><h3 id="查看并删除环境"><a href="#查看并删除环境" class="headerlink" title="查看并删除环境"></a>查看并删除环境</h3><h4 id="查看环境列表"><a href="#查看环境列表" class="headerlink" title="查看环境列表"></a>查看环境列表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda info --<span class="built_in">env</span></span><br></pre></td></tr></table></figure><h4 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda remove -n 环境名 --all</span><br><span class="line"></span><br><span class="line">eg:conda remove -n code --all</span><br></pre></td></tr></table></figure><h3 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n 环境名 python=版本号</span><br><span class="line"></span><br><span class="line">eg:conda create -n ChineseBERT python=3.8</span><br></pre></td></tr></table></figure><h3 id="退出当前环境"><a href="#退出当前环境" class="headerlink" title="退出当前环境"></a>退出当前环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate base</span><br></pre></td></tr></table></figure><h3 id="查看当前环境已安装的包"><a href="#查看当前环境已安装的包" class="headerlink" title="查看当前环境已安装的包"></a>查看当前环境已安装的包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先连接内网登录&lt;a href=&quot;http://paas.183-175-12-11.nip.io:30080/&quot;&gt;平台&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一般使用的话，直接找到&lt;code&gt;开发环境&lt;/code&gt;一栏，创建环境。然后通过&lt;code&gt;Pycharm&lt;/code&gt;中的&lt;co</summary>
      
    
    
    
    <category term="个人笔记" scheme="https://ruvikm.gitee.io/categories/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>客户端服务端跨平台移植，并添加线程</title>
    <link href="https://ruvikm.gitee.io/posts/7cdb8e03.html"/>
    <id>https://ruvikm.gitee.io/posts/7cdb8e03.html</id>
    <published>2024-03-31T12:14:57.000Z</published>
    <updated>2024-05-03T12:52:04.003Z</updated>
    
    <content type="html"><![CDATA[<p>客户端代码：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  <span class="comment">//uni std</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCKET int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INVALID_SOCKET  (SOCKET)(~0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCKET_ERROR            (-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span><span class="comment">//C++标准线程库</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> g_bRun = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region 结构体定义</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CMD</span> &#123;</span><br><span class="line">CMD_LOGIN,</span><br><span class="line">CMD_LOGOUT,</span><br><span class="line">CMD_ERROR,</span><br><span class="line">CMD_LOGIN_RESULT,</span><br><span class="line">CMD_LOGOUT_RESULT,</span><br><span class="line">CMD_NEW_USER_JOIN</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataHeader</span> &#123;</span><br><span class="line"><span class="type">short</span> dataLength;</span><br><span class="line"><span class="type">short</span> cmd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Login</span> : <span class="keyword">public</span> DataHeader &#123;<span class="comment">//DataPackage</span></span><br><span class="line"><span class="built_in">Login</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Login);</span><br><span class="line">cmd = CMD_LOGIN;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line"><span class="type">char</span> PassWord[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoginResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LoginResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LoginResult);</span><br><span class="line">cmd = CMD_LOGIN_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Logout</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">Logout</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Logout);</span><br><span class="line">cmd = CMD_LOGOUT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LogoutResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LogoutResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LogoutResult);</span><br><span class="line">cmd = CMD_LOGOUT_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NewUserJoin</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">NewUserJoin</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(NewUserJoin);</span><br><span class="line">cmd = CMD_NEW_USER_JOIN;</span><br><span class="line">sock = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sock;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataPackage</span> &#123;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">processor</span><span class="params">(SOCKET _cSock)</span> </span>&#123;</span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="type">char</span> szRecv[<span class="number">4096</span>] = &#123;&#125;;</span><br><span class="line"><span class="comment">// 5 接收客户端数据</span></span><br><span class="line"><span class="type">int</span> nLen = <span class="built_in">recv</span>(_cSock, szRecv, <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">DataHeader* header = (DataHeader*)szRecv;</span><br><span class="line"><span class="keyword">if</span> (nLen &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;与服务器断开连接，任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (header-&gt;cmd) &#123;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGIN_RESULT: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">LoginResult* login = (LoginResult*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到服务端消息：CMD_LOGIN_RESULT, 数据长度：&quot;</span> &lt;&lt; login-&gt;dataLength &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGOUT_RESULT: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">LogoutResult* logout = (LogoutResult*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到服务端消息：CMD_LOGOUT_RESULT, 数据长度：&quot;</span> &lt;&lt; logout-&gt;dataLength &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_NEW_USER_JOIN: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">NewUserJoin* userJoin = (NewUserJoin*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到服务端消息：CMD_LOGOUT_RESULT, 数据长度：&quot;</span> &lt;&lt; userJoin-&gt;dataLength &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cmdThread</span><span class="params">(SOCKET sock)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="type">char</span> cmdBuf[<span class="number">256</span>] = &#123;&#125;;</span><br><span class="line">cin &gt;&gt; cmdBuf;</span><br><span class="line"><span class="comment">/*cout &lt;&lt; cmdBuf &lt;&lt; endl;*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(cmdBuf, <span class="string">&quot;exit&quot;</span>)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;退出cmdThread线程&quot;</span> &lt;&lt; endl;</span><br><span class="line">g_bRun = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(cmdBuf, <span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">Login login;</span><br><span class="line"><span class="built_in">strcpy</span>(login.userName, <span class="string">&quot;lyd&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(login.PassWord, <span class="string">&quot;lydmm&quot;</span>);</span><br><span class="line"><span class="built_in">send</span>(sock, (<span class="type">const</span> <span class="type">char</span>*)&amp;login, <span class="built_in">sizeof</span>(Login), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(cmdBuf, <span class="string">&quot;logout&quot;</span>)) &#123;</span><br><span class="line">Logout logout;</span><br><span class="line"><span class="built_in">strcpy</span>(logout.userName, <span class="string">&quot;lyd&quot;</span>);</span><br><span class="line"><span class="built_in">send</span>(sock, (<span class="type">const</span> <span class="type">char</span>*)&amp;logout, <span class="built_in">sizeof</span>(Logout), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;不支持的命令...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="comment">//启动Windows socket 2.x环境</span></span><br><span class="line">WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA dat;</span><br><span class="line"><span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line"><span class="comment">// 用Socket API 建立一个简易的TCP服务端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 建立一个socket</span></span><br><span class="line">SOCKET _sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == _sock) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;建立Socket失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;建立Socket成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 连接服务器 connect</span></span><br><span class="line">sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">_sin.sin_family = AF_INET;</span><br><span class="line">_sin.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="comment">/*_sin.sin_addr.S_un.S_addr = inet_addr(&quot;192.168.88.130&quot;);*/</span></span><br><span class="line">_sin.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">_sin.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;192.168.88.130&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//_sin.sin_addr.S_un.S_addr = inet_addr(&quot;127.0.0.1&quot;);</span></span><br><span class="line"><span class="type">int</span>  ret = <span class="built_in">connect</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(sockaddr_in));</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == ret) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;连接服务器失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;连接服务器成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 启动线程</span></span><br><span class="line"><span class="function">thread <span class="title">t1</span><span class="params">(cmdThread, _sock)</span></span>;</span><br><span class="line">t1.<span class="built_in">detach</span>();</span><br><span class="line"><span class="keyword">while</span> (g_bRun) &#123;</span><br><span class="line"></span><br><span class="line">fd_set fdReads;</span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdReads);</span><br><span class="line"><span class="built_in">FD_SET</span>(_sock, &amp;fdReads);</span><br><span class="line">timeval t = &#123; <span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">select</span>(_sock + <span class="number">1</span>, &amp;fdReads, <span class="number">0</span>, <span class="number">0</span>, &amp;t);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;select任务结束&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(_sock, &amp;fdReads)) &#123;</span><br><span class="line"><span class="built_in">FD_CLR</span>(_sock, &amp;fdReads);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == <span class="built_in">processor</span>(_sock)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;select任务结束2...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线程thread</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;空闲时间处理其他业务 ...&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//仅仅适用于Windows</span></span><br><span class="line"><span class="comment">// Sleep(1000);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="comment">// 7 关闭套接字closesocket</span></span><br><span class="line"><span class="built_in">closesocket</span>(_sock);</span><br><span class="line"><span class="comment">// 8 清除windows socket环境</span></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="built_in">close</span>(_sock);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;客户端已退出,任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//保留界面</span></span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端代码：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  <span class="comment">//uni std</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCKET int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INVALID_SOCKET  (SOCKET)(~0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCKET_ERROR            (-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span><span class="comment">//C++标准线程库</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region 结构体定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CMD</span> &#123;</span><br><span class="line">CMD_LOGIN,</span><br><span class="line">CMD_LOGOUT,</span><br><span class="line">CMD_ERROR,</span><br><span class="line">CMD_LOGIN_RESULT,</span><br><span class="line">CMD_LOGOUT_RESULT,</span><br><span class="line">CMD_NEW_USER_JOIN</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataHeader</span> &#123;</span><br><span class="line"><span class="type">short</span> dataLength;</span><br><span class="line"><span class="type">short</span> cmd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Login</span> : <span class="keyword">public</span> DataHeader &#123;<span class="comment">//DataPackage</span></span><br><span class="line"><span class="built_in">Login</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Login);</span><br><span class="line">cmd = CMD_LOGIN;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line"><span class="type">char</span> PassWord[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoginResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LoginResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LoginResult);</span><br><span class="line">cmd = CMD_LOGIN_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Logout</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">Logout</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Logout);</span><br><span class="line">cmd = CMD_LOGOUT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LogoutResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LogoutResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LogoutResult);</span><br><span class="line">cmd = CMD_LOGOUT_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NewUserJoin</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">NewUserJoin</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(NewUserJoin);</span><br><span class="line">cmd = CMD_NEW_USER_JOIN;</span><br><span class="line">sock = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sock;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataPackage</span> &#123;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;SOCKET&gt; g_clients;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">processor</span><span class="params">(SOCKET _cSock)</span> </span>&#123;</span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="type">char</span> szRecv[<span class="number">4096</span>] = &#123;&#125;;</span><br><span class="line"><span class="comment">// 5 接收客户端数据</span></span><br><span class="line"><span class="type">int</span> nLen = (<span class="type">int</span>)<span class="built_in">recv</span>(_cSock, szRecv, <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">DataHeader* header = (DataHeader*)szRecv;</span><br><span class="line"><span class="keyword">if</span> (nLen &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;客户端&lt; socket = &quot;</span> &lt;&lt; _cSock &lt;&lt; <span class="string">&quot; &gt;已退出，任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (header-&gt;cmd) &#123;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGIN: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">Login* login = (Login*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到客户端&lt;Socket = &quot;</span> &lt;&lt; _cSock &lt;&lt; <span class="string">&quot;&gt;请求：CMD_LOGIN, 数据长度：&quot;</span> &lt;&lt; login-&gt;dataLength &lt;&lt; <span class="string">&quot; ,userName =  &quot;</span> &lt;&lt; login-&gt;userName &lt;&lt; <span class="string">&quot; PassWord = &quot;</span> &lt;&lt; login-&gt;PassWord &lt;&lt; endl;</span><br><span class="line"><span class="comment">//忽略判断用户密码是否正确</span></span><br><span class="line">LoginResult ret;</span><br><span class="line"><span class="built_in">send</span>(_cSock, (<span class="type">char</span>*)&amp;ret, <span class="built_in">sizeof</span>(LoginResult), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGOUT: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">Logout* logout = (Logout*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到客户端&lt;Socket = &quot;</span> &lt;&lt; _cSock &lt;&lt; <span class="string">&quot;&gt;请求：CMD_LOGOUT, 数据长度：&quot;</span> &lt;&lt; logout-&gt;dataLength &lt;&lt; <span class="string">&quot; ,userName =  &quot;</span> &lt;&lt; logout-&gt;userName &lt;&lt; endl;</span><br><span class="line"><span class="comment">//忽略判断用户密码是否正确</span></span><br><span class="line">LogoutResult ret;</span><br><span class="line"><span class="built_in">send</span>(_cSock, (<span class="type">char</span>*)&amp;ret, <span class="built_in">sizeof</span>(ret), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line">DataHeader header = &#123; <span class="number">0</span>,CMD_ERROR &#125;;</span><br><span class="line"><span class="built_in">send</span>(_cSock, (<span class="type">char</span>*)&amp;header, <span class="built_in">sizeof</span>(header), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="comment">//启动Windows socket 2.x环境</span></span><br><span class="line">WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA dat;</span><br><span class="line"><span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line"><span class="comment">// 用Socket API 建立一个简易的TCP服务端 1 建立一个socket 套接字</span></span><br><span class="line">SOCKET _sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="comment">// 2 bind 绑定用于接受客户端连接的网络接口</span></span><br><span class="line">sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">_sin.sin_family = AF_INET;</span><br><span class="line">_sin.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);<span class="comment">// host to net unsigned short</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">_sin.sin_addr.S_un.S_addr = INADDR_ANY;<span class="comment">//inet_addr(&quot;127.0.0.1&quot;);</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">_sin.sin_addr.s_addr = INADDR_ANY;<span class="comment">//inet_addr(&quot;127.0.0.1&quot;);</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bind</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(_sin)) == SOCKET_ERROR) &#123;</span><br><span class="line"><span class="comment">//绑定错误</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;绑定网络端口失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;绑定网络端口成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3 listen 监听网络端口</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">listen</span>(_sock, <span class="number">5</span>)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;监听网络端口失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;监听网络端口成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">// 伯克利套接字 BSD socket</span></span><br><span class="line">fd_set fdRead; <span class="comment">//描述符(Socket) 集合</span></span><br><span class="line">fd_set fdWrite;</span><br><span class="line">fd_set fdExp;</span><br><span class="line"><span class="comment">//清理集合</span></span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdRead);</span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdWrite);</span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdExp);</span><br><span class="line"><span class="comment">//将描述符(socket)加入集合</span></span><br><span class="line"><span class="built_in">FD_SET</span>(_sock, &amp;fdRead);</span><br><span class="line"><span class="built_in">FD_SET</span>(_sock, &amp;fdWrite);</span><br><span class="line"><span class="built_in">FD_SET</span>(_sock, &amp;fdExp);</span><br><span class="line">SOCKET maxSock = _sock;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line"><span class="built_in">FD_SET</span>(g_clients[n], &amp;fdRead);</span><br><span class="line"><span class="keyword">if</span> (maxSock &lt; g_clients[n]) &#123;</span><br><span class="line">maxSock = g_clients[n];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//nfds 是一个整数值，是指fd_set集合中所有描述符(socket)的范围，而不是数量</span></span><br><span class="line"><span class="comment">//既是所有文件描述符最大值+1，在Windows中这个参数可以写0</span></span><br><span class="line">timeval t = &#123; <span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span>  ret = <span class="built_in">select</span>(maxSock + <span class="number">1</span>, &amp;fdRead, &amp;fdWrite, &amp;fdExp, &amp;t);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;select任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断描述符(socket)是否在集合中</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(_sock, &amp;fdRead)) &#123;</span><br><span class="line"><span class="built_in">FD_CLR</span>(_sock, &amp;fdRead);</span><br><span class="line"><span class="comment">//4 accept 等待接受客户端连接</span></span><br><span class="line">sockaddr_in clientAddr = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> nAddrLen = <span class="built_in">sizeof</span>(sockaddr_in);</span><br><span class="line">SOCKET _cSock = INVALID_SOCKET;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">_cSock = <span class="built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, &amp;nAddrLen);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">_cSock = <span class="built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, (<span class="type">socklen_t</span>*)&amp;nAddrLen);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line"><span class="keyword">if</span> (_cSock == INVALID_SOCKET) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;接受到无效客户端SOCKET...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 新客户端加入，群发</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line">NewUserJoin userJoin;</span><br><span class="line"><span class="built_in">send</span>(g_clients[n], (<span class="type">const</span> <span class="type">char</span>*)&amp;userJoin, <span class="built_in">sizeof</span>(NewUserJoin), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">g_clients.<span class="built_in">push_back</span>(_cSock);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;新客户端加入：socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_cSock &lt;&lt; <span class="string">&quot;, IP = &quot;</span> &lt;&lt; <span class="built_in">inet_ntoa</span>(clientAddr.sin_addr) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(g_clients[n], &amp;fdRead)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">processor</span>(g_clients[n]) == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">auto</span> iter = g_clients.<span class="built_in">begin</span>() + n; <span class="comment">//std::vector&lt;SOCKET&gt;::iterator</span></span><br><span class="line"><span class="keyword">if</span> (iter != g_clients.<span class="built_in">end</span>()) &#123;</span><br><span class="line">g_clients.<span class="built_in">erase</span>(iter);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;空闲时间处理其他业务 ...&quot; &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line"><span class="built_in">closesocket</span>(g_clients[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6 关闭套接字closesocket</span></span><br><span class="line"><span class="comment">//7 清除windows socket环境</span></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line"><span class="built_in">close</span>(g_clients[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;服务器已退出,任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//保留界面</span></span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2024/04/01/pF72K3D.png" alt="image-20240331210407460"></p><p><img src="https://s21.ax1x.com/2024/04/01/pF72QjH.png" alt="Screenshot 2024-03-31 204407"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;客户端代码：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ruvikm.gitee.io/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="C++socket项目" scheme="https://ruvikm.gitee.io/tags/C-socket%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>复现KnowLog模型</title>
    <link href="https://ruvikm.gitee.io/posts/2a42dcdb.html"/>
    <id>https://ruvikm.gitee.io/posts/2a42dcdb.html</id>
    <published>2024-03-31T01:52:08.000Z</published>
    <updated>2024-05-03T12:52:03.996Z</updated>
    
    <content type="html"><![CDATA[<p>这次要复现的一个项目是<strong><a href="https://github.com/LeaperOvO/KnowLog">KnowLog</a></strong>，首先创建一个虚拟环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create KnowLog -n python=3.8</span><br><span class="line">conda activate KnowLog</span><br></pre></td></tr></table></figure><p>然后来到项目的根目录，安装项目所需的环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>之后尝试运行训练的部分</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python KnowLog_pretrain.py --pretrain_data ./datasets/pre-train/all_log.json --abbr ./datasets/pre-train/abbr.json --base_model bert-base-uncased</span><br></pre></td></tr></table></figure><p>毫无意外的会出报错，提示少了什么包，这时候提示缺什么用pip安装即可</p><p>再安装完这些包之后，再次尝试训练，出现了下面这个错</p><p><img src="https://s21.ax1x.com/2024/03/31/pF7ZiLT.png" alt="image-20240331100215828"></p><p>查了一下是python关于SSLError的错误，尝试降级版本解决</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install urllib3==1.25.11</span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2024/03/31/pF7ZkeU.png" alt="image-20240331101640666"></p><p>成功解决问题，开启魔法可以正常下载了</p><p><img src="https://s21.ax1x.com/2024/03/31/pF7ZAwF.png" alt="image-20240331101821967"></p><p>但是发现下载一半又断开连接了，可能是这种下载方式不支持断点续传，于是打算先把预训练模型下载到本地试试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">huggingface-cli download --resume-download google-bert/bert-base-uncased --local-dir bert-base-uncased</span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2024/03/31/pF7ZEo4.png" alt="image-20240331104044658"></p><p>下好了之后再次尝试跑一下，应该是下了CPU版的torch，重新安装一下吧</p><p><img src="https://s21.ax1x.com/2024/03/31/pF7ZeY9.png" alt="image-20240331104118085"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install pytorch==1.10.1 torchvision==0.11.2 torchaudio==0.10.1 cudatoolkit=11.3</span><br></pre></td></tr></table></figure><p>再次尝试训练，跑通了！！！</p><p><img src="https://s21.ax1x.com/2024/03/31/pF7ZuS1.png" alt="image-20240331110908244"></p><p>但是一直卡在34%了…重启运行了一下代码，把代理开了开（可能是代理的原因？）就可以继续往下跑了，但是好像跑不动，之后在GPU服务器上跑一下试试</p><p><img src="https://s21.ax1x.com/2024/03/31/pF7ZKQx.png" alt="image-20240331112852208"></p><p>尝试直接验证一下模型</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python KnowLog_finetune_single.py --train_data ./datasets/tasks/MC/hw_switch_train.json --dev_data ./datasets/tasks/MC/hw_switch_dev.json --test_data ./datasets/tasks/MC/hw_switch_test.json</span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2024/03/31/pF7Z3wD.png" alt="image-20240331113220505"></p><p>也跑通了，之后在服务器上完整的跑一下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这次要复现的一个项目是&lt;strong&gt;&lt;a href=&quot;https://github.com/LeaperOvO/KnowLog&quot;&gt;KnowLog&lt;/a&gt;&lt;/strong&gt;，首先创建一个虚拟环境&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="论文复现" scheme="https://ruvikm.gitee.io/categories/%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>客户端服务器升为select模型</title>
    <link href="https://ruvikm.gitee.io/posts/cbda1d27.html"/>
    <id>https://ruvikm.gitee.io/posts/cbda1d27.html</id>
    <published>2024-03-02T02:17:20.000Z</published>
    <updated>2024-05-03T12:52:04.003Z</updated>
    
    <content type="html"><![CDATA[<p>服务端</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//只有在WIN里可以</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region 结构体定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CMD</span> &#123;</span><br><span class="line">CMD_LOGIN,</span><br><span class="line">CMD_LOGOUT,</span><br><span class="line">CMD_ERROR,</span><br><span class="line">CMD_LOGIN_RESULT,</span><br><span class="line">CMD_LOGOUT_RESULT,</span><br><span class="line">CMD_NEW_USER_JOIN</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataHeader</span> &#123;</span><br><span class="line"><span class="type">short</span> dataLength;</span><br><span class="line"><span class="type">short</span> cmd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Login</span> : <span class="keyword">public</span> DataHeader &#123;<span class="comment">//DataPackage</span></span><br><span class="line"><span class="built_in">Login</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Login);</span><br><span class="line">cmd = CMD_LOGIN;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line"><span class="type">char</span> PassWord[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoginResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LoginResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LoginResult);</span><br><span class="line">cmd = CMD_LOGIN_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Logout</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">Logout</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Logout);</span><br><span class="line">cmd = CMD_LOGOUT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LogoutResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LogoutResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LogoutResult);</span><br><span class="line">cmd = CMD_LOGOUT_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NewUserJoin</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">NewUserJoin</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(NewUserJoin);</span><br><span class="line">cmd = CMD_NEW_USER_JOIN;</span><br><span class="line">sock = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sock;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataPackage</span> &#123;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;SOCKET&gt; g_clients;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">processor</span><span class="params">(SOCKET _cSock)</span> </span>&#123;</span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="type">char</span> szRecv[<span class="number">4096</span>] = &#123;&#125;;</span><br><span class="line"><span class="comment">// 5 接收客户端数据</span></span><br><span class="line"><span class="type">int</span> nLen = <span class="built_in">recv</span>(_cSock, szRecv, <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">DataHeader* header = (DataHeader*)szRecv;</span><br><span class="line"><span class="keyword">if</span> (nLen &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;客户端&lt; socket = &quot;</span> &lt;&lt; _cSock &lt;&lt; <span class="string">&quot; &gt;已退出，任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (header-&gt;cmd) &#123;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGIN: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">Login* login = (Login*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到客户端&lt;Socket = &quot;</span> &lt;&lt; _cSock &lt;&lt; <span class="string">&quot;&gt;请求：CMD_LOGIN, 数据长度：&quot;</span> &lt;&lt; login-&gt;dataLength &lt;&lt; <span class="string">&quot; ,userName =  &quot;</span> &lt;&lt; login-&gt;userName &lt;&lt; <span class="string">&quot; PassWord = &quot;</span> &lt;&lt; login-&gt;PassWord &lt;&lt; endl;</span><br><span class="line"><span class="comment">//忽略判断用户密码是否正确</span></span><br><span class="line">LoginResult ret;</span><br><span class="line"><span class="built_in">send</span>(_cSock, (<span class="type">char</span>*)&amp;ret, <span class="built_in">sizeof</span>(LoginResult), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGOUT: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">Logout* logout = (Logout*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到客户端&lt;Socket = &quot;</span> &lt;&lt; _cSock &lt;&lt; <span class="string">&quot;&gt;请求：CMD_LOGOUT, 数据长度：&quot;</span> &lt;&lt; logout-&gt;dataLength &lt;&lt; <span class="string">&quot; ,userName =  &quot;</span> &lt;&lt; logout-&gt;userName &lt;&lt; endl;</span><br><span class="line"><span class="comment">//忽略判断用户密码是否正确</span></span><br><span class="line">LogoutResult ret;</span><br><span class="line"><span class="built_in">send</span>(_cSock, (<span class="type">char</span>*)&amp;ret, <span class="built_in">sizeof</span>(ret), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line">DataHeader header = &#123; <span class="number">0</span>,CMD_ERROR &#125;;</span><br><span class="line"><span class="built_in">send</span>(_cSock, (<span class="type">char</span>*)&amp;header, <span class="built_in">sizeof</span>(header), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//启动Windows socket 2.x环境</span></span><br><span class="line">WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA dat;</span><br><span class="line"><span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line"><span class="comment">// 用Socket API 建立一个简易的TCP服务端 1 建立一个socket 套接字</span></span><br><span class="line">SOCKET _sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="comment">// 2 bind 绑定用于接受客户端连接的网络接口</span></span><br><span class="line">sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">_sin.sin_family = AF_INET;</span><br><span class="line">_sin.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);<span class="comment">// host to net unsigned short</span></span><br><span class="line">_sin.sin_addr.S_un.S_addr = INADDR_ANY;<span class="comment">//inet_addr(&quot;127.0.0.1&quot;);</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bind</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(_sin)) == SOCKET_ERROR) &#123;</span><br><span class="line"><span class="comment">//绑定错误</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;绑定网络端口失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;绑定网络端口成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3 listen 监听网络端口</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">listen</span>(_sock, <span class="number">5</span>)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;监听网络端口失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;监听网络端口成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">// 伯克利套接字 BSD socket</span></span><br><span class="line">fd_set fdRead; <span class="comment">//描述符(Socket) 集合</span></span><br><span class="line">fd_set fdWrite;</span><br><span class="line">fd_set fdExp;</span><br><span class="line"><span class="comment">//清理集合</span></span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdRead);</span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdWrite);</span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdExp);</span><br><span class="line"><span class="comment">//将描述符(socket)加入集合</span></span><br><span class="line"><span class="built_in">FD_SET</span>(_sock, &amp;fdRead);</span><br><span class="line"><span class="built_in">FD_SET</span>(_sock, &amp;fdWrite);</span><br><span class="line"><span class="built_in">FD_SET</span>(_sock, &amp;fdExp);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line"><span class="built_in">FD_SET</span>(g_clients[n], &amp;fdRead);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//nfds 是一个整数值，是指fd_set集合中所有描述符(socket)的范围，而不是数量</span></span><br><span class="line"><span class="comment">//既是所有文件描述符最大值+1，在Windows中这个参数可以写0</span></span><br><span class="line">timeval t = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span>  ret = <span class="built_in">select</span>(_sock + <span class="number">1</span>, &amp;fdRead, &amp;fdWrite, &amp;fdExp, &amp;t);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;select任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断描述符(socket)是否在集合中</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(_sock, &amp;fdRead)) &#123;</span><br><span class="line"><span class="built_in">FD_CLR</span>(_sock, &amp;fdRead);</span><br><span class="line"><span class="comment">//4 accept 等待接受客户端连接</span></span><br><span class="line">sockaddr_in clientAddr = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> nAddrLen = <span class="built_in">sizeof</span>(sockaddr_in);</span><br><span class="line">SOCKET _cSock = INVALID_SOCKET;</span><br><span class="line">_cSock = <span class="built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, &amp;nAddrLen);</span><br><span class="line"><span class="keyword">if</span> (_cSock == INVALID_SOCKET) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;接受到无效客户端SOCKET...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 新客户端加入，群发</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line">NewUserJoin userJoin;</span><br><span class="line"><span class="built_in">send</span>(g_clients[n], (<span class="type">const</span> <span class="type">char</span>*)&amp;userJoin, <span class="built_in">sizeof</span>(NewUserJoin), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">g_clients.<span class="built_in">push_back</span>(_cSock);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;新客户端加入：socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_cSock &lt;&lt; <span class="string">&quot;, IP = &quot;</span> &lt;&lt; <span class="built_in">inet_ntoa</span>(clientAddr.sin_addr) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> n = <span class="number">0</span>; n &lt; fdRead.fd_count; n++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">processor</span>(fdRead.fd_array[n]) == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">auto</span> iter = <span class="built_in">find</span>(g_clients.<span class="built_in">begin</span>(), g_clients.<span class="built_in">end</span>(), fdRead.fd_array[n]);</span><br><span class="line"><span class="keyword">if</span> (iter != g_clients.<span class="built_in">end</span>()) &#123;</span><br><span class="line">g_clients.<span class="built_in">erase</span>(iter);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试中间select函数最后一个参数</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;空闲时间处理其他业务 ...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> n = g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line"><span class="built_in">closesocket</span>(g_clients[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6 关闭套接字closesocket</span></span><br><span class="line"><span class="comment">//7 清除windows socket环境</span></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;服务器已退出,任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//保留界面</span></span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//只有在WIN里可以</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region 结构体定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CMD</span> &#123;</span><br><span class="line">CMD_LOGIN,</span><br><span class="line">CMD_LOGOUT,</span><br><span class="line">CMD_ERROR,</span><br><span class="line">CMD_LOGIN_RESULT,</span><br><span class="line">CMD_LOGOUT_RESULT,</span><br><span class="line">CMD_NEW_USER_JOIN</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataHeader</span> &#123;</span><br><span class="line"><span class="type">short</span> dataLength;</span><br><span class="line"><span class="type">short</span> cmd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Login</span> : <span class="keyword">public</span> DataHeader &#123;<span class="comment">//DataPackage</span></span><br><span class="line"><span class="built_in">Login</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Login);</span><br><span class="line">cmd = CMD_LOGIN;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line"><span class="type">char</span> PassWord[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoginResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LoginResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LoginResult);</span><br><span class="line">cmd = CMD_LOGIN_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Logout</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">Logout</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(Logout);</span><br><span class="line">cmd = CMD_LOGOUT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LogoutResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">LogoutResult</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(LogoutResult);</span><br><span class="line">cmd = CMD_LOGOUT_RESULT;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NewUserJoin</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line"><span class="built_in">NewUserJoin</span>() &#123;</span><br><span class="line">dataLength = <span class="built_in">sizeof</span>(NewUserJoin);</span><br><span class="line">cmd = CMD_NEW_USER_JOIN;</span><br><span class="line">sock = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sock;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataPackage</span> &#123;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">processor</span><span class="params">(SOCKET _cSock)</span> </span>&#123;</span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="type">char</span> szRecv[<span class="number">4096</span>] = &#123;&#125;;</span><br><span class="line"><span class="comment">// 5 接收客户端数据</span></span><br><span class="line"><span class="type">int</span> nLen = <span class="built_in">recv</span>(_cSock, szRecv, <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">DataHeader* header = (DataHeader*)szRecv;</span><br><span class="line"><span class="keyword">if</span> (nLen &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;与服务器断开连接，任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (header-&gt;cmd) &#123;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGIN_RESULT: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">LoginResult* login = (LoginResult*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到服务端消息：CMD_LOGIN_RESULT, 数据长度：&quot;</span> &lt;&lt; login-&gt;dataLength &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_LOGOUT_RESULT: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">LogoutResult* logout = (LogoutResult*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到服务端消息：CMD_LOGOUT_RESULT, 数据长度：&quot;</span> &lt;&lt; logout-&gt;dataLength &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CMD_NEW_USER_JOIN: &#123;</span><br><span class="line"><span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">NewUserJoin* userJoin = (NewUserJoin*)szRecv;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;收到服务端消息：CMD_LOGOUT_RESULT, 数据长度：&quot;</span> &lt;&lt; userJoin-&gt;dataLength &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//启动Windows socket 2.x环境</span></span><br><span class="line">WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA dat;</span><br><span class="line"><span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line"><span class="comment">// 用Socket API 建立一个简易的TCP服务端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 建立一个socket</span></span><br><span class="line">SOCKET _sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == _sock) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;建立Socket失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;建立Socket成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 连接服务器 connect</span></span><br><span class="line">sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">_sin.sin_family = AF_INET;</span><br><span class="line">_sin.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);</span><br><span class="line">_sin.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">connect</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(sockaddr_in));</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == ret) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;连接服务器失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;连接服务器成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">fd_set fdReads;</span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;fdReads);</span><br><span class="line"><span class="built_in">FD_SET</span>(_sock,&amp;fdReads);</span><br><span class="line">timeval t = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">select</span>(_sock, &amp;fdReads, <span class="number">0</span>, <span class="number">0</span>, &amp;t);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;select任务结束&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(_sock, &amp;fdReads)) &#123;</span><br><span class="line"><span class="built_in">FD_CLR</span>(_sock, &amp;fdReads);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == <span class="built_in">processor</span>(_sock)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;select任务结束2...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;空闲时间处理其他业务 ...&quot;</span> &lt;&lt; endl;</span><br><span class="line">Login login;</span><br><span class="line"><span class="built_in">strcpy</span>(login.userName, <span class="string">&quot;lyd&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(login.PassWord, <span class="string">&quot;lyd&quot;</span>);</span><br><span class="line"><span class="built_in">send</span>(_sock, (<span class="type">const</span> <span class="type">char</span>*)&amp;login, <span class="built_in">sizeof</span>(Login), <span class="number">0</span>);</span><br><span class="line"><span class="comment">//仅仅适用于Windows</span></span><br><span class="line"><span class="comment">// Sleep(1000);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 7 关闭套接字closesocket</span></span><br><span class="line"><span class="built_in">closesocket</span>(_sock);</span><br><span class="line"><span class="comment">// 8 清除windows socket环境</span></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;客户端已退出,任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//保留界面</span></span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s11.ax1x.com/2024/03/02/pF0yFOS.png" alt="image-20240302101949530"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;服务端&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;defin</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ruvikm.gitee.io/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="C++socket项目" scheme="https://ruvikm.gitee.io/tags/C-socket%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>nginx反向代理出错</title>
    <link href="https://ruvikm.gitee.io/posts/548bc04a.html"/>
    <id>https://ruvikm.gitee.io/posts/548bc04a.html</id>
    <published>2024-01-26T13:24:54.000Z</published>
    <updated>2024-05-03T12:52:03.991Z</updated>
    
    <content type="html"><![CDATA[<p>使用yum安装好了nginx</p><h2 id="问题再现"><a href="#问题再现" class="headerlink" title="问题再现"></a>问题再现</h2><p>进入路径配置好了<code>nginx.conf</code>文件</p><p><img src="https://s11.ax1x.com/2024/01/26/pFnwVDP.png" alt="QQ截图20240126212909"></p><p>验证<code>nginx.conf</code>文件是否有语法错误</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure><p>重载nginx服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>然后启动程序，发现nginx报错</p><p><img src="https://s11.ax1x.com/2024/01/26/pFnwmE8.png" alt="img"></p><p>在终端可以尝试输入了这样一句话</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setsebool -P httpd_can_network_connect <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>解释：可能是SELinux的原因，它会基于最小权限原则默认拦截了 Nginx 的请求</p><p><img src="https://s11.ax1x.com/2024/01/26/pFnwnUS.png" alt="image-20240126213917121"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用yum安装好了nginx&lt;/p&gt;
&lt;h2 id=&quot;问题再现&quot;&gt;&lt;a href=&quot;#问题再现&quot; class=&quot;headerlink&quot; title=&quot;问题再现&quot;&gt;&lt;/a&gt;问题再现&lt;/h2&gt;&lt;p&gt;进入路径配置好了&lt;code&gt;nginx.conf&lt;/code&gt;文件&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="个人笔记" scheme="https://ruvikm.gitee.io/tags/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>在虚拟机Centos 7中配置Redis环境</title>
    <link href="https://ruvikm.gitee.io/posts/undefined.html"/>
    <id>https://ruvikm.gitee.io/posts/undefined.html</id>
    <published>2024-01-08T12:05:08.000Z</published>
    <updated>2024-01-08T13:04:38.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载fedora的epel仓库</span></span><br><span class="line">sudo yum install epel-release</span><br><span class="line"><span class="comment"># 安装redis数据库</span></span><br><span class="line">sudo yum install redis</span><br></pre></td></tr></table></figure><p>测试是否安装成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动redis</span></span><br><span class="line">service redis start</span><br><span class="line"><span class="comment">#查看redis进程</span></span><br><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure><p><img src="https://s11.ax1x.com/2024/01/08/pFSvcQg.png" alt="image-20240108203745982"></p><h2 id="配置Redis"><a href="#配置Redis" class="headerlink" title="配置Redis"></a>配置Redis</h2><p><strong>以需求为远程连接Redis为例</strong></p><p>开始配置之前，先关闭Redis服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭redis</span></span><br><span class="line">service redis stop</span><br></pre></td></tr></table></figure><h4 id="打开配置文件"><a href="#打开配置文件" class="headerlink" title="打开配置文件"></a>打开配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/redis.conf</span><br></pre></td></tr></table></figure><p>进入编辑器后，输入<code>/</code>+<code>搜索的内容</code>然后回车进行搜索，按<code>n</code>键查找下一个(eg:修改端口号时输入/port)，按<code>i</code>进入到插入模式进行修改，修改完后按<code>Esc</code>退出插入模式</p><h4 id="修改端口号（按照需求修改）"><a href="#修改端口号（按照需求修改）" class="headerlink" title="修改端口号（按照需求修改）"></a>修改端口号（按照需求修改）</h4><p><img src="https://s11.ax1x.com/2024/01/08/pFSvmM4.png" alt="image-20240108202709064"></p><h4 id="修改默认密码（建议修改）"><a href="#修改默认密码（建议修改）" class="headerlink" title="修改默认密码（建议修改）"></a>修改默认密码（建议修改）</h4><p><img src="https://s11.ax1x.com/2024/01/08/pFSvnsJ.png" alt="image-20240108202554924"></p><h4 id="取消只允许在本机连接redis"><a href="#取消只允许在本机连接redis" class="headerlink" title="取消只允许在本机连接redis"></a>取消只允许在本机连接redis</h4><p><img src="https://s11.ax1x.com/2024/01/08/pFSzuU1.png" alt="image-20240108202958241"></p><p>将<code>bind 127.0.0.1</code>注释掉</p><p>然后输入<code>:wq</code>保存并退出</p><h4 id="设置Redis开机自启"><a href="#设置Redis开机自启" class="headerlink" title="设置Redis开机自启"></a>设置Redis开机自启</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig redis on</span><br></pre></td></tr></table></figure><h2 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h2><p>在linux下的防火墙中开放6379端口（如果上面更换了端口号就按自己的来）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br></pre></td></tr></table></figure><p>重启防火墙</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure><h2 id="使用可视化软件连接Redis"><a href="#使用可视化软件连接Redis" class="headerlink" title="使用可视化软件连接Redis"></a>使用可视化软件连接Redis</h2><p>下载可视化软件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://gitee.com/qishibo/AnotherRedisDesktopManager/releases</span><br></pre></td></tr></table></figure><p>查看自己ip地址</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><p><img src="https://s11.ax1x.com/2024/01/08/pFSzK4x.png" alt="屏幕截图 2024-01-08 204612"></p><p>配置远程连接，地址为上面的箭头所指的ip地址，密码为刚刚配置Redis时配置的</p><p><img src="https://s11.ax1x.com/2024/01/08/pFSzQC6.png" alt="屏幕截图 2024-01-08 205033"></p><p>连接成功</p><p><img src="https://s11.ax1x.com/2024/01/08/pFSzl8K.png" alt="屏幕截图 2024-01-08 205120"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装Redis&quot;&gt;&lt;a href=&quot;#安装Redis&quot; class=&quot;headerlink&quot; title=&quot;安装Redis&quot;&gt;&lt;/a&gt;安装Redis&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    
    <category term="个人笔记" scheme="https://ruvikm.gitee.io/tags/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>建立一个简易的TCP客户端与服务端</title>
    <link href="https://ruvikm.gitee.io/posts/aa711198.html"/>
    <id>https://ruvikm.gitee.io/posts/aa711198.html</id>
    <published>2023-12-15T10:19:52.000Z</published>
    <updated>2024-05-03T12:52:04.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP服务端"><a href="#TCP服务端" class="headerlink" title="TCP服务端"></a>TCP服务端</h2><p>分为一下六步：</p><ol><li>建立一个socket 套接字</li><li>bind 绑定用于接受客户端连接的网络接口</li><li>listen 监听网络端口</li><li>accept 等待接受客户端连接</li><li>send 向客户端发送一条数据</li><li>关闭套接字closesocket</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//只有在WIN里可以</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//启动Windows socket 2.x环境</span></span><br><span class="line">WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA dat;</span><br><span class="line"><span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line"><span class="comment">// 用Socket API 建立一个简易的TCP服务端</span></span><br><span class="line"><span class="comment">// 1 建立一个socket 套接字</span></span><br><span class="line">SOCKET _sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="comment">// 2 bind 绑定用于接受客户端连接的网络接口</span></span><br><span class="line">sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">_sin.sin_family = AF_INET;</span><br><span class="line">_sin.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);<span class="comment">// host to net unsigned short</span></span><br><span class="line">_sin.sin_addr.S_un.S_addr = INADDR_ANY;<span class="comment">//inet_addr(&quot;127.0.0.1&quot;);</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bind</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(_sin)) == SOCKET_ERROR) &#123;</span><br><span class="line"><span class="comment">//绑定错误</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;绑定网络端口失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;绑定网络端口成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3 listen 监听网络端口</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">listen</span>(_sock, <span class="number">5</span>)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;监听网络端口失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;监听网络端口成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4 accept 等待接受客户端连接</span></span><br><span class="line">sockaddr_in clientAddr = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> nAddrLen = <span class="built_in">sizeof</span>(sockaddr_in);</span><br><span class="line">SOCKET _cSock = INVALID_SOCKET;</span><br><span class="line"><span class="type">char</span> msgBuf[] = <span class="string">&quot;Hello ,I&#x27;m Server.&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">_cSock = <span class="built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, &amp;nAddrLen);</span><br><span class="line"><span class="keyword">if</span> (_cSock == INVALID_SOCKET) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;接受到无效客户端SOCKET...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;新客户端加入：IP =&quot;</span> &lt;&lt; <span class="built_in">inet_ntoa</span>(clientAddr.sin_addr) &lt;&lt; endl;</span><br><span class="line"><span class="comment">//5 send 向客户端发送一条数据</span></span><br><span class="line"><span class="built_in">send</span>(_cSock, msgBuf, <span class="built_in">strlen</span>(msgBuf) + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6 关闭套接字closesocket</span></span><br><span class="line"><span class="built_in">closesocket</span>(_sock);</span><br><span class="line"><span class="comment">//7 清除windows socket环境</span></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="comment">//保留界面</span></span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TCP服务端-1"><a href="#TCP服务端-1" class="headerlink" title="TCP服务端"></a>TCP服务端</h2><p>分为四步：</p><ol><li>建立一个socket</li><li>连接服务器 connect</li><li>接受服务器信息 recv</li><li>关闭套接字closesocket</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//只有在WIN里可以</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//启动Windows socket 2.x环境</span></span><br><span class="line">WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSADATA dat;</span><br><span class="line"><span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line"><span class="comment">// 用Socket API 建立一个简易的TCP服务端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 建立一个socket</span></span><br><span class="line">SOCKET _sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == _sock) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;建立Socket失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;建立Socket成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 连接服务器 connect</span></span><br><span class="line">sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">_sin.sin_family = AF_INET;</span><br><span class="line">_sin.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);</span><br><span class="line">_sin.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">connect</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(sockaddr_in));</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == ret) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;连接Socket失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;连接Socket成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3 接受服务器信息 recv</span></span><br><span class="line"><span class="type">char</span> recvBuf[<span class="number">256</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> nlen = <span class="built_in">recv</span>(_sock, recvBuf, <span class="number">256</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (nlen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;接收到数据为：&quot;</span> &lt;&lt; recvBuf &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4 关闭套接字closesocket</span></span><br><span class="line"><span class="built_in">closesocket</span>(_sock);</span><br><span class="line"><span class="comment">// 5 清除windows socket环境</span></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="comment">//保留界面</span></span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h2><p><strong>服务端</strong></p><p><img src="https://s11.ax1x.com/2023/12/15/pi41BFK.png" alt="屏幕截图 2023-12-15 181558"></p><p><strong>客户端</strong></p><p><img src="https://s11.ax1x.com/2023/12/15/pi41DJO.png" alt="屏幕截图 2023-12-15 181602"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TCP服务端&quot;&gt;&lt;a href=&quot;#TCP服务端&quot; class=&quot;headerlink&quot; title=&quot;TCP服务端&quot;&gt;&lt;/a&gt;TCP服务端&lt;/h2&gt;&lt;p&gt;分为一下六步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建立一个socket 套接字&lt;/li&gt;
&lt;li&gt;bind 绑定用于</summary>
      
    
    
    
    <category term="个人项目" scheme="https://ruvikm.gitee.io/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="C++socket项目" scheme="https://ruvikm.gitee.io/tags/C-socket%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>JZ22 链表中倒数最后k个结点</title>
    <link href="https://ruvikm.gitee.io/posts/8f3b69e8.html"/>
    <id>https://ruvikm.gitee.io/posts/8f3b69e8.html</id>
    <published>2023-11-20T08:08:47.000Z</published>
    <updated>2024-05-03T12:52:03.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>输入一个长度为 n 的链表，设链表中的元素的值为 a_i ，返回该链表中倒数第k个节点。</p><p>如果该链表长度小于k，请返回一个长度为 0 的链表。</p><p>数据范围：</p><script type="math/tex; mode=display">0 \leq n \leq 10^5,0 \leq a_i \leq 10^9,0 \leq k \leq 10^9</script><p>要求：空间复杂度 <em>O</em>(n)，时间复杂度 O<em>(</em>n)</p><p>进阶：空间复杂度O(1)，时间复杂度 O(n)</p><p>例如输入{1,2,3,4,5},2时，对应的链表结构如下图所示：</p><p><img src="https://z1.ax1x.com/2023/11/20/piap43j.png" alt="img"></p><p>其中蓝色部分为该链表的最后2个结点，所以返回倒数第2个结点（也即结点值为4的结点）即可，系统会打印后面所有的节点来比较。</p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">&#123;1,2,3,4,5&#125;,2</span><br><span class="line">返回值：</span><br><span class="line">&#123;4,5&#125;</span><br><span class="line">说明：</span><br><span class="line">返回倒数第2个节点4，系统会打印后面所有的节点来比较。 </span><br></pre></td></tr></table></figure><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">&#123;2&#125;,8</span><br><span class="line">返回值：</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="题解1"><a href="#题解1" class="headerlink" title="题解1"></a>题解1</h2><p>首先求出链表的长度<code>n</code>，从题目的倒数第<code>k</code>个结点，推出是正数的第<code>n - k</code>个结点。若<code>n - k &lt; 0</code>，则返回空值</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param pHead ListNode类</span></span><br><span class="line"><span class="comment">     * @param k int整型</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">FindKthToTail</span><span class="params">(ListNode* pHead, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">        ListNode* p = pHead;</span><br><span class="line">        <span class="keyword">for</span> (; p != <span class="literal">nullptr</span>; p = p-&gt;next, len++);</span><br><span class="line">        <span class="type">int</span> step = len - k;</span><br><span class="line">        <span class="keyword">if</span> (step &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (step--) &#123;</span><br><span class="line">            pHead = pHead-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题解2"><a href="#题解2" class="headerlink" title="题解2"></a>题解2</h2><p>用一个栈处理，由于栈是后进先出的，所以正好符合题意的倒数。倒数第k个结点就意味着栈需要弹出k次即可。</p><p>这里有一个细节，栈都弹完了，k还是大于等于0的，则应该返回空值</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param pHead ListNode类</span></span><br><span class="line"><span class="comment">     * @param k int整型</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">FindKthToTail</span><span class="params">(ListNode* pHead, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        stack&lt;ListNode*&gt; st;</span><br><span class="line">        ListNode* res;</span><br><span class="line">        <span class="keyword">if</span>(k &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span> (pHead != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            st.<span class="built_in">push</span>(pHead);</span><br><span class="line">            pHead = pHead-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (k-- &amp;&amp; !st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            res = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;输入一个长度为 n 的链表，设链表中的元素的值为 a_i ，返回该链表中倒数第k个节点。&lt;/p&gt;
&lt;p&gt;如果该链表长度小于k，请返回一个长度</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://ruvikm.gitee.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>jz23 链表中环的入口结点</title>
    <link href="https://ruvikm.gitee.io/posts/f7d0df50.html"/>
    <id>https://ruvikm.gitee.io/posts/f7d0df50.html</id>
    <published>2023-11-20T02:33:18.000Z</published>
    <updated>2024-05-03T12:52:04.007Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给一个长度为n链表，若其中包含环，请找出该链表的环的入口结点，否则，返回null。</p><p>数据范围： n≤10000，1&lt;=结点值&lt;=10000</p><p>要求：空间复杂度 O<em>(1)，时间复杂度 O</em>(<em>n</em>)</p><p>例如，输入{1,2},{3,4,5}时，对应的环形链表如下图所示：</p><p><img src="https://z1.ax1x.com/2023/11/20/piU6lqS.png" alt="img"></p><p>可以看到环的入口结点的结点值为3，所以返回结点值为3的结点。</p><h3 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h3><p>输入分为2段，第一段是入环前的链表部分，第二段是链表环的部分，后台会根据第二段是否为空将这两段组装成一个无环或者有环单链表</p><h3 id="返回值描述："><a href="#返回值描述：" class="headerlink" title="返回值描述："></a>返回值描述：</h3><p>返回链表的环的入口结点即可，我们后台程序会打印这个结点对应的结点值；若没有，则返回对应编程语言的空结点即可。</p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,2&#125;,&#123;3,4,5&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>说明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回环形链表入口结点，我们后台程序会打印该环形链表入口结点对应的结点值，即3   </span><br></pre></td></tr></table></figure><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1&#125;,&#123;&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;null&quot;</span><br></pre></td></tr></table></figure><p>说明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">没有环，返回对应编程语言的空结点，后台程序会打印&quot;null&quot;   </span><br></pre></td></tr></table></figure><h2 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;,&#123;2&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>说明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">环的部分只有一个结点，所以返回该环形链表入口结点，后台程序打印该结点对应的结点值，即2 </span><br></pre></td></tr></table></figure><h2 id="题解1"><a href="#题解1" class="headerlink" title="题解1"></a>题解1</h2><p>如果不考虑空间复杂度，可以使用一个大小为10000的数组<code>a</code>存放各个结点的值，每当遍历到一个节点V的时候，就把<code>a[v-val]++</code></p><p>因为存在换，所以当第一个<code>a[v-val] == 2</code>的时候，即为环的入口结点</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">        val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vt</span><span class="params">(<span class="number">10000</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(pHead != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            vt[pHead-&gt;val]++;</span><br><span class="line">            <span class="keyword">if</span>(vt[pHead-&gt;val] == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pHead = pHead-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题解2"><a href="#题解2" class="headerlink" title="题解2"></a>题解2</h2><p>可以使用快慢指针，快指针<code>fast</code>每次走两步，慢指针<code>slow</code>每次走一步。这样如果有环存在的话，在环中，快慢指针的距离，每移动一次距离就会减一，这样如果它们相遇的话，就一定可以判断链表中有没有环。</p><p>那么如何判断环的入口点是在哪里呢？我们假设环前面的节点有a个，环中的节点有b个，慢指针走的长度为S_dis</p><p>快指针走的路线为F_dis。当两个指针相遇时，依据题意可以等于以下两个等式</p><script type="math/tex; mode=display">F_{dis} = 2  S_{dis}(因为快指针每次走的步数是慢指针的两倍)</script><script type="math/tex; mode=display">F_{dis} = a + nb(当两者相遇时，快指针一定已经绕环走了n圈)</script><p>联立可得</p><script type="math/tex; mode=display">2  S_{dis} = a + nb</script><p>可以得出</p><script type="math/tex; mode=display">a = S_{dis} = nb</script><script type="math/tex; mode=display">F_{dis} = 2nb</script><p>所以当两个指针相遇的时候，将快指针移到链表头部重新往后走，这次一次走一步。慢指针保持原来的位置，继续向后走，也是一次走一步，当两个指针相遇的时候，即是环的入口处。（这时候快指针刚好走完<code>a = nb</code>的长度到达环的入口处）</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">        val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">        ListNode* slow = pHead;</span><br><span class="line">        ListNode* fast = pHead;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            slow = slow -&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            <span class="comment">//如果指向空就说明没有环</span></span><br><span class="line">            <span class="keyword">if</span> (slow == <span class="literal">nullptr</span> || fast == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (slow != fast);</span><br><span class="line">        fast = pHead;</span><br><span class="line">        <span class="keyword">while</span> (fast != slow) &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;给一个长度为n链表，若其中包含环，请找出该链表的环的入口结点，否则，返回null。&lt;/p&gt;
&lt;p&gt;数据范围： n≤10000，1&amp;lt;=结</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://ruvikm.gitee.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>JZ52 两个链表的第一个公共结点</title>
    <link href="https://ruvikm.gitee.io/posts/c87ee886.html"/>
    <id>https://ruvikm.gitee.io/posts/c87ee886.html</id>
    <published>2023-11-19T11:13:13.000Z</published>
    <updated>2024-05-03T12:52:03.992Z</updated>
    
    <content type="html"><![CDATA[<p>输入两个无环的单向链表，找出它们的第一个公共结点，如果没有公共节点则返回空。（注意因为传入数据是链表，所以错误测试数据的提示是用其他方式显示的，保证传入数据是正确的）</p><p>数据范围： n≤1000<br>要求：空间复杂度 O<em>(1)，时间复杂度 )</em>O<em>(</em>n)</p><p>例如，输入{1,2,3},{4,5},{6,7}时，两个无环的单向链表的结构如下图所示：</p><p><img src="https://z1.ax1x.com/2023/11/19/piUE2Pf.png" alt="img"></p><p>可以看到它们的第一个公共结点的结点值为6，所以返回结点值为6的结点。</p><h3 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h3><p>输入分为是3段，第一段是第一个链表的非公共部分，第二段是第二个链表的非公共部分，第三段是第一个链表和第二个链表的公共部分。 后台会将这3个参数组装为两个链表，并将这两个链表对应的头节点传入到函数FindFirstCommonNode里面，用户得到的输入只有pHead1和pHead2。</p><h3 id="返回值描述："><a href="#返回值描述：" class="headerlink" title="返回值描述："></a>返回值描述：</h3><p>返回传入的pHead1和pHead2的第一个公共结点，后台会打印以该节点为头节点的链表。</p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,2,3&#125;,&#123;4,5&#125;,&#123;6,7&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;6,7&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一个参数&#123;1,2,3&#125;代表是第一个链表非公共部分，第二个参数&#123;4,5&#125;代表是第二个链表非公共部分，最后的&#123;6,7&#125;表示的是2个链表的公共部分</span><br><span class="line">这3个参数最后在后台会组装成为2个两个无环的单链表，且是有公共节点的          </span><br></pre></td></tr></table></figure><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1&#125;,&#123;2,3&#125;,&#123;&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2个链表没有公共节点 ,返回null，后台打印&#123;&#125;       </span><br></pre></td></tr></table></figure><h2 id="题解1"><a href="#题解1" class="headerlink" title="题解1"></a>题解1</h2><p>首先先求出两个链表的长度，让长度长一点的指针先往前走几步（走的步数 = 两链表长度差），然后让两个指针分别指向两个链表，当两个指针相等的时候几个返回当前指向的结点</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">            val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">FindFirstCommonNode</span><span class="params">( ListNode* pHead1, ListNode* pHead2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pHead1 == <span class="literal">nullptr</span> || pHead2 == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* res = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="type">int</span> len1 = <span class="number">0</span>, len2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ListNode* p = pHead1; p != <span class="literal">nullptr</span>; p = p-&gt;next, len1++);</span><br><span class="line">        <span class="keyword">for</span> (ListNode* p = pHead2; p != <span class="literal">nullptr</span>; p = p-&gt;next, len2++);</span><br><span class="line">        <span class="type">int</span> step = <span class="built_in">abs</span>(len2 - len1);</span><br><span class="line"><span class="keyword">if</span>(len1 &gt; len2)&#123;</span><br><span class="line"><span class="keyword">while</span>(step--)&#123;</span><br><span class="line">pHead1 = pHead1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(step--)&#123;</span><br><span class="line">pHead2 = pHead2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(pHead1 != pHead2)&#123;</span><br><span class="line">pHead1 = pHead1-&gt;next;</span><br><span class="line">pHead2 = pHead2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> pHead1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="题解2"><a href="#题解2" class="headerlink" title="题解2"></a>题解2</h2><p>用两个指针分别指向两个链表，让其循环移动，当指向同一个结点的时候即为公共结点</p><p><img src="https://z1.ax1x.com/2023/11/19/piUES4f.png" alt="微信图片_20231119204317"></p><p>也就是说，当指针1走完{1,2,3,6,7}的时候，让它指向{4,5}。同理，当指针2走完{4,5,6,7}的时候，让它指向{1,2,3}</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">int val;</span></span><br><span class="line"><span class="comment">struct ListNode *next;</span></span><br><span class="line"><span class="comment">ListNode(int x) :</span></span><br><span class="line"><span class="comment">val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">FindFirstCommonNode</span><span class="params">( ListNode* pHead1, ListNode* pHead2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead1 == <span class="literal">nullptr</span> ||pHead2 == <span class="literal">nullptr</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">ListNode * H1 = pHead1, * H2 = pHead2;</span><br><span class="line"><span class="keyword">while</span>(H1 != H2)&#123;</span><br><span class="line">H1 = (H1 == <span class="literal">nullptr</span>) ? pHead2 : H1-&gt;next;</span><br><span class="line">H2 = (H2 == <span class="literal">nullptr</span>) ? pHead1 : H2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> H1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;输入两个无环的单向链表，找出它们的第一个公共结点，如果没有公共节点则返回空。（注意因为传入数据是链表，所以错误测试数据的提示是用其他方式显示的，保证传入数据是正确的）&lt;/p&gt;
&lt;p&gt;数据范围： n≤1000&lt;br&gt;要求：空间复杂度 O&lt;em&gt;(1)，时间复杂度 )&lt;/em&gt;</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://ruvikm.gitee.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>jz25 合并两个排序的链表</title>
    <link href="https://ruvikm.gitee.io/posts/5ac6a0d9.html"/>
    <id>https://ruvikm.gitee.io/posts/5ac6a0d9.html</id>
    <published>2023-11-18T02:35:51.000Z</published>
    <updated>2024-05-03T12:52:03.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>输入两个递增的链表，单个链表的长度为n，合并这两个链表并使新链表中的节点仍然是递增排序的。</p><p>数据范围： 0≤10000≤<em>n</em>≤1000，−1000≤节点值≤1000−1000≤节点值≤1000<br>要求：空间复杂度 <em>O</em>(1)，时间复杂度 <em>O</em>(<em>n</em>)</p><p>如输入{1,3,5},{2,4,6}时，合并后的链表为{1,2,3,4,5,6}，所以对应的输出为{1,2,3,4,5,6}，转换过程如下图所示：</p><p><img src="https://z1.ax1x.com/2023/11/19/piUEyVI.png" alt="09DD8C2662B96CE14928333F055C5580"></p><p>或输入{-1,2,4},{1,3,4}时，合并后的链表为{-1,1,2,3,4,4}，所以对应的输出为{-1,1,2,3,4,4}，转换过程如下图所示：</p><p><img src="https://z1.ax1x.com/2023/11/19/piUE6at.png" alt="8266E4BFEDA1BD42D8F9794EB4EA0A13"></p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,3,5&#125;,&#123;2,4,6&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,2,3,4,5,6&#125;</span><br></pre></td></tr></table></figure><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;,&#123;&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;-1,2,4&#125;,&#123;1,3,4&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;-1,1,2,3,4,4&#125;</span><br></pre></td></tr></table></figure><h1 id="题解1"><a href="#题解1" class="headerlink" title="题解1"></a>题解1</h1><p>可以使用虚拟头结点，可以再新建一个链表，然后把两个链表的结点从小到大依次插入到新链表中即可。使用双指针分别指向两个链表，然后每次将较小的结点放在虚拟头结点后面，然后指针（刚刚较小的）放后移动，另一个指针不动</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param pHead1 ListNode类</span></span><br><span class="line"><span class="comment">     * @param pHead2 ListNode类</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">Merge</span><span class="params">(ListNode* pHead1, ListNode* pHead2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span> (pHead1 == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> pHead2;</span><br><span class="line">        <span class="keyword">if</span> (pHead2 == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> pHead1;</span><br><span class="line">        ListNode* p = pHead2, *q = pHead1;</span><br><span class="line">        ListNode* newHead;</span><br><span class="line">        newHead = p-&gt;val &lt;= q-&gt;val ? p : q;</span><br><span class="line">        ListNode *res = newHead;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">nullptr</span> &amp;&amp; q != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;val &lt;= q-&gt;val) &#123;</span><br><span class="line">                ListNode* tmp = p-&gt;next;</span><br><span class="line">                ListNode* node = p;</span><br><span class="line">                newHead-&gt;next = node;</span><br><span class="line">                newHead = node;</span><br><span class="line">                p = tmp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ListNode* tmp = q-&gt;next;</span><br><span class="line">                ListNode* node = q;</span><br><span class="line">                newHead-&gt;next = node;</span><br><span class="line">                newHead = node;</span><br><span class="line">                q = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            newHead-&gt;next = p;</span><br><span class="line">            newHead = p;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (q != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            newHead-&gt;next = q;</span><br><span class="line">            newHead = q;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>本来打算将一个链表插入到另一个链表之中的，但是太复杂了，一直没有AC</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;输入两个递增的链表，单个链表的长度为n，合并这两个链表并使新链表中的节点仍然是递增排序的。&lt;/p&gt;
&lt;p&gt;数据范围： 0≤10000≤&lt;em</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://ruvikm.gitee.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>JZ24 反转链表</title>
    <link href="https://ruvikm.gitee.io/posts/628ce84.html"/>
    <id>https://ruvikm.gitee.io/posts/628ce84.html</id>
    <published>2023-11-16T10:48:55.000Z</published>
    <updated>2024-05-03T12:52:03.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给定一个单链表的头结点<code>pHead</code>(该头节点是有值的，比如在下图，它的<code>val</code>是1)，长度为n，反转该链表后，返回新链表的表头。</p><p>数据范围： 0≤10000≤<em>n</em>≤1000</p><p>要求：空间复杂度 O<em>(1) ，时间复杂度 O</em>(<em>n</em>) 。</p><p>如当输入链表{1,2,3}时，</p><p>经反转后，原链表变为{3,2,1}，所以对应的输出为{3,2,1}。</p><p>以上转换过程如下图所示：</p><p><img src="https://z1.ax1x.com/2023/11/19/piUEBKH.png" alt="4A47A0DB6E60853DEDFCFDF08A5CA249"></p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,2,3&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;3,2,1&#125;</span><br></pre></td></tr></table></figure><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">空链表则输出空                 </span><br></pre></td></tr></table></figure><h2 id="题解1"><a href="#题解1" class="headerlink" title="题解1"></a>题解1</h2><p>使用栈当做中转站，把每个节点倒过来，然后重新拼成一个新链表</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param head ListNode类</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        stack&lt;ListNode*&gt; st;</span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            st.<span class="built_in">push</span>(p);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* tail = st.<span class="built_in">top</span>();</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        ListNode* res = tail;</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            ListNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            tail-&gt;next = node;</span><br><span class="line">            tail = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后的节点为原来的头结点，需要将其的下一个节点设为空，否则会构成环</span></span><br><span class="line">        tail-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://z1.ax1x.com/2023/11/16/pit8EWR.png" alt="构成环"></p><p><strong>题目细节</strong></p><p>结点3为<code>tail</code>变量，经过<code>while</code>循环，会使用尾插法将结点1和2都插入到3后面，这期间，结点2和3和<code>next</code>指针都经过了处理，而最后一个结点1的<code>next</code>指针（结点1的<code>next</code>原本是指向结点2的）却没有处理，因为此时已经跳出了<code>while</code>循环。如果不将结点1的下一个结点置为空，则会在结点1和2之间形成环，程序输出会如下：</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">3,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2...</span><br></pre></td></tr></table></figure><h2 id="题解2"><a href="#题解2" class="headerlink" title="题解2"></a>题解2</h2><p>使用两个结点求解，将摘下来的每一个结点使用头插法插入到新的链表中，如图画了程序两步的情况</p><p><img src="https://z1.ax1x.com/2023/11/17/pit5oeP.png" alt="反转链表"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *int val;</span></span><br><span class="line"><span class="comment"> *struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param head ListNode类 </span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        ListNode* newHead = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            ListNode* tmp = head-&gt;next;</span><br><span class="line">            head-&gt;next = newHead;</span><br><span class="line">            newHead = head;</span><br><span class="line">            head = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>扩展思维</strong></p><p>其实用<code>vector</code>容器顺序存放各个结点，然后出来的时候使用头插法新建链表也可以，这样分离结点的时候可能不太容易出错</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param head ListNode类</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        vector&lt;ListNode*&gt; vt;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="comment">//分离结点</span></span><br><span class="line">            ListNode* tmp = head-&gt;next;</span><br><span class="line">            head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            vt.<span class="built_in">push_back</span>(head);</span><br><span class="line">            head = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//新建链表</span></span><br><span class="line">        ListNode* res = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> node : vt) &#123;</span><br><span class="line">            node-&gt;next = res;</span><br><span class="line">            res = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同样也可以不使用<code>vector</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param head ListNode类</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* res = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            ListNode* tmp = head-&gt;next;</span><br><span class="line">            head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            ListNode* node = head;</span><br><span class="line"></span><br><span class="line">            node-&gt;next = res;</span><br><span class="line">            res = node;</span><br><span class="line"></span><br><span class="line">            head = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>tip：之前头插法一直记错了，如果头结点没有数据的话，可以使用下面的操作</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">node-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = node;</span><br></pre></td></tr></table></figure><p>但是如果头结点有值，就要用下列的插入</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">node-&gt;next = head；</span><br><span class="line">head = node;</span><br></pre></td></tr></table></figure><h2 id="解法3"><a href="#解法3" class="headerlink" title="解法3"></a>解法3</h2><p>原地反转，用三个指针逆置</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *int val;</span></span><br><span class="line"><span class="comment"> *struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param head ListNode类 </span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        ListNode* p = head-&gt;next, *pre = head;</span><br><span class="line">        pre-&gt;next = <span class="literal">nullptr</span>;<span class="comment">//第一个结点的next指针要预先处理，循环只能处理后面结点的next指针</span></span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            ListNode* tmp = p-&gt;next;</span><br><span class="line">            <span class="comment">//反转</span></span><br><span class="line">            p-&gt;next = pre;</span><br><span class="line"></span><br><span class="line">            pre = p;</span><br><span class="line">            p = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解法4"><a href="#解法4" class="headerlink" title="解法4"></a>解法4</h2><p>使用递归解决</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param head ListNode类</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* cur_next = head-&gt;next;</span><br><span class="line">        ListNode* newHead = <span class="built_in">ReverseList</span>(cur_next);</span><br><span class="line">        cur_next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;给定一个单链表的头结点&lt;code&gt;pHead&lt;/code&gt;(该头节点是有值的，比如在下图，它的&lt;code&gt;val&lt;/code&gt;是1)，长度为</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://ruvikm.gitee.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>JZ6 从尾到头打印链表</title>
    <link href="https://ruvikm.gitee.io/posts/2423e4d.html"/>
    <id>https://ruvikm.gitee.io/posts/2423e4d.html</id>
    <published>2023-11-15T12:15:13.000Z</published>
    <updated>2024-05-03T12:52:03.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>输入一个链表的头节点，按链表从尾到头的顺序返回每个节点的值（用数组返回）。</p><p>如输入{1,2,3}的链表如下图:</p><p><img src="https://z1.ax1x.com/2023/11/19/piUE8bR.png" alt="103D87B58E565E87DEFA9DD0B822C55F"></p><p>返回一个数组为[3,2,1]</p><p>0 &lt;= 链表长度 &lt;= 10000</p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,2,3&#125;</span><br></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[3,2,1]</span><br></pre></td></tr></table></figure><h2 id="算法思路1"><a href="#算法思路1" class="headerlink" title="算法思路1"></a>算法思路1</h2><p>主要考察翻转数组的操作，把链表的数据放到数组里，然后在数组里操作，一个比较简单的操作是调用C++的库函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; vt;</span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            vt.<span class="built_in">push_back</span>(p-&gt;val);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(vt.<span class="built_in">begin</span>(),vt.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> vt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="算法思路2"><a href="#算法思路2" class="headerlink" title="算法思路2"></a>算法思路2</h2><p>使用递归的方式解决，递归出口是链表循环到末尾，每次递归做的事就是把当前结点的值放到<code>vector</code>容器中，由于递归到末尾才会开始存放结点（<code>res.push_back(head-&gt;val);</code>）的值，时间顺序正好为从后往前的存放，符合题目要求的逆序</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  struct ListNode &#123;</span></span><br><span class="line"><span class="comment">*        int val;</span></span><br><span class="line"><span class="comment">*        struct ListNode *next;</span></span><br><span class="line"><span class="comment">*        ListNode(int x) :</span></span><br><span class="line"><span class="comment">*              val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">*        &#125;</span></span><br><span class="line"><span class="comment">*  &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(ListNode* head,vector&lt;<span class="type">int</span>&gt; &amp;res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="built_in">reverse</span>(head-&gt;next,res);</span><br><span class="line">            res.<span class="built_in">push_back</span>(head-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">reverse</span>(head,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;输入一个链表的头节点，按链表从尾到头的顺序返回每个节点的值（用数组返回）。&lt;/p&gt;
&lt;p&gt;如输入{1,2,3}的链表如下图:&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://ruvikm.gitee.io/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
