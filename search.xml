<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021版王道数据结构课后代码题全部实现</title>
    <url>/posts/e8a275bc.html</url>
    <content><![CDATA[<p>历时2个多月，把21版王道数据结构的课后代码题全部实现了一遍，一共96道题</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/2021031610114889.png" alt="题目总数"></p>
<p><img src="https://img-blog.csdnimg.cn/20210316101716209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="3个月"></p>
<p>文件目录结构：</p>
<p><img src="https://img-blog.csdnimg.cn/20210316101132171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="目录结构"></p>
<ul>
<li>编程环境：Visual Studio 2019</li>
<li>编程语言：C/C++</li>
</ul>
<p>其中，每道题都是一个独立的cpp文件，可以独立运行。在树和图的章节，会有输入样例和对应的示例图。</p>
<p>cpp文件结构</p>
<ol>
<li>建立要求的数据结构</li>
<li>题目说明</li>
<li>题目要求的代码</li>
<li>运行示例</li>
</ol>
<p>以树章节的题目示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region 构造链式存储的表达式二叉树</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType char</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _for(i,a,b) for(int i=(a);i&lt;(b);i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span> &#123; <span class="comment">//树的结点</span></span><br><span class="line">    ElemType  data[<span class="number">10</span>];</span><br><span class="line">    node* left;</span><br><span class="line">    node* right;</span><br><span class="line">&#125;Node, * BiTree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree&amp; T)</span><span class="comment">//要改变指针，C++可以把指针的引用传进来</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElemType ch;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; ch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        T = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        T = <span class="keyword">new</span> Node;</span><br><span class="line">        T-&gt;data[<span class="number">0</span>] = ch;</span><br><span class="line">        <span class="built_in">CreateBiTree</span>(T-&gt;left);</span><br><span class="line">        <span class="built_in">CreateBiTree</span>(T-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">(Node* BiNode)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; BiNode-&gt;data[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T) &#123;</span><br><span class="line">        <span class="built_in">InOrder</span>(T-&gt;left);</span><br><span class="line">        <span class="built_in">visit</span>(T);</span><br><span class="line">        <span class="built_in">InOrder</span>(T-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//P151.20</span></span><br><span class="line"><span class="comment">//【2017统考真题】请设计一个算法, 将给定的表达式树(二叉树)转换为等价的中缀表</span></span><br><span class="line"><span class="comment">//达式(通过括号反映操作符的计算次序)并输出。例如, 当下列两棵表达式树作为算法</span></span><br><span class="line"><span class="comment">//的输入时输出的等价中缀表达式分别为(a+b)*(c*(-d))和(a*b)+(-(c-α))</span></span><br><span class="line"><span class="comment">//二叉树结点定义如下：</span></span><br><span class="line"><span class="comment">//typedef struct node &#123;</span></span><br><span class="line"><span class="comment">//      char data[10];   //存储操作数或操作符</span></span><br><span class="line"><span class="comment">//      struct node* left,*right;</span></span><br><span class="line"><span class="comment">//&#125;BTree</span></span><br><span class="line"><span class="comment">//要求</span></span><br><span class="line"><span class="comment">//1)给出算法的基本设计思想</span></span><br><span class="line"><span class="comment">//2)根据设计思想, 采用C或C++语言描述算法, 关键之处给出注释。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">queue&lt;Node*&gt; q;</span><br><span class="line">stack&lt;Node*&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MedEx</span><span class="params">(BiTree T,<span class="type">int</span> deep)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!T)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!T-&gt;left &amp;&amp; !T-&gt;right)</span><br><span class="line">        cout &lt;&lt; T-&gt;data[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (deep &gt; <span class="number">1</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;(&quot;</span>;</span><br><span class="line">        <span class="built_in">MedEx</span>(T-&gt;left, deep + <span class="number">1</span>);</span><br><span class="line">        cout &lt;&lt; T-&gt;data[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">MedEx</span>(T-&gt;right, deep + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (deep &gt; <span class="number">1</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ToMedEx</span><span class="params">(BiTree T)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">MedEx</span>(T, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BiTree T;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入先序遍历顺序下各个结点的值,&#x27;#&#x27;表示没有结点:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//  input(1): * + a # # b # # * c # # - # d # #</span></span><br><span class="line"><span class="comment">//  input(2): + * a # # b # # - # - c # # d # #</span></span><br><span class="line">    <span class="built_in">CreateBiTree</span>(T);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;中序遍历：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">InOrder</span>(T);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">ToMedEx</span>(T);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(1)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                                        *</span></span><br><span class="line"><span class="comment">                                     +     *</span></span><br><span class="line"><span class="comment">                                    a b   c -</span></span><br><span class="line"><span class="comment">                                             d</span></span><br><span class="line"><span class="comment">(2)</span></span><br><span class="line"><span class="comment">                                        +</span></span><br><span class="line"><span class="comment">                                    *       _</span></span><br><span class="line"><span class="comment">                                  a   b        -</span></span><br><span class="line"><span class="comment">                                             c   d</span></span><br><span class="line"><span class="comment">                                         </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>emm也是记录一下考研期间重新学习数据结构的过程，留个回忆~<br>一定要一战成硕啊！ </p>
<p> 代码仅供个人研究，及交流学习使用，版权归原作者所有，如果有侵犯到您的权利，请及时联系删除。  </p>
<p>最后附上代码地址，顺便点个star呗~<br><a href="https://github.com/Ruvikm/Wangdao-Data-Structures">Wangdao-Data-Structures</a></p>
]]></content>
      <categories>
        <category>刷题笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>C_C++用宏定义简化for循环</title>
    <url>/posts/73072655.html</url>
    <content><![CDATA[<p>记录一下for循环简化<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _for(i,a,b) for( int i=(a); i&lt;(b); ++i)</span></span><br></pre></td></tr></table></figure><br>这样<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br></pre></td></tr></table></figure><br>就简化为了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">_for(i, <span class="number">0</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Host文件备份</title>
    <url>/posts/d9b93622.html</url>
    <content><![CDATA[<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="params">#</span> Copyright (c) 1993-2009 Microsoft Corp.</span><br><span class="line"><span class="params">#</span></span><br><span class="line"><span class="params">#</span> This is a sample HOSTS file used by Microsoft TCP/IP for Windows.</span><br><span class="line"><span class="params">#</span></span><br><span class="line"><span class="params">#</span> This file contains the mappings of IP addresses to host names. Each</span><br><span class="line"><span class="params">#</span> entry should be kept on an individual line. The IP address should</span><br><span class="line"><span class="params">#</span> be placed in the first column followed by the corresponding host name.</span><br><span class="line"><span class="params">#</span> The IP address and the host name should be separated by at least one</span><br><span class="line"><span class="params">#</span> space.</span><br><span class="line"><span class="params">#</span></span><br><span class="line"><span class="params">#</span> Additionally, comments (such as these) may be inserted on individual</span><br><span class="line"><span class="params">#</span> lines or following the machine name denoted by a &#x27;<span class="params">#</span>&#x27; symbol.</span><br><span class="line"><span class="params">#</span></span><br><span class="line"><span class="params">#</span> For example:</span><br><span class="line"><span class="params">#</span></span><br><span class="line"><span class="params">#</span> 102.54.94.97 rhino.acme.com <span class="params">#</span> source server</span><br><span class="line"><span class="params">#</span> 38.25.63.10 x.acme.com <span class="params">#</span> x client host</span><br><span class="line"><span class="params">#</span> localhost name resolution is handled within DNS itself.</span><br><span class="line"><span class="params">#</span> 127.0.0.1 localhost</span><br><span class="line"><span class="params">#</span> ::1 localhost</span><br><span class="line"></span><br><span class="line"><span class="params">#</span> Github</span><br><span class="line">140.82.114.4 github.com</span><br><span class="line">199.232.69.194 github.global.ssl.fastly.net</span><br><span class="line">185.199.108.153 assets-cdn.github.com</span><br><span class="line">185.199.110.153 assets-cdn.github.com</span><br><span class="line">185.199.111.153 assets-cdn.github.com</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Centos 7常用操作记录</title>
    <url>/posts/4c414756.html</url>
    <content><![CDATA[<h2 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h2><h3 id="搜索某一个进程-以进程Server为例"><a href="#搜索某一个进程-以进程Server为例" class="headerlink" title="搜索某一个进程(以进程Server为例)"></a>搜索某一个进程(以进程Server为例)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep 进程名 <span class="comment"># 根据进程名查看进程信息</span></span><br><span class="line"></span><br><span class="line">netstat -tunlp | grep 端口号 <span class="comment"># 根据端口查看对应进程，查看占用8080端口的进程id</span></span><br></pre></td></tr></table></figure>
<p>举例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep Server</span><br><span class="line"></span><br><span class="line">netstat -tunlp | grep 8080</span><br></pre></td></tr></table></figure>
<h3 id="关闭进程"><a href="#关闭进程" class="headerlink" title="关闭进程"></a>关闭进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 端口号</span><br></pre></td></tr></table></figure>
<p>举例：例如要关闭端口号为8088的进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 8088</span><br></pre></td></tr></table></figure>
<h2 id="防火墙相关"><a href="#防火墙相关" class="headerlink" title="防火墙相关"></a>防火墙相关</h2><h3 id="放行端口"><a href="#放行端口" class="headerlink" title="放行端口"></a>放行端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=4568/tcp --permanent   <span class="comment"># 开放4568端口</span></span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=public --remove-port=4567/tcp --permanent  <span class="comment">#关闭4567端口</span></span><br><span class="line"></span><br><span class="line">firewall-cmd --reload   <span class="comment"># 配置立即生效</span></span><br></pre></td></tr></table></figure>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>查看当前命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
  </entry>
  <entry>
    <title>JZ24 反转链表</title>
    <url>/posts/628ce84.html</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给定一个单链表的头结点<code>pHead</code>(该头节点是有值的，比如在下图，它的<code>val</code>是1)，长度为n，反转该链表后，返回新链表的表头。</p>
<p>数据范围： 0≤10000≤<em>n</em>≤1000</p>
<p>要求：空间复杂度 O<em>(1) ，时间复杂度 O</em>(<em>n</em>) 。</p>
<p>如当输入链表{1,2,3}时，</p>
<p>经反转后，原链表变为{3,2,1}，所以对应的输出为{3,2,1}。</p>
<p>以上转换过程如下图所示：</p>
<p><img src="https://z1.ax1x.com/2023/11/19/piUEBKH.png" alt="4A47A0DB6E60853DEDFCFDF08A5CA249"></p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,2,3&#125;</span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;3,2,1&#125;</span><br></pre></td></tr></table></figure>
<h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">空链表则输出空                 </span><br></pre></td></tr></table></figure>
<h2 id="题解1"><a href="#题解1" class="headerlink" title="题解1"></a>题解1</h2><p>使用栈当做中转站，把每个节点倒过来，然后重新拼成一个新链表</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param head ListNode类</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        stack&lt;ListNode*&gt; st;</span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            st.<span class="built_in">push</span>(p);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* tail = st.<span class="built_in">top</span>();</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        ListNode* res = tail;</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            ListNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            tail-&gt;next = node;</span><br><span class="line">            tail = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后的节点为原来的头结点，需要将其的下一个节点设为空，否则会构成环</span></span><br><span class="line">        tail-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="https://z1.ax1x.com/2023/11/16/pit8EWR.png" alt="构成环"></p>
<p><strong>题目细节</strong></p>
<p>结点3为<code>tail</code>变量，经过<code>while</code>循环，会使用尾插法将结点1和2都插入到3后面，这期间，结点2和3和<code>next</code>指针都经过了处理，而最后一个结点1的<code>next</code>指针（结点1的<code>next</code>原本是指向结点2的）却没有处理，因为此时已经跳出了<code>while</code>循环。如果不将结点1的下一个结点置为空，则会在结点1和2之间形成环，程序输出会如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">3,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2...</span><br></pre></td></tr></table></figure>
<h2 id="题解2"><a href="#题解2" class="headerlink" title="题解2"></a>题解2</h2><p>使用两个结点求解，将摘下来的每一个结点使用头插法插入到新的链表中，如图画了程序两步的情况</p>
<p><img src="https://z1.ax1x.com/2023/11/17/pit5oeP.png" alt="反转链表"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *	int val;</span></span><br><span class="line"><span class="comment"> *	struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *	ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param head ListNode类 </span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        ListNode* newHead = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            ListNode* tmp = head-&gt;next;</span><br><span class="line">            head-&gt;next = newHead;</span><br><span class="line">            newHead = head;</span><br><span class="line">            head = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>扩展思维</strong></p>
<p>其实用<code>vector</code>容器顺序存放各个结点，然后出来的时候使用头插法新建链表也可以，这样分离结点的时候可能不太容易出错</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param head ListNode类</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        vector&lt;ListNode*&gt; vt;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="comment">//分离结点</span></span><br><span class="line">            ListNode* tmp = head-&gt;next;</span><br><span class="line">            head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            vt.<span class="built_in">push_back</span>(head);</span><br><span class="line">            head = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//新建链表</span></span><br><span class="line">        ListNode* res = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> node : vt) &#123;</span><br><span class="line">            node-&gt;next = res;</span><br><span class="line">            res = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>同样也可以不使用<code>vector</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param head ListNode类</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* res = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            ListNode* tmp = head-&gt;next;</span><br><span class="line">            head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            ListNode* node = head;</span><br><span class="line"></span><br><span class="line">            node-&gt;next = res;</span><br><span class="line">            res = node;</span><br><span class="line"></span><br><span class="line">            head = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>tip：之前头插法一直记错了，如果头结点没有数据的话，可以使用下面的操作</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">node-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = node;</span><br></pre></td></tr></table></figure>
<p>但是如果头结点有值，就要用下列的插入</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">node-&gt;next = head；</span><br><span class="line">head = node;</span><br></pre></td></tr></table></figure>
<h2 id="解法3"><a href="#解法3" class="headerlink" title="解法3"></a>解法3</h2><p>原地反转，用三个指针逆置</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *	int val;</span></span><br><span class="line"><span class="comment"> *	struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *	ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param head ListNode类 </span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        ListNode* p = head-&gt;next, *pre = head;</span><br><span class="line">        pre-&gt;next = <span class="literal">nullptr</span>;<span class="comment">//第一个结点的next指针要预先处理，循环只能处理后面结点的next指针</span></span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            ListNode* tmp = p-&gt;next;</span><br><span class="line">            <span class="comment">//反转</span></span><br><span class="line">            p-&gt;next = pre;</span><br><span class="line"></span><br><span class="line">            pre = p;</span><br><span class="line">            p = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="解法4"><a href="#解法4" class="headerlink" title="解法4"></a>解法4</h2><p>使用递归解决</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param head ListNode类</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* cur_next = head-&gt;next;</span><br><span class="line">        ListNode* newHead = <span class="built_in">ReverseList</span>(cur_next);</span><br><span class="line">        cur_next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>刷题笔记</category>
      </categories>
  </entry>
  <entry>
    <title>JZ22 链表中倒数最后k个结点</title>
    <url>/posts/8f3b69e8.html</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>输入一个长度为 n 的链表，设链表中的元素的值为 a_i ，返回该链表中倒数第k个节点。</p>
<p>如果该链表长度小于k，请返回一个长度为 0 的链表。</p>
<p>数据范围：</p>
<script type="math/tex; mode=display">
0 \leq n \leq 10^5,0 \leq a_i \leq 10^9,0 \leq k \leq 10^9</script><p>要求：空间复杂度 <em>O</em>(n)，时间复杂度 O<em>(</em>n)</p>
<p>进阶：空间复杂度O(1)，时间复杂度 O(n)</p>
<p>例如输入{1,2,3,4,5},2时，对应的链表结构如下图所示：</p>
<p><img src="https://z1.ax1x.com/2023/11/20/piap43j.png" alt="img"></p>
<p>其中蓝色部分为该链表的最后2个结点，所以返回倒数第2个结点（也即结点值为4的结点）即可，系统会打印后面所有的节点来比较。</p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">&#123;1,2,3,4,5&#125;,2</span><br><span class="line">返回值：</span><br><span class="line">&#123;4,5&#125;</span><br><span class="line">说明：</span><br><span class="line">返回倒数第2个节点4，系统会打印后面所有的节点来比较。 </span><br></pre></td></tr></table></figure>
<h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">&#123;2&#125;,8</span><br><span class="line">返回值：</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="题解1"><a href="#题解1" class="headerlink" title="题解1"></a>题解1</h2><p>首先求出链表的长度<code>n</code>，从题目的倒数第<code>k</code>个结点，推出是正数的第<code>n - k</code>个结点。若<code>n - k &lt; 0</code>，则返回空值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param pHead ListNode类</span></span><br><span class="line"><span class="comment">     * @param k int整型</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">FindKthToTail</span><span class="params">(ListNode* pHead, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">        ListNode* p = pHead;</span><br><span class="line">        <span class="keyword">for</span> (; p != <span class="literal">nullptr</span>; p = p-&gt;next, len++);</span><br><span class="line">        <span class="type">int</span> step = len - k;</span><br><span class="line">        <span class="keyword">if</span> (step &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (step--) &#123;</span><br><span class="line">            pHead = pHead-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="题解2"><a href="#题解2" class="headerlink" title="题解2"></a>题解2</h2><p>用一个栈处理，由于栈是后进先出的，所以正好符合题意的倒数。倒数第k个结点就意味着栈需要弹出k次即可。</p>
<p>这里有一个细节，栈都弹完了，k还是大于等于0的，则应该返回空值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param pHead ListNode类</span></span><br><span class="line"><span class="comment">     * @param k int整型</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">FindKthToTail</span><span class="params">(ListNode* pHead, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        stack&lt;ListNode*&gt; st;</span><br><span class="line">        ListNode* res;</span><br><span class="line">        <span class="keyword">if</span>(k &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span> (pHead != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            st.<span class="built_in">push</span>(pHead);</span><br><span class="line">            pHead = pHead-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (k-- &amp;&amp; !st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            res = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>刷题笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Java实现鲜花销售系统</title>
    <url>/posts/6a061fac.html</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><h3 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h3><ol>
<li>IDE：IDEA</li>
<li>数据库：Mysql 8.0.22</li>
<li>JDK:1.8</li>
<li><p>界面设计插件：JFormDesigner</p>
<p><strong>登录界面</strong><br><img src="https://img-blog.csdnimg.cn/20210107222234507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="登录"><br><strong>顾客界面</strong><br><img src="https://img-blog.csdnimg.cn/20210107222308547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210107222308532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210107222308539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210107222308538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210107222308489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ol>
<p><strong>后代管理界面</strong><br><img src="https://img-blog.csdnimg.cn/20210107222348530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210107222348518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210107222348524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210107222348521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>代码结构</strong><br><img src="https://img-blog.csdnimg.cn/20210107222558431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><strong><a href="https://github.com/Ruvikm/Flower">源码链接</a></strong></p>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JZ6 从尾到头打印链表</title>
    <url>/posts/2423e4d.html</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>输入一个链表的头节点，按链表从尾到头的顺序返回每个节点的值（用数组返回）。</p>
<p>如输入{1,2,3}的链表如下图:</p>
<p><img src="https://z1.ax1x.com/2023/11/19/piUE8bR.png" alt="103D87B58E565E87DEFA9DD0B822C55F"></p>
<p>返回一个数组为[3,2,1]</p>
<p>0 &lt;= 链表长度 &lt;= 10000</p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,2,3&#125;</span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[3,2,1]</span><br></pre></td></tr></table></figure>
<h2 id="算法思路1"><a href="#算法思路1" class="headerlink" title="算法思路1"></a>算法思路1</h2><p>主要考察翻转数组的操作，把链表的数据放到数组里，然后在数组里操作，一个比较简单的操作是调用C++的库函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; vt;</span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            vt.<span class="built_in">push_back</span>(p-&gt;val);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(vt.<span class="built_in">begin</span>(),vt.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> vt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="算法思路2"><a href="#算法思路2" class="headerlink" title="算法思路2"></a>算法思路2</h2><p>使用递归的方式解决，递归出口是链表循环到末尾，每次递归做的事就是把当前结点的值放到<code>vector</code>容器中，由于递归到末尾才会开始存放结点（<code>res.push_back(head-&gt;val);</code>）的值，时间顺序正好为从后往前的存放，符合题目要求的逆序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  struct ListNode &#123;</span></span><br><span class="line"><span class="comment">*        int val;</span></span><br><span class="line"><span class="comment">*        struct ListNode *next;</span></span><br><span class="line"><span class="comment">*        ListNode(int x) :</span></span><br><span class="line"><span class="comment">*              val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">*        &#125;</span></span><br><span class="line"><span class="comment">*  &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(ListNode* head,vector&lt;<span class="type">int</span>&gt; &amp;res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="built_in">reverse</span>(head-&gt;next,res);</span><br><span class="line">            res.<span class="built_in">push_back</span>(head-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">reverse</span>(head,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>刷题笔记</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 46. Permutations</title>
    <url>/posts/d5cf2c57.html</url>
    <content><![CDATA[<h2 id="Given-a-collection-of-distinct-integers-return-all-possible-permutations"><a href="#Given-a-collection-of-distinct-integers-return-all-possible-permutations" class="headerlink" title="Given a collection of distinct integers, return all possible permutations."></a>Given a collection of distinct integers, return all possible permutations.</h2><p>Example:</p>
<p>Input: [1,2,3]<br>Output:<br>[<br>  [1,2,3],<br>  [1,3,2],<br>  [2,1,3],<br>  [2,3,1],<br>  [3,1,2],<br>  [3,2,1]<br>]</p>
<p><a href="https://leetcode-cn.com/problems/permutations/">题目链接</a></p>
<p>看了看大佬们的讲解，终于自己做出来一道回溯的题。<br>回溯大致分为三步：</p>
<ol>
<li>终止条件：回溯到什么情况就可以加入答案列表</li>
<li>剪枝条件：什么情况下就可以停止回溯直接continue</li>
<li>回溯范围：如何将当前层和下一层联系起来继续递归下去</li>
</ol>
<p>对于这道全排列的题，我们需要一个res保存答案，一个temp参与回溯，当达到终于条件也就是temp的大小与nums的相等时便把temp加入res中;<br>然后需要一个check数组来标记使用过的元素，当一个数已经被使用过便把对应的位置的值设为1，这样避免了一个数重复使用多次。<br>由于这道题是要列出所有的排列结果，所以需要全部遍历</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,vector&lt;<span class="type">int</span>&gt;&amp; temp,vector&lt;<span class="type">int</span>&gt;&amp; check)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.<span class="built_in">size</span>()==nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(temp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check[i])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            check[i]=<span class="number">1</span>;</span><br><span class="line">            temp.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">dfs</span>(nums,temp,check);</span><br><span class="line">            temp.<span class="built_in">pop_back</span>();</span><br><span class="line">            check[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">check</span><span class="params">(nums.size(),<span class="number">0</span>)</span></span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">        <span class="built_in">dfs</span>(nums,temp,check);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>刷题笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 131. Palindrome Partitioning</title>
    <url>/posts/8b4653dd.html</url>
    <content><![CDATA[<p>Given a string s, partition s such that every substring of the partition is a palindrome.</p>
<p>Return all possible palindrome partitioning of s.</p>
<p>Example:</p>
<p>Input: “aab”<br>Output:<br>[<br>  [“aa”,”b”],<br>  [“a”,”a”,”b”]<br>]</p>
<p><a href="https://leetcode-cn.com/problems/palindrome-partitioning/">题目链接</a></p>
<p>可以回溯法切割出来字串，然后判断是否为回文串</p>
<p>由于要找出来全部的字串，所有回溯的范围应该是全部遍历一遍。使用for循环进行横向的遍历，for循环结束的条件就是本层集合的个数（也就是树中孩子的数量），cur代表当前要切割的位置</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=cur;i&lt;s.<span class="built_in">length</span>();i++)</span><br></pre></td></tr></table></figure>
<p>然后进行纵向的遍历，每当切割出来一个回文串，就把其放入tmp中，然后进行回溯。否则跳过。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">Ispalindrome</span>(s,cur,i))&#123;</span><br><span class="line">                string item=s.<span class="built_in">substr</span>(cur,i-cur+<span class="number">1</span>);</span><br><span class="line">                tmp.<span class="built_in">push_back</span>(item);</span><br><span class="line">                <span class="built_in">dfs</span>(s,i+<span class="number">1</span>);</span><br><span class="line">                tmp.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<p>回溯结束的条件就是当切割点cur的大小已经大于或者等于s的大小</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(cur&gt;=s.<span class="built_in">length</span>())</span><br></pre></td></tr></table></figure>
<p>判断回文串较为简单，用两个指针分别指向字符串的头和尾，如果两个指针所指向的字母一直相等到中间，就是回文串。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Ispalindrome</span><span class="params">(string s,<span class="type">int</span> start,<span class="type">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start,j=end;i&lt;j;i++,j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]!=s[j])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>全部代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; res;</span><br><span class="line">    vector&lt;string&gt; tmp;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">const</span> string &amp;s,<span class="type">int</span> cur)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur&gt;=s.<span class="built_in">length</span>())&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=cur;i&lt;s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Ispalindrome</span>(s,cur,i))&#123;</span><br><span class="line">                string item=s.<span class="built_in">substr</span>(cur,i-cur+<span class="number">1</span>);</span><br><span class="line">                tmp.<span class="built_in">push_back</span>(item);</span><br><span class="line">                <span class="built_in">dfs</span>(s,i+<span class="number">1</span>);</span><br><span class="line">                tmp.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Ispalindrome</span><span class="params">(string s,<span class="type">int</span> start,<span class="type">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start,j=end;i&lt;j;i++,j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]!=s[j])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">partition</span>(string s) &#123;</span><br><span class="line">        tmp.<span class="built_in">clear</span>();</span><br><span class="line">        res.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">dfs</span>(s,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>刷题笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 47 Permutations II</title>
    <url>/posts/99f72c63.html</url>
    <content><![CDATA[<h2 id="Given-a-collection-of-numbers-nums-that-might-contain-duplicates-return-all-possible-unique-permutations-in-any-order"><a href="#Given-a-collection-of-numbers-nums-that-might-contain-duplicates-return-all-possible-unique-permutations-in-any-order" class="headerlink" title="Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order."></a>Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.</h2><p>Example 1:</p>
<p>Input: nums = [1,1,2]<br>Output:<br>[[1,1,2],<br> [1,2,1],<br> [2,1,1]]<br>Example 2:</p>
<p>Input: nums = [1,2,3]<br>Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</p>
<p>Constraints:</p>
<p>1 &lt;= nums.length &lt;= 8<br>-10 &lt;= nums[i] &lt;= 10</p>
<p><a href="https://leetcode-cn.com/problems/permutations-ii/">题目链接</a></p>
<p>这道题在<a href="https://blog.csdn.net/ruvikm/article/details/109636529">全排列1</a>上添加了重复的元素，所以剪枝的情况要多考虑一种。比如1，2，2’<br>2，2’与2’，2其实是一种情况，所以要舍去。<br>而对于重复的元素，一开始先排序是一个不错的选择。再排序完之后，如果当前元素和上一个元素相等并且上一个元素还没有被用过（但是后面一定会被用到造成重复)，这样的时候就要考虑剪枝</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i]==nums[i<span class="number">-1</span>]&amp;&amp;!check[i<span class="number">-1</span>])&#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>
<p>全部代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,vector&lt;<span class="type">int</span>&gt;&amp; temp,vector&lt;<span class="type">int</span>&gt;&amp; check)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp.<span class="built_in">size</span>()==nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(temp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check[i])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i]==nums[i<span class="number">-1</span>]&amp;&amp;!check[i<span class="number">-1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            check[i]=<span class="number">1</span>;</span><br><span class="line">            temp.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">dfs</span>(nums,temp,check);</span><br><span class="line">            temp.<span class="built_in">pop_back</span>();</span><br><span class="line">            check[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permuteUnique</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">check</span><span class="params">(nums.size(),<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">dfs</span>(nums,temp,check);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>刷题笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL命令行操作笔记</title>
    <url>/posts/db3a1b83.html</url>
    <content><![CDATA[<p>记录一下这段时间在WSL2上学习conda以及ubuntu的命令行指令，<del>以便以后直接粘贴复制</del></p>
<h2 id="1-wsl相关"><a href="#1-wsl相关" class="headerlink" title="1.wsl相关"></a>1.wsl相关</h2><h3 id="创建用户username"><a href="#创建用户username" class="headerlink" title="创建用户username"></a>创建用户username</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd username</span><br></pre></td></tr></table></figure>
<h3 id="给已创建的用户username设置密码"><a href="#给已创建的用户username设置密码" class="headerlink" title="给已创建的用户username设置密码"></a>给已创建的用户username设置密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd username</span><br></pre></td></tr></table></figure>
<h3 id="修改用户这个命令的相关参数"><a href="#修改用户这个命令的相关参数" class="headerlink" title="修改用户这个命令的相关参数"></a>修改用户这个命令的相关参数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<h3 id="删除用户username"><a href="#删除用户username" class="headerlink" title="删除用户username"></a>删除用户username</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">userdel username</span><br></pre></td></tr></table></figure>
<h3 id="删除用户username所在目录"><a href="#删除用户username所在目录" class="headerlink" title="删除用户username所在目录"></a>删除用户username所在目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf username</span><br></pre></td></tr></table></figure>
<h3 id="用户切换"><a href="#用户切换" class="headerlink" title="用户切换"></a>用户切换</h3><h4 id="切换到root"><a href="#切换到root" class="headerlink" title="切换到root"></a>切换到root</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -s	</span><br></pre></td></tr></table></figure>
<h4 id="切换到用户username"><a href="#切换到用户username" class="headerlink" title="切换到用户username"></a>切换到用户username</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su username</span><br><span class="line"></span><br><span class="line">eg:su ubuntu22</span><br></pre></td></tr></table></figure>
<h3 id="首先查看所有分发版本"><a href="#首先查看所有分发版本" class="headerlink" title="首先查看所有分发版本"></a>首先查看所有分发版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl -l --all  -v</span><br></pre></td></tr></table></figure>
<h3 id="关闭WSL2"><a href="#关闭WSL2" class="headerlink" title="关闭WSL2"></a>关闭WSL2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure>
<h2 id="2-Conda相关"><a href="#2-Conda相关" class="headerlink" title="2.Conda相关"></a>2.Conda相关</h2><h3 id="切换环境"><a href="#切换环境" class="headerlink" title="切换环境"></a>切换环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate cu118py310</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate tensorflow</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate NER</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate torch</span><br></pre></td></tr></table></figure>
<h3 id="查看并删除环境"><a href="#查看并删除环境" class="headerlink" title="查看并删除环境"></a>查看并删除环境</h3><h4 id="查看环境列表"><a href="#查看环境列表" class="headerlink" title="查看环境列表"></a>查看环境列表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda info --<span class="built_in">env</span></span><br></pre></td></tr></table></figure>
<h4 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda remove -n 环境名 --all</span><br><span class="line"></span><br><span class="line">eg:conda remove -n code --all</span><br></pre></td></tr></table></figure>
<h3 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n 环境名 python=版本号</span><br><span class="line"></span><br><span class="line">eg:conda create -n ChineseBERT python=3.8</span><br></pre></td></tr></table></figure>
<h3 id="退出当前环境"><a href="#退出当前环境" class="headerlink" title="退出当前环境"></a>退出当前环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate base</span><br></pre></td></tr></table></figure>
<h3 id="查看当前环境已安装的包"><a href="#查看当前环境已安装的包" class="headerlink" title="查看当前环境已安装的包"></a>查看当前环境已安装的包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure>
<h3 id="查看WSL2可用内存空间"><a href="#查看WSL2可用内存空间" class="headerlink" title="查看WSL2可用内存空间"></a>查看WSL2可用内存空间</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/meminfo</span><br></pre></td></tr></table></figure>
<h2 id="3-Docker相关"><a href="#3-Docker相关" class="headerlink" title="3.Docker相关"></a>3.Docker相关</h2><h3 id="停止Docker服务"><a href="#停止Docker服务" class="headerlink" title="停止Docker服务"></a>停止Docker服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service docker stop</span><br></pre></td></tr></table></figure>
<h3 id="开启Docker服务"><a href="#开启Docker服务" class="headerlink" title="开启Docker服务"></a>开启Docker服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure>
<h3 id="在jupyter运行TensorFlow的官方docker镜像"><a href="#在jupyter运行TensorFlow的官方docker镜像" class="headerlink" title="在jupyter运行TensorFlow的官方docker镜像"></a>在jupyter运行TensorFlow的官方docker镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --gpus all -p 8888:8888 tensorflow/tensorflow:latest-gpu-py3-jupyter</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Win11+3060Ti配置Anaconda+Cuda+Pytorch+Tenserflow环境</title>
    <url>/posts/8c838a1f.html</url>
    <content><![CDATA[<p>之前搞了一个月左右时间用WSL2跑模型，后来发现还是不太习惯（<del>其实用不明白</del>），就转成Windows了。这次也是记录一下自己配环境的过程，<del>以免下次还需要</del></p>
<h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><h3 id="下载方式"><a href="#下载方式" class="headerlink" title="下载方式"></a>下载方式</h3><ul>
<li><a href="https://www.anaconda.com/download/">Anaconda官网</a></li>
<li><a href="https://repo.anaconda.com/archive/">清华镜像下载</a></li>
</ul>
<p>tip：安装的时候注意尽量不要安装到<strong>C盘</strong>，选择<strong>Install for All Users</strong>，其他的一路<strong>next</strong>就行</p>
<p>之后配置一下环境变量，配置好如图所示，具体细节可以参考<a href="https://blog.csdn.net/weixin_43412762/article/details/129599741">这篇博客</a></p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-06%20111214.png" alt="屏幕截图 2023-06-06 111214"></p>
<h3 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h3><p>配置好在cmd中输入下列代码验证是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda -V</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-06%20112143.png" alt="屏幕截图 2023-06-06 112143"></p>
<h3 id="添加镜像源"><a href="#添加镜像源" class="headerlink" title="添加镜像源"></a>添加镜像源</h3><p>添加清华的镜像源，在<strong>Anaconda Prompt</strong>中输入下列代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/fastai/</span><br></pre></td></tr></table></figure>
<p>然后检查是否添加成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda config --show channels</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-06%20134123.png" alt="屏幕截图 2023-06-06 134123"></p>
<h2 id="安装英伟达的驱动"><a href="#安装英伟达的驱动" class="headerlink" title="安装英伟达的驱动"></a>安装英伟达的驱动</h2><p>去<a href="https://www.nvidia.cn/geforce/drivers/">英伟达官网</a>下载自己对应的显卡驱动即可，安装完成如图所示（应该中间需要注册一个NVDIA账号）</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-06%20112250.png" alt="屏幕截图 2023-06-06 112250"></p>
<h2 id="安装CUDA与cuDNN"><a href="#安装CUDA与cuDNN" class="headerlink" title="安装CUDA与cuDNN"></a>安装CUDA与cuDNN</h2><p>在此之前需要确定一下自己需要装什么版本的Pytorch和Tenserflow，这个版本是必须匹配的（之前装CUDA装的太新了导致环境就是出问题，非常麻烦，<del>活生生治好了我的低血压</del>）所以推荐CUDA版本不要太新的，<del>因为之后可能就是调包</del></p>
<h3 id="查看能装CUDA版本上限"><a href="#查看能装CUDA版本上限" class="headerlink" title="查看能装CUDA版本上限"></a>查看能装CUDA版本上限</h3><p>cmd中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-06%20125555.png" alt="屏幕截图 2023-06-06 125555"></p>
<p>说明我的CUDA版本不能超过<strong>12.2</strong></p>
<h3 id="确定要安装的版本"><a href="#确定要安装的版本" class="headerlink" title="确定要安装的版本"></a>确定要安装的版本</h3><p>Tenserflow与CUDA的对应关系，参考数据来自<strong><a href="https://www.tensorflow.org/install/source_windows?hl=zh-cn">Tenserflow官网</a></strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">版本</th>
<th style="text-align:left">Python 版本</th>
<th style="text-align:left">编译器</th>
<th style="text-align:left">构建工具</th>
<th style="text-align:left">cuDNN</th>
<th style="text-align:left">CUDA</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">tensorflow_gpu-2.6.0</td>
<td style="text-align:left">3.6-3.9</td>
<td style="text-align:left">MSVC 2019</td>
<td style="text-align:left">Bazel 3.7.2</td>
<td style="text-align:left">8.1</td>
<td style="text-align:left">11.2</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-2.5.0</td>
<td style="text-align:left">3.6-3.9</td>
<td style="text-align:left">MSVC 2019</td>
<td style="text-align:left">Bazel 3.7.2</td>
<td style="text-align:left">8.1</td>
<td style="text-align:left">11.2</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-2.4.0</td>
<td style="text-align:left">3.6-3.8</td>
<td style="text-align:left">MSVC 2019</td>
<td style="text-align:left">Bazel 3.1.0</td>
<td style="text-align:left">8.0</td>
<td style="text-align:left">11.0</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-2.3.0</td>
<td style="text-align:left">3.5-3.8</td>
<td style="text-align:left">MSVC 2019</td>
<td style="text-align:left">Bazel 3.1.0</td>
<td style="text-align:left">7.6</td>
<td style="text-align:left">10.1</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-2.2.0</td>
<td style="text-align:left">3.5-3.8</td>
<td style="text-align:left">MSVC 2019</td>
<td style="text-align:left">Bazel 2.0.0</td>
<td style="text-align:left">7.6</td>
<td style="text-align:left">10.1</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-2.1.0</td>
<td style="text-align:left">3.5-3.7</td>
<td style="text-align:left">MSVC 2019</td>
<td style="text-align:left">Bazel 0.27.1-0.29.1</td>
<td style="text-align:left">7.6</td>
<td style="text-align:left">10.1</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-2.0.0</td>
<td style="text-align:left">3.5-3.7</td>
<td style="text-align:left">MSVC 2017</td>
<td style="text-align:left">Bazel 0.26.1</td>
<td style="text-align:left">7.4</td>
<td style="text-align:left">10</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-1.15.0</td>
<td style="text-align:left">3.5-3.7</td>
<td style="text-align:left">MSVC 2017</td>
<td style="text-align:left">Bazel 0.26.1</td>
<td style="text-align:left">7.4</td>
<td style="text-align:left">10</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-1.14.0</td>
<td style="text-align:left">3.5-3.7</td>
<td style="text-align:left">MSVC 2017</td>
<td style="text-align:left">Bazel 0.24.1-0.25.2</td>
<td style="text-align:left">7.4</td>
<td style="text-align:left">10</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-1.13.0</td>
<td style="text-align:left">3.5-3.7</td>
<td style="text-align:left">MSVC 2015 update 3</td>
<td style="text-align:left">Bazel 0.19.0-0.21.0</td>
<td style="text-align:left">7.4</td>
<td style="text-align:left">10</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-1.12.0</td>
<td style="text-align:left">3.5-3.6</td>
<td style="text-align:left">MSVC 2015 update 3</td>
<td style="text-align:left">Bazel 0.15.0</td>
<td style="text-align:left">7.2</td>
<td style="text-align:left">9.0</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-1.11.0</td>
<td style="text-align:left">3.5-3.6</td>
<td style="text-align:left">MSVC 2015 update 3</td>
<td style="text-align:left">Bazel 0.15.0</td>
<td style="text-align:left">7</td>
<td style="text-align:left">9</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-1.10.0</td>
<td style="text-align:left">3.5-3.6</td>
<td style="text-align:left">MSVC 2015 update 3</td>
<td style="text-align:left">Cmake v3.6.3</td>
<td style="text-align:left">7</td>
<td style="text-align:left">9</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-1.9.0</td>
<td style="text-align:left">3.5-3.6</td>
<td style="text-align:left">MSVC 2015 update 3</td>
<td style="text-align:left">Cmake v3.6.3</td>
<td style="text-align:left">7</td>
<td style="text-align:left">9</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-1.8.0</td>
<td style="text-align:left">3.5-3.6</td>
<td style="text-align:left">MSVC 2015 update 3</td>
<td style="text-align:left">Cmake v3.6.3</td>
<td style="text-align:left">7</td>
<td style="text-align:left">9</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-1.7.0</td>
<td style="text-align:left">3.5-3.6</td>
<td style="text-align:left">MSVC 2015 update 3</td>
<td style="text-align:left">Cmake v3.6.3</td>
<td style="text-align:left">7</td>
<td style="text-align:left">9</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-1.6.0</td>
<td style="text-align:left">3.5-3.6</td>
<td style="text-align:left">MSVC 2015 update 3</td>
<td style="text-align:left">Cmake v3.6.3</td>
<td style="text-align:left">7</td>
<td style="text-align:left">9</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-1.5.0</td>
<td style="text-align:left">3.5-3.6</td>
<td style="text-align:left">MSVC 2015 update 3</td>
<td style="text-align:left">Cmake v3.6.3</td>
<td style="text-align:left">7</td>
<td style="text-align:left">9</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-1.4.0</td>
<td style="text-align:left">3.5-3.6</td>
<td style="text-align:left">MSVC 2015 update 3</td>
<td style="text-align:left">Cmake v3.6.3</td>
<td style="text-align:left">6</td>
<td style="text-align:left">8</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-1.3.0</td>
<td style="text-align:left">3.5-3.6</td>
<td style="text-align:left">MSVC 2015 update 3</td>
<td style="text-align:left">Cmake v3.6.3</td>
<td style="text-align:left">6</td>
<td style="text-align:left">8</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-1.2.0</td>
<td style="text-align:left">3.5-3.6</td>
<td style="text-align:left">MSVC 2015 update 3</td>
<td style="text-align:left">Cmake v3.6.3</td>
<td style="text-align:left">5.1</td>
<td style="text-align:left">8</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-1.1.0</td>
<td style="text-align:left">3.5</td>
<td style="text-align:left">MSVC 2015 update 3</td>
<td style="text-align:left">Cmake v3.6.3</td>
<td style="text-align:left">5.1</td>
<td style="text-align:left">8</td>
</tr>
<tr>
<td style="text-align:left">tensorflow_gpu-1.0.0</td>
<td style="text-align:left">3.5</td>
<td style="text-align:left">MSVC 2015 update 3</td>
<td style="text-align:left">Cmake v3.6.3</td>
<td style="text-align:left">5.1</td>
<td style="text-align:left">8</td>
</tr>
</tbody>
</table>
</div>
<p><strong>Pytorch与cuda的关系可以参考如下表格，具体细节可以参考<a href="https://blog.csdn.net/Williamcsj/article/details/123915652">这篇博客</a>，这里搬运了一部分</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>cuda</th>
<th>CUDAToolkit</th>
<th>pytorch</th>
</tr>
</thead>
<tbody>
<tr>
<td>11.3</td>
<td>11.3</td>
<td>1.10.1、1.10.0、1.9.1、1.9.0、1.8.1</td>
</tr>
<tr>
<td>11.1</td>
<td>11.1</td>
<td>1.10.0、1.9.1、1.9.0、1.8.1、1.8.0</td>
</tr>
<tr>
<td>11.0</td>
<td>11.0</td>
<td>1.7.1、1.7.0</td>
</tr>
<tr>
<td>10.2</td>
<td>10.2</td>
<td>1.10.1、1.10.0、1.9.1、1.9.0、1.8.1、1.8.0、1.7.1、1.7.0、1.6.0、1.5.1、1.5.0</td>
</tr>
<tr>
<td>10.1</td>
<td>10.1</td>
<td>1.7.1、1.7.0、1.6.0、1.5.1、1.5.0、1.4.0</td>
</tr>
<tr>
<td>10.0</td>
<td>10.0</td>
<td>1.2.0、1.1.0、1.0.1、1.0.0</td>
</tr>
<tr>
<td>9.2</td>
<td>9.2</td>
<td>1.7.1、1.7.0、1.6.0、1.5.1、1.5.0、1.4.0、1.2.0</td>
</tr>
<tr>
<td>9.0</td>
<td>9.0</td>
<td>1.1.0、1.0.1、1.0.0</td>
</tr>
<tr>
<td>8.0</td>
<td>8.0</td>
<td>1.0.0</td>
</tr>
</tbody>
</table>
</div>
<p>综上，我选择了如下配置</p>
<ul>
<li>CUDA : 11.0</li>
<li>CUDAToolkit : 8.0.2</li>
<li>tensorflow : 2.4.0</li>
<li>pytorch : 1.7.0</li>
</ul>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>接下来就是安装了，首先进入<a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA官网</a>，选择自己要下载的版本，点进去后选择如下（如果是较新的CUDA版本可以按需选择Win11版本的）</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-06%20115917.png" alt="屏幕截图 2023-06-06 115917"></p>
<p>再进入<a href="https://developer.nvidia.com/rdp/cudnn-archive">cuDNN官网</a>，选择自己对应的版本(这里可能需要注册一个账号)，点进入后同样选择如下</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-06%20120224.png" alt="屏幕截图 2023-06-06 120224"></p>
<p>下载后会有两个文件</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-06%20120538.png" alt="屏幕截图 2023-06-06 120538"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先安装第一个文件，刚开始弹出的路径不用管直接<strong>OK</strong>即可，后面会自动删除的，之后选择<strong>精简</strong>即可，然后一路<strong>next</strong></p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-06%20101612.png" alt="屏幕截图 2023-06-06 101612"></p>
<p>然后解压第二个文件压缩包，得到如下文件</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-06%20120844.png" alt="屏幕截图 2023-06-06 120844"></p>
<p>将<strong>bin，include文件夹中的文件</strong>，分别下列地址对应的文件夹下（以我的地址为例），遇到提示，为全部选择覆盖和替换。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.0</span><br></pre></td></tr></table></figure>
<p>需要注意的是，lib文件夹里的所有文件，需要复制到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.0\lib\x64</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-06%20121442.png" alt="屏幕截图 2023-06-06 121442"></p>
<p>这块的具体细节可以参考一下<a href="https://blog.csdn.net/Ayu147258/article/details/129192078">这篇博客</a></p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>进入环境变量设置在系统变量中加入以下几个环境，<strong>一定要按照自己的路径！！！</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CUDA_PATH：C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.0</span><br><span class="line"></span><br><span class="line">CUDA_PATH_V11_3：C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.0</span><br><span class="line"></span><br><span class="line">CUDA_BIN_PATH：%CUDA_PATH%\bin</span><br><span class="line"></span><br><span class="line">CUDA_LIB_PATH：%CUDA_PATH%\lib\x64</span><br><span class="line"></span><br><span class="line">CUDA_SDK_PATH：C:\ProgramData\NVIDIA Corporation\CUDA Samples\v11.0</span><br><span class="line"></span><br><span class="line">CUDA_SDK_BIN_PATH：%CUDA_SDK_PATH%\bin\win64</span><br><span class="line"></span><br><span class="line">CUDA_SDK_LIB_PATH：%CUDA_SDK_PATH%\common\lib\x64</span><br></pre></td></tr></table></figure>
<p>配置好如下：</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-06%20124409.png" alt="屏幕截图 2023-06-06 124409"><br>在系统变量的Path中加入如下环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Program Files\NVIDIA Corporation\Nsight Compute 2020.1.0\</span><br><span class="line"></span><br><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.0\bin</span><br><span class="line"></span><br><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.0\libnvvp</span><br><span class="line"></span><br><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.0\lib\x64</span><br><span class="line"></span><br><span class="line">C:\ProgramData\NVIDIA Corporation\CUDA Samples\v11.0\bin\win64</span><br><span class="line"></span><br><span class="line">C:\ProgramData\NVIDIA Corporation\CUDA Samples\v11.0\common\lib\x64</span><br><span class="line"></span><br><span class="line">C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR</span><br><span class="line"></span><br><span class="line">C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common</span><br><span class="line"></span><br><span class="line">C:\Program Files\NVIDIA Corporation\Nsight Compute 2020.1.0</span><br></pre></td></tr></table></figure>
<p>配置好如下：</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-06%20124642.png" alt="屏幕截图 2023-06-06 124642"></p>
<h3 id="验证是否成功-1"><a href="#验证是否成功-1" class="headerlink" title="验证是否成功"></a>验证是否成功</h3><p>之后重启电脑，输入以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvcc -V</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-06%20124922.png" alt="屏幕截图 2023-06-06 124922"></p>
<h2 id="安装Pytorch"><a href="#安装Pytorch" class="headerlink" title="安装Pytorch"></a>安装Pytorch</h2><p>Pytorch版本最好也不要安装很细新的，新的版本要求会变多，<strong>Run</strong>一下别人的代码经常会发现一片红通通的报错</p>
<h3 id="新建Pytorch环境"><a href="#新建Pytorch环境" class="headerlink" title="新建Pytorch环境"></a>新建Pytorch环境</h3><p>首先用管理员的权限打开<strong>Anaconda Prompt</strong>，新建一个环境，这里采用的是Python3.8版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -n Pytorch python=3.8</span><br></pre></td></tr></table></figure>
<p>激活环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda activate Pytorch</span><br></pre></td></tr></table></figure>
<h3 id="下载Pytorch"><a href="#下载Pytorch" class="headerlink" title="下载Pytorch"></a>下载Pytorch</h3><p>首先进入<a href="https://pytorch.org/get-started/previous-versions/#installing-previous-versions-of-pytorch">Pytorch官网</a>，找到适合自己的版本进行下载，我选择的如下</p>
<p><img src="https://s1.ax1x.com/2023/07/22/pCbXIns.png" alt="image-20230722100054418"></p>
<p>将这个代码复制到<strong>Anaconda Prompt</strong>中即可安装（紧接着上述代码，确保自己在刚刚新建的环境中运行）</p>
<p>主要这里一定要去掉代码中的<strong>-c pytorch</strong>，安装的时候才会默认从镜像源下载相应的包。处理完我要运行的代码如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install pytorch==1.7.1 torchvision==0.8.2 torchaudio==0.7.2 cudatoolkit=11.0</span><br></pre></td></tr></table></figure>
<p>如果下载过慢或者下载不了，可以找到如下文件。（用户是你自己的用户名）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\用户\.condarc</span><br></pre></td></tr></table></figure>
<p>用编辑器打开，把最后一行<strong>defaults</strong>注销了</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-06%20133714.png" alt="屏幕截图 2023-06-06 133714"></p>
<p>看到<strong>done</strong>即表示安装成功</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-06%20134320.png" alt="屏幕截图 2023-06-06 134320"></p>
<h3 id="验证是否成功-2"><a href="#验证是否成功-2" class="headerlink" title="验证是否成功"></a>验证是否成功</h3><p><strong>Anaconda Prompt</strong>输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">torch.cuda.is_available()</span><br><span class="line">torch.cuda.get_device_name(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>若输出为True并显示显卡名称，则代表安装成功。</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-06%20150654.png" alt="屏幕截图 2023-06-06 150654"></p>
<h2 id="安装Tenserflow"><a href="#安装Tenserflow" class="headerlink" title="安装Tenserflow"></a>安装Tenserflow</h2><p>Tenserflow是我报错最多的库，版本不合适真的很头疼。所以建议也不要装很新的。</p>
<h3 id="创建Tenserflow环境"><a href="#创建Tenserflow环境" class="headerlink" title="创建Tenserflow环境"></a>创建Tenserflow环境</h3><p>这里我依旧采用的3.8版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n Tenserflow python=3.8</span><br></pre></td></tr></table></figure>
<p>激活环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate Tenserflow</span><br></pre></td></tr></table></figure>
<h3 id="下载Tenserflow"><a href="#下载Tenserflow" class="headerlink" title="下载Tenserflow"></a>下载Tenserflow</h3><p>版本是上文定下的，这次直接采用pip安装了，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install tensorflow-gpu==2.4.0</span><br></pre></td></tr></table></figure>
<h3 id="验证是否成功-3"><a href="#验证是否成功-3" class="headerlink" title="验证是否成功"></a>验证是否成功</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">tf.config.list_physical_devices(<span class="string">&#x27;GPU&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-06%20153241.png" alt="屏幕截图 2023-06-06 153241"></p>
<p>找到显卡即表示成功，说明可以调用GPU</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>希望这次配完环境不会再换版本了，真的痛，希望二周目顺利</p>
<p>感谢你可以看到这里，文中如有不足，尽请见谅！</p>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Win11转移conda环境——从C盘转移到D盘</title>
    <url>/posts/27811b46.html</url>
    <content><![CDATA[<p>原本就是将<code>Anaconda</code>安装到了C盘，结果发现环境他还是默认安装到了C盘，就打算再转移一下</p>
<p>conda版本为</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-28%20095709.png" alt="屏幕截图 2023-06-28 095709"></p>
<p>首先找到Win11下面的环境位置</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">C:<span class="keyword">\Users</span><span class="keyword">\用</span>户名<span class="keyword">\.</span>conda<span class="keyword">\envs</span></span><br></pre></td></tr></table></figure>
<p>比如我的就是</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">C:<span class="keyword">\Users</span><span class="keyword">\Arona</span><span class="keyword">\.</span>conda<span class="keyword">\envs</span></span><br></pre></td></tr></table></figure>
<p>找到D盘安装<code>Anaconda</code>的位置</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">D:<span class="keyword">\ProgramData</span><span class="keyword">\anaconda</span>3<span class="keyword">\envs</span></span><br></pre></td></tr></table></figure>
<p>C盘的将<code>envs</code>文件夹剪切过去，环境迁移一半就完成了</p>
<p>测试了一下，如果新建一个环境，默认还会装在C盘</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-28%20101113.png" alt="屏幕截图 2023-06-28 101113"></p>
<p>于是要修改一下环境的默认安装位置</p>
<p>找到用户目录下的<code>.condarc</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">explorer %USERPROFILE%</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-28%20101811.png" alt="屏幕截图 2023-06-28 101811"></p>
<p>用<code>Visual Studio Code</code>打开</p>
<p>加入这段话</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">envs<span class="built_in">_</span>dirs:</span><br><span class="line">  - D:<span class="keyword">\ProgramData</span><span class="keyword">\anaconda</span>3<span class="keyword">\envs</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-28%20102057.png" alt="屏幕截图 2023-06-28 102057"></p>
<p>这样默认就会安装到D盘了</p>
<p>测试一下，新建一个名为<code>test1</code>的环境</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-28%20102249.png" alt="屏幕截图 2023-06-28 102249"></p>
<p>如果发现地址还没变的话，可以继续以下操作</p>
<p>找到<code>Anaconda</code>的文件夹，右键属性—安全，把users下面的权限全部打钩就行</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-28%20102811.png" alt="屏幕截图 2023-06-28 102811"></p>
<p>应用过程中可能还会出现这种错误</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/image-20230628103929133.png" alt="image-20230628103929133"></p>
<p>可以按照这个<a href="https://blog.csdn.net/qq_37653414/article/details/103462173">博客</a>的方法来解决，那个图比较清楚</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/image-20230628104526618.png" alt="image-20230628104526618"></p>
<p>等待一段时间</p>
<p>然后再回到上述操作，把users下面的权限全部打钩，再等待亿段时间</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/image-20230628104915818.png" alt="image-20230628104915818"></p>
<p>完成后最后测试一下，新建一个名为test2的环境</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-28%20105049.png" alt="屏幕截图 2023-06-28 105049"></p>
<p>成功！</p>
<p>补充一下：</p>
<p>发现刚刚上述只是把环境迁移了，下载的缓存还是留在C盘</p>
<p>找到刚刚用户目录的.<code>condarc</code>文件，再加入几句话</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">pkgs<span class="built_in">_</span>dirs:</span><br><span class="line">  - D:<span class="keyword">\ProgramData</span><span class="keyword">\pkgs</span></span><br></pre></td></tr></table></figure>
<p>保存查看一下，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda info</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/06/28/pCdNtKI.png" alt="image-20230628115703963"></p>
<p>说明配置成功，接下来把C盘的<code>pkgs</code>文件夹剪切到D盘刚刚的目录下就行了</p>
<p><img src="https://s1.ax1x.com/2023/06/28/pCdNqqx.png" alt="image-20230628115948908"></p>
<p>完事！</p>
<p>补充：</p>
<p>之后跑项目遇到了这个问题</p>
<p><img src="https://s1.ax1x.com/2023/07/14/pC41RGd.png" alt="屏幕截图 2023-07-05 155524"></p>
<p>这个原因是之前<code>pycharm</code>保存的环境还默认在C盘，没有自动更新环境的位置，这时候重新加载一下就好了</p>
<p><img src="https://s1.ax1x.com/2023/07/14/pC41Iqf.png" alt="image-20230714111213354"></p>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Win11配置多个CUDA环境</title>
    <url>/posts/a6ee722a.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>由于跑项目发现需要配置不同版本的Pytorch，而不同版本的Pytorch又对应不同版本的CUDA，于是有了在Win上装多个CUDA的打算</p>
<p>默认已经在电脑上装了一个CUDA</p>
<p><img src="https://z1.ax1x.com/2023/09/30/pPqY5Bd.png" alt="屏幕截图 2023-09-30 112423"></p>
<p>现在开始下载第二个CUDA版本，前面下载的操作和普通安装的几乎一样</p>
<h2 id="安装CUDA"><a href="#安装CUDA" class="headerlink" title="安装CUDA"></a>安装CUDA</h2><p><a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA下载链接</a></p>
<p>下载自己需要的CUDA版本，以我自己要安装的为例</p>
<p><img src="https://z1.ax1x.com/2023/09/30/pPqlwXn.png" alt="屏幕截图 2023-09-30 095614"></p>
<p><img src="https://z1.ax1x.com/2023/09/30/pPqlD00.png" alt="屏幕截图 2023-09-30 095815"></p>
<p>下载打开exe文件进行安装，第一步不用管，直接点击确认</p>
<p><img src="https://z1.ax1x.com/2023/09/30/pPqlWc9.png" alt="屏幕截图 2023-09-30 100402"></p>
<p>后面选择自定义安装，只选择安装CUDA</p>
<p><img src="https://z1.ax1x.com/2023/09/30/pPqlfXR.png" alt="屏幕截图 2023-09-30 100534"></p>
<p>其他一路下一步就可以了</p>
<h2 id="安装cuDNN"><a href="#安装cuDNN" class="headerlink" title="安装cuDNN"></a>安装cuDNN</h2><p><a href="https://developer.nvidia.com/rdp/cudnn-archive">cuDNN下载链接</a></p>
<p>PS：下载需要登录一下账号</p>
<p><img src="https://z1.ax1x.com/2023/09/30/pPqlchF.png" alt="屏幕截图 2023-09-30 100047"></p>
<p>下载下来后，把压缩包解压，得到如下文件</p>
<p><img src="https://z1.ax1x.com/2023/09/30/pPqlq9e.png" alt="image-20230930100746137"></p>
<p>将<strong>bin，include文件夹中的文件</strong>，分别复制到下列地址对应的文件夹下（CUDA的安装地址，以我的地址为例），遇到提示，为全部选择覆盖和替换。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.7</span><br></pre></td></tr></table></figure>
<p>需要注意的是，lib文件夹里的所有文件，需要复制到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.7\lib\x64</span><br></pre></td></tr></table></figure>
<p>至此，安装工作就做完了，可以看到电脑上已经有两个CUDA版本了</p>
<p><img src="https://z1.ax1x.com/2023/09/30/pPq3dZq.png" alt="image-20230930101157014"></p>
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>由于CUDA11.7是后面安装的，所以可以看到系统把之前的环境覆盖了</p>
<p><img src="https://z1.ax1x.com/2023/09/30/pPq3rJU.png" alt="屏幕截图 2023-09-30 103109"></p>
<p>以作者在为例，系统变量的PATH里配置一下路径</p>
<p><strong>CUDA_11.7</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="comment">%CUDA_PATH_V11_7%\lib\x64</span></span><br><span class="line"><span class="comment">%CUDA_PATH_V11_7%\include</span></span><br><span class="line"><span class="comment">%CUDA_PATH_V11_7%\extras\CUPTI\lib64</span></span><br><span class="line"><span class="comment">%CUDA_PATH_V11_7%\bin</span></span><br><span class="line"><span class="comment">%CUDA_PATH_V11_7%\libnvvp</span></span><br></pre></td></tr></table></figure>
<p><strong>CUDA_11.0</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="comment">%CUDA_PATH_V11_0%\lib\x64</span></span><br><span class="line"><span class="comment">%CUDA_PATH_V11_0%\include</span></span><br><span class="line"><span class="comment">%CUDA_PATH_V11_0%\extras\CUPTI\lib64</span></span><br><span class="line"><span class="comment">%CUDA_PATH_V11_0%\bin</span></span><br><span class="line"><span class="comment">%CUDA_PATH_V11_0%\libnvvp</span></span><br></pre></td></tr></table></figure>
<p>配置好如下：</p>
<p><img src="https://z1.ax1x.com/2023/09/30/pPq3yz4.jpg" alt="微信截图_20230930105036"></p>
<p>配置好之后，默认CUDA版本是11.7的，如果要切换到11.0版本的，只需要把下面的五条整体上移到CUDA_11.7配置的前面</p>
<p><img src="https://z1.ax1x.com/2023/09/30/pPq3cQJ.jpg" alt="微信截图_20230930105411"></p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><h3 id="测试CUDA11-7"><a href="#测试CUDA11-7" class="headerlink" title="测试CUDA11.7"></a>测试CUDA11.7</h3><p>首先验证CUDA_11.7是否配置成功</p>
<p><img src="https://z1.ax1x.com/2023/09/30/pPq8upF.png" alt="image-20230930105601201"></p>
<p>测试Pytorch是否可以调用显卡</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">torch.cuda.is_available()</span><br><span class="line">torch.cuda.get_device_name(<span class="number">0</span>)</span><br><span class="line">torch.version.cuda</span><br></pre></td></tr></table></figure>
<p><img src="https://z1.ax1x.com/2023/09/30/pPqYiOH.png" alt="image-20230930120418607"></p>
<h3 id="测试CUDA11-0"><a href="#测试CUDA11-0" class="headerlink" title="测试CUDA11.0"></a>测试CUDA11.0</h3><p>先把系统变量里Path里相关路径上移</p>
<p><img src="https://z1.ax1x.com/2023/09/30/pPq8ZkV.jpg" alt="微信截图_20230930110409"></p>
<p><strong>然后重启！重启！重启！</strong></p>
<p>验证CUDA_11.7是否配置成功</p>
<p><img src="https://z1.ax1x.com/2023/09/30/pPqGkge.png" alt="image-20230930112425329"></p>
<p>测试Pytorch是否可以调用显卡</p>
<p><img src="https://z1.ax1x.com/2023/09/30/pPqYkmd.png" alt="image-20230930112626663"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>切换CUDA的时候除了要修改系统变量Path中的路径顺序，一定要记得重启！</p>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
  </entry>
  <entry>
    <title>hexo部署到Gitee后显示404||没有更新</title>
    <url>/posts/647c3772.html</url>
    <content><![CDATA[<p>在Gitee开启了Gitee Pages，并且本地完成了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>
<p>然后发现已经上传到了Gitee仓库里，但是访问博客的网址却显示404</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-26%20163430-1685090681023-7.png" alt="屏幕截图 2023-05-26 163430"></p>
<p>有以下两种可能的原因：</p>
<h3 id="hexo根目录下的-config-yml文件里，url没有配置对"><a href="#hexo根目录下的-config-yml文件里，url没有配置对" class="headerlink" title="hexo根目录下的_config.yml文件里，url没有配置对"></a>hexo根目录下的_config.yml文件里，url没有配置对</h3><p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-26%20164633.png" alt="屏幕截图 2023-05-26 164633"></p>
<p>如果仓库名和Gitee的用户名不一致时，root属性也需要修改。</p>
<p>比如用户名为xxx新建的仓库地址为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://gitee.com/xxx/myblog </span><br></pre></td></tr></table></figure>
<p>则以上内容需要修改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url: https://xxx.gitee.io/</span><br><span class="line">root: /myblog</span><br></pre></td></tr></table></figure>
<h3 id="没有手动再部署一遍！！！"><a href="#没有手动再部署一遍！！！" class="headerlink" title="没有手动再部署一遍！！！"></a>没有手动再部署一遍！！！</h3><p>是的你没有听错，这个居然上传成功后还需要手动再更新一下！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-05-26%20164839.png" alt="屏幕截图 2023-05-26 164839"></p>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
  </entry>
  <entry>
    <title>nginx反向代理出错</title>
    <url>/posts/548bc04a.html</url>
    <content><![CDATA[<p>使用yum安装好了nginx</p>
<h2 id="问题再现"><a href="#问题再现" class="headerlink" title="问题再现"></a>问题再现</h2><p>进入路径配置好了<code>nginx.conf</code>文件</p>
<p><img src="https://s11.ax1x.com/2024/01/26/pFnwVDP.png" alt="QQ截图20240126212909"></p>
<p>验证<code>nginx.conf</code>文件是否有语法错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure>
<p>重载nginx服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure>
<p>然后启动程序，发现nginx报错</p>
<p><img src="https://s11.ax1x.com/2024/01/26/pFnwmE8.png" alt="img"></p>
<p>在终端可以尝试输入了这样一句话</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setsebool -P httpd_can_network_connect <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>解释：可能是SELinux的原因，它会基于最小权限原则默认拦截了 Nginx 的请求</p>
<p><img src="https://s11.ax1x.com/2024/01/26/pFnwnUS.png" alt="image-20240126213917121"></p>
]]></content>
      <tags>
        <tag>个人笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>word2vec工具实战</title>
    <url>/posts/3ff7a4fb.html</url>
    <content><![CDATA[<p>最开始需要新建一个conda环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n word2vec python=3.8</span><br><span class="line">conda activate word2vec</span><br></pre></td></tr></table></figure>
<p>然后安装一下所需要的库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install numpy</span><br><span class="line">pip install scipy</span><br><span class="line">pip install gensim</span><br><span class="line">pip install jieba</span><br></pre></td></tr></table></figure>
<p>首先下载一下数据集<a href="https://dumps.wikimedia.org/zhwiki/20230701/zhwiki-20230701-pages-articles.xml.bz2">zhwiki-20230701-pages-articles.xml.bz2</a>，为了方便后续操作，这里需要把他转成<code>txt</code>格式的</p>
<p>以下是转化的文件<code>transform_to_txt.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 修改后的代码如下：</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gensim.corpora <span class="keyword">import</span> WikiCorpus</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    program = os.path.basename(sys.argv[<span class="number">0</span>])</span><br><span class="line">    logger = logging.getLogger(program)</span><br><span class="line">    logging.basicConfig(<span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s: %(levelname)s: %(message)s&#x27;</span>)</span><br><span class="line">    logging.root.setLevel(level=logging.INFO)</span><br><span class="line">    logger.info(<span class="string">&quot;running %s&quot;</span> % <span class="string">&#x27; &#x27;</span>.join(sys.argv))</span><br><span class="line">    <span class="comment"># check and process input arguments</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">globals</span>()[<span class="string">&#x27;__doc__&#x27;</span>] % <span class="built_in">locals</span>())</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    inp, outp = sys.argv[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">    space = <span class="string">&quot;&quot;</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    output = <span class="built_in">open</span>(outp, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment"># wiki = WikiCorpus(inp, lemmatize=False, dictionary=&#123;&#125;)</span></span><br><span class="line">    wiki = WikiCorpus(inp, dictionary=&#123;&#125;)</span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> wiki.get_texts():</span><br><span class="line">        s = space.join(text)</span><br><span class="line">        <span class="comment"># s = s.decode(&#x27;utf8&#x27;) + &quot;\n&quot;</span></span><br><span class="line">        s = s.encode(<span class="string">&#x27;utf8&#x27;</span>).decode(<span class="string">&#x27;utf8&#x27;</span>) + <span class="string">&quot;\n&quot;</span></span><br><span class="line">        output.write(s)</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">10000</span> == <span class="number">0</span>):</span><br><span class="line">            logger.info(<span class="string">&quot;Saved &quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot; articles&quot;</span>)</span><br><span class="line">    output.close()</span><br><span class="line">    logger.info(<span class="string">&quot;Finished Saved &quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot; articles&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>然后将刚刚下载的数据集和此<code>Python</code>文件放在同一个目录下，并且用命令行跳转到这个目录，然后执行</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">python transform<span class="built_in">_</span>to<span class="built_in">_</span>txt.py zhwiki-20230701-pages-articles.xml.bz2 wiki.zh.text</span><br></pre></td></tr></table></figure>
<p>其中，第一个参数是<code>Python</code>的文件名，第二个是要处理的数据文件名，第三个是要输出的文件名</p>
<p>转换完之后就生成了一个txt文件</p>
<p><img src="https://s1.ax1x.com/2023/07/04/pCs7rX8.png" alt="image-20230704195428973"></p>
<p>直接浏览，可以看出这里面全是繁体字，所以下面需要把繁体转换成简体</p>
<p><img src="https://s1.ax1x.com/2023/07/04/pCs760g.png" alt="image-20230704195605355"></p>
<p>首先需要下载这个<a href="https://github.com/BYVoid/OpenCC/wiki/Download">转换工具</a>，<strong>记住要下载预编译的</strong>。</p>
<p>然后解压后放在一个能记住的位置，例如我是</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">G:<span class="keyword">\Lab</span><span class="keyword">\DeepLearning</span><span class="keyword">\OpenCC</span><span class="keyword">\share</span><span class="keyword">\opencc</span></span><br></pre></td></tr></table></figure>
<p>然后把文件夹中的<code>bin</code>目录配置到系统环境<code>path</code>里</p>
<p><img src="https://s1.ax1x.com/2023/07/04/pCsblqO.png" alt="屏幕截图 2023-07-04 202744"></p>
<p>最后验证一下是否配置成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opencc --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/07/04/pCsHFNd.png" alt="屏幕截图 2023-07-04 201226"></p>
<p>然后就可以转换啦，用<code>cmd</code>跳转到<code>wiki.zh.text</code>文件所在的目录，在命令行输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opencc -i wiki.zh.text -o test_zh.txt -c G:\Lab\DeepLearning\OpenCC\share\opencc\t2s.json</span><br></pre></td></tr></table></figure>
<p><code>wiki.zh.text</code>是待转换的繁体文本，<code>test_zh.txt</code>是输出的简体文本，<code>t2s.json</code>表示繁体转简体，其中这个需要换成自己的地址（<strong>地址不要有空格</strong>）</p>
<p><img src="https://s1.ax1x.com/2023/07/04/pCsbmGR.png" alt="image-20230704203004637"></p>
<p>等一会就好了</p>
<p><img src="https://s1.ax1x.com/2023/07/04/pCsbtJA.png" alt="image-20230704203155840"></p>
<p>然后就全部成了简体了，使用word2vec工具需要做的最后一步是分词</p>
<p>分词使用<code>jieba</code>这个库来解决，以下是分词的文件<code>participle.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_words</span>(<span class="params">sentence</span>):</span><br><span class="line">    <span class="comment"># print sentence</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot; &quot;</span>.join(jieba.cut(sentence)).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = codecs.<span class="built_in">open</span>(<span class="string">&#x27;test_zh.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">target = codecs.<span class="built_in">open</span>(<span class="string">&quot;zh.jian.wiki.seg_1.5G.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;open files&#x27;</span>)</span><br><span class="line">line_num = <span class="number">1</span></span><br><span class="line">line = f.readline()</span><br><span class="line"><span class="keyword">while</span> line:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---- processing &#x27;</span>, line_num, <span class="string">&#x27; article----------------&#x27;</span>)</span><br><span class="line">    line_seg = <span class="string">&quot; &quot;</span>.join(jieba.cut(line))</span><br><span class="line">    target.writelines(line_seg)</span><br><span class="line">    line_num = line_num + <span class="number">1</span></span><br><span class="line">    line = f.readline()</span><br><span class="line">f.close()</span><br><span class="line">target.close()</span><br><span class="line">exit()</span><br><span class="line"><span class="keyword">while</span> line:</span><br><span class="line">    curr = []</span><br><span class="line">    <span class="keyword">for</span> oneline <span class="keyword">in</span> line:</span><br><span class="line">        <span class="comment"># print(oneline)</span></span><br><span class="line">        curr.append(oneline)</span><br><span class="line">    after_cut = <span class="built_in">map</span>(cut_words, curr)</span><br><span class="line">    target.writelines(after_cut)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;saved&#x27;</span>, line_num, <span class="string">&#x27;articles&#x27;</span>)</span><br><span class="line">    exit()</span><br><span class="line">    line = f.readline1()</span><br><span class="line">f.close()</span><br><span class="line">target.close()</span><br></pre></td></tr></table></figure>
<p>其中，这一句是配置需要分词的文件<code>test_zh.txt</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = codecs.<span class="built_in">open</span>(<span class="string">&#x27;test_zh.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;utf8&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这一句是配置需要输出的文件<code>zh.jian.wiki.seg_1.5G.txt</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">target = codecs.<span class="built_in">open</span>(<span class="string">&quot;zh.jian.wiki.seg_1.5G.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;utf8&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>将<code>participle.py</code>文件和上面输出的简体文本<code>test_zh.txt</code>放在同一个目录，用<code>cmd</code>（跳转到对应目录后输入<code>python Testjieba.py</code>）或者<code>Pycharm</code>直接运行<code>participle.py</code>文件</p>
<p><strong>PS：无论是<code>cmd</code>还是<code>Pycharm</code>，记得切换到<code>word2vec</code>环境</strong></p>
<p>经过将近一个多小时的时间，终于跑完了</p>
<p><img src="https://s1.ax1x.com/2023/07/04/pCsb6ij.png" alt="屏幕截图 2023-07-04 192329"></p>
<p>接下来就是正式使用word2vec的时候了，以下是使用word2vec的文件<code>word2vec_model.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> Word2Vec</span><br><span class="line"><span class="keyword">from</span> gensim.models.word2vec <span class="keyword">import</span> LineSentence</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    program = os.path.basename(sys.argv[<span class="number">0</span>])</span><br><span class="line">    logger = logging.getLogger(program)</span><br><span class="line">    logging.basicConfig(<span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s: %(levelname)s: %(message)s&#x27;</span>)</span><br><span class="line">    logging.root.setLevel(level=logging.INFO)</span><br><span class="line">    logger.info(<span class="string">&quot;running %s&quot;</span> % <span class="string">&#x27; &#x27;</span>.join(sys.argv))</span><br><span class="line">    <span class="comment"># check and process input arguments</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">globals</span>()[<span class="string">&#x27;__doc__&#x27;</span>] % <span class="built_in">locals</span>())</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    inp, outp1, outp2 = sys.argv[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">    model = Word2Vec(LineSentence(inp), size=<span class="number">400</span>, window=<span class="number">5</span>, min_count=<span class="number">5</span>, workers=multiprocessing.cpu_count())</span><br><span class="line">    model.save(outp1)</span><br><span class="line">    model.wv.save_word2vec_format(outp2, binary=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>将上文分好词的文件<code>zh.jian.wiki.seg_1.5G.txt</code>与<code>word2vec_model.py</code>文件也是放到同一个目录下，然后在<code>cmd</code>中执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python word2vec_model.py zh.jian.wiki.seg_1.5G.txt wiki.zh.text.model wiki.zh.text.vector</span><br></pre></td></tr></table></figure>
<p>其中，<code>wiki.zh.text.model</code>是生成的模型（同样记得切换环境）</p>
<p><img src="https://s1.ax1x.com/2023/07/04/pCsqmTg.png" alt="image-20230704205047579"></p>
<p>可能会报这个错，原因可能是<code>gensim</code>的版本的差异。</p>
<p>这样把下面这句的<code>size</code>改成<code>vector_size</code>即可</p>
<p>源代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = Word2Vec(LineSentence(inp), size=<span class="number">400</span>, window=<span class="number">5</span>, min_count=<span class="number">5</span>, workers=multiprocessing.cpu_count())</span><br></pre></td></tr></table></figure>
<p>新代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = Word2Vec(LineSentence(inp), vector_size=<span class="number">400</span>, window=<span class="number">5</span>, min_count=<span class="number">5</span>, workers=multiprocessing.cpu_count())</span><br></pre></td></tr></table></figure>
<p>然后就可以漫长的等待了！</p>
<p><img src="https://s1.ax1x.com/2023/07/04/pCsqB11.png" alt="image-20230704205435161"></p>
<p> 经过一段时间后，模型保存成功了！</p>
<p><img src="https://s1.ax1x.com/2023/07/04/pCsO3ZT.png" alt="屏幕截图 2023-07-04 212910"></p>
<p>最后测试一下模型</p>
<p>测试文件<code>testModel.py</code>如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> Word2Vec</span><br><span class="line"></span><br><span class="line">en_wiki_word2vec_model = Word2Vec.load(<span class="string">&#x27;wiki.zh.text.model&#x27;</span>)</span><br><span class="line"></span><br><span class="line">testwords = [<span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;学术&#x27;</span>, <span class="string">&#x27;白痴&#x27;</span>, <span class="string">&#x27;篮球&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    res = en_wiki_word2vec_model.wv.most_similar(testwords[i])</span><br><span class="line">    <span class="built_in">print</span>(testwords[i])</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>
<p>继续在同一个目录执行<code>testModel.py</code>文件，得到如下结果</p>
<p><img src="https://s1.ax1x.com/2023/07/05/pCyEdl6.png" alt="image-20230705101212390"></p>
<p>最后附上<a href="https://github.com/Ruvikm/Gensim_word2vec">项目完整地址</a></p>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
  </entry>
  <entry>
    <title>JZ52 两个链表的第一个公共结点</title>
    <url>/posts/c87ee886.html</url>
    <content><![CDATA[<p>输入两个无环的单向链表，找出它们的第一个公共结点，如果没有公共节点则返回空。（注意因为传入数据是链表，所以错误测试数据的提示是用其他方式显示的，保证传入数据是正确的）</p>
<p>数据范围： n≤1000<br>要求：空间复杂度 O<em>(1)，时间复杂度 )</em>O<em>(</em>n)</p>
<p>例如，输入{1,2,3},{4,5},{6,7}时，两个无环的单向链表的结构如下图所示：</p>
<p><img src="https://z1.ax1x.com/2023/11/19/piUE2Pf.png" alt="img"></p>
<p>可以看到它们的第一个公共结点的结点值为6，所以返回结点值为6的结点。</p>
<h3 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h3><p>输入分为是3段，第一段是第一个链表的非公共部分，第二段是第二个链表的非公共部分，第三段是第一个链表和第二个链表的公共部分。 后台会将这3个参数组装为两个链表，并将这两个链表对应的头节点传入到函数FindFirstCommonNode里面，用户得到的输入只有pHead1和pHead2。</p>
<h3 id="返回值描述："><a href="#返回值描述：" class="headerlink" title="返回值描述："></a>返回值描述：</h3><p>返回传入的pHead1和pHead2的第一个公共结点，后台会打印以该节点为头节点的链表。</p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,2,3&#125;,&#123;4,5&#125;,&#123;6,7&#125;</span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;6,7&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一个参数&#123;1,2,3&#125;代表是第一个链表非公共部分，第二个参数&#123;4,5&#125;代表是第二个链表非公共部分，最后的&#123;6,7&#125;表示的是2个链表的公共部分</span><br><span class="line">这3个参数最后在后台会组装成为2个两个无环的单链表，且是有公共节点的          </span><br></pre></td></tr></table></figure>
<h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1&#125;,&#123;2,3&#125;,&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2个链表没有公共节点 ,返回null，后台打印&#123;&#125;       </span><br></pre></td></tr></table></figure>
<h2 id="题解1"><a href="#题解1" class="headerlink" title="题解1"></a>题解1</h2><p>首先先求出两个链表的长度，让长度长一点的指针先往前走几步（走的步数 = 两链表长度差），然后让两个指针分别指向两个链表，当两个指针相等的时候几个返回当前指向的结点</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">            val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">FindFirstCommonNode</span><span class="params">( ListNode* pHead1, ListNode* pHead2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pHead1 == <span class="literal">nullptr</span> || pHead2 == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* res = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="type">int</span> len1 = <span class="number">0</span>, len2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ListNode* p = pHead1; p != <span class="literal">nullptr</span>; p = p-&gt;next, len1++);</span><br><span class="line">        <span class="keyword">for</span> (ListNode* p = pHead2; p != <span class="literal">nullptr</span>; p = p-&gt;next, len2++);</span><br><span class="line">        <span class="type">int</span> step = <span class="built_in">abs</span>(len2 - len1);</span><br><span class="line">		<span class="keyword">if</span>(len1 &gt; len2)&#123;</span><br><span class="line">			<span class="keyword">while</span>(step--)&#123;</span><br><span class="line">				pHead1 = pHead1-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">while</span>(step--)&#123;</span><br><span class="line">				pHead2 = pHead2-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(pHead1 != pHead2)&#123;</span><br><span class="line">			pHead1 = pHead1-&gt;next;</span><br><span class="line">			pHead2 = pHead2-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="keyword">return</span> pHead1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="题解2"><a href="#题解2" class="headerlink" title="题解2"></a>题解2</h2><p>用两个指针分别指向两个链表，让其循环移动，当指向同一个结点的时候即为公共结点</p>
<p><img src="https://z1.ax1x.com/2023/11/19/piUES4f.png" alt="微信图片_20231119204317"></p>
<p>也就是说，当指针1走完{1,2,3,6,7}的时候，让它指向{4,5}。同理，当指针2走完{4,5,6,7}的时候，让它指向{1,2,3}</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">	int val;</span></span><br><span class="line"><span class="comment">	struct ListNode *next;</span></span><br><span class="line"><span class="comment">	ListNode(int x) :</span></span><br><span class="line"><span class="comment">			val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">FindFirstCommonNode</span><span class="params">( ListNode* pHead1, ListNode* pHead2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead1 == <span class="literal">nullptr</span> ||pHead2 == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ListNode * H1 = pHead1, * H2 = pHead2;</span><br><span class="line">		<span class="keyword">while</span>(H1 != H2)&#123;</span><br><span class="line">			H1 = (H1 == <span class="literal">nullptr</span>) ? pHead2 : H1-&gt;next;</span><br><span class="line">			H2 = (H2 == <span class="literal">nullptr</span>) ? pHead1 : H2-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> H1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>刷题笔记</category>
      </categories>
  </entry>
  <entry>
    <title>使用Xpath和Requests实现爬虫并存储在Excel表里---爬取链家上杭州近期二手房价</title>
    <url>/posts/113808dc.html</url>
    <content><![CDATA[<p>爬的是杭州近期的的新房价</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@author: Ruvik</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: Spider_House.py</span></span><br><span class="line"><span class="string">@time: 2020/7/9 20:12</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬一下链家网上杭州新房的价格</span></span><br><span class="line"><span class="keyword">import</span> requests                 <span class="comment"># 进行网络请求</span></span><br><span class="line"><span class="keyword">import</span> xlwt                     <span class="comment"># 与excel相关的操作</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree          <span class="comment"># 引入xpath库，方便定位元素</span></span><br><span class="line"><span class="keyword">import</span> time                     <span class="comment"># 进行访问频率控制</span></span><br><span class="line"><span class="keyword">import</span> random                   <span class="comment"># 随机数生成</span></span><br><span class="line"><span class="keyword">import</span> re                       <span class="comment"># 正则表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    base_url = <span class="string">&quot;https://hz.fang.lianjia.com/loupan/pg&quot;</span>     <span class="comment"># 最基本的网址，后续会根据这个进行翻页操作</span></span><br><span class="line">    Savepath = <span class="string">&quot;.\\杭州新房价.xls&quot;</span>                           <span class="comment"># 存储路径</span></span><br><span class="line">    datalist = getdata(base_url)</span><br><span class="line">    savedata(datalist, Savepath)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取html源码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ask_url</span>(<span class="params">url</span>):</span><br><span class="line">    html=<span class="string">&quot;&quot;</span></span><br><span class="line">    headers=&#123;          <span class="comment"># 进行伪装，防止416错误，模拟浏览器头部信息，向豆瓣服务器发送消息</span></span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url,headers=headers,timeout=<span class="number">10</span>)  <span class="comment"># 用户代理，表示告诉豆瓣服务器，我们是什么类型的机器、浏览器（本质上是告诉浏览器，我们可以接收什么水平的文件内容）</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">3</span>, <span class="number">6</span>))                        <span class="comment"># 每隔3-6s执行一次请求</span></span><br><span class="line">        <span class="comment"># print(response.status_code)</span></span><br><span class="line">        html = response.content                                     <span class="comment"># 获取网页的html源代码</span></span><br><span class="line">        <span class="comment"># print(html)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请求访问成功&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;超时&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从html源码中获取信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getdata</span>(<span class="params">baseurl</span>):</span><br><span class="line">    Datalist = []                                 <span class="comment"># 用来存储已经经过处理的信息</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):                     <span class="comment"># 在1-100页内爬取房价的信息</span></span><br><span class="line">        url = baseurl+<span class="built_in">str</span>(i)                    <span class="comment"># 拼接url网址，进行换页</span></span><br><span class="line">        <span class="comment"># print(url)</span></span><br><span class="line">        data = ask_url(url)                     <span class="comment"># 获取到源代码</span></span><br><span class="line">        <span class="comment"># 从源代码中提取信息</span></span><br><span class="line">        <span class="keyword">if</span> data != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            html_data = etree.HTML(data)</span><br><span class="line">            div_list = html_data.xpath(<span class="string">&#x27;//div[@class=&quot;resblock-desc-wrapper&quot;]&#x27;</span>)</span><br><span class="line">            <span class="comment"># print(len(div_list))</span></span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> div_list:</span><br><span class="line">                data_item = []</span><br><span class="line">                <span class="comment"># 提取详情链接</span></span><br><span class="line">                link = <span class="string">&quot;https://hz.fang.lianjia.com&quot;</span></span><br><span class="line">                link += item.xpath(<span class="string">&#x27;./div/a/@href&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">                data_item.append(link)</span><br><span class="line">                <span class="comment"># print(link)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 提取名字</span></span><br><span class="line">                name = item.xpath(<span class="string">&quot;./div/a/text()&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">                data_item.append(name)</span><br><span class="line">                <span class="comment"># print(name)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 提取地址</span></span><br><span class="line">                loc = item.xpath(<span class="string">&#x27;./div[@class=&quot;resblock-location&quot;]/span/text()&#x27;</span>)</span><br><span class="line">                location = loc[<span class="number">0</span>] +<span class="string">&quot;|&quot;</span>+ loc[<span class="number">1</span>] +<span class="string">&quot;|&quot;</span>+ item.xpath(<span class="string">&#x27;./div[@class=&quot;resblock-location&quot;]/a/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">                data_item.append(location)</span><br><span class="line">                <span class="comment"># print(location)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 提取户型</span></span><br><span class="line">                room = item.xpath(<span class="string">&#x27;./a[@class=&quot;resblock-room&quot;]/span/text()&#x27;</span>)</span><br><span class="line">                rooms = <span class="string">&quot;&quot;</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(room)):</span><br><span class="line">                    <span class="keyword">if</span> k &lt; <span class="built_in">len</span>(room) - <span class="number">1</span>:</span><br><span class="line">                        rooms += <span class="built_in">str</span>(room[k]) + <span class="string">&quot;|&quot;</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        rooms += <span class="built_in">str</span>(room[k])</span><br><span class="line">                <span class="comment"># print(rooms)</span></span><br><span class="line">                data_item.append(rooms)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 提取大小</span></span><br><span class="line">                size = item.xpath(<span class="string">&#x27;./div[@class=&quot;resblock-area&quot;]/span/text()&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(size) != <span class="number">0</span>:</span><br><span class="line">                    data_item.append(size[<span class="number">0</span>])</span><br><span class="line">                    <span class="comment"># print(size[0])</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    data_item.append(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 提取标签</span></span><br><span class="line">                tag = item.xpath(<span class="string">&#x27;./div[@class=&quot;resblock-tag&quot;]/span/text()&#x27;</span>)</span><br><span class="line">                tags = <span class="string">&quot;&quot;</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tag)):</span><br><span class="line">                    <span class="keyword">if</span> k &lt; <span class="built_in">len</span>(tag)-<span class="number">1</span>:</span><br><span class="line">                        tags += <span class="built_in">str</span>(tag[k]) + <span class="string">&quot;|&quot;</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        tags += <span class="built_in">str</span>(tag[k])</span><br><span class="line">                <span class="comment"># print(tags)</span></span><br><span class="line">                data_item.append(tags)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 提取价格</span></span><br><span class="line">                Price = <span class="string">&quot;&quot;</span></span><br><span class="line">                price = item.xpath(<span class="string">&#x27;./div[@class=&quot;resblock-price&quot;]/div/span/text()&#x27;</span>)</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(price)):</span><br><span class="line">                    Price += price[k]</span><br><span class="line">                Price = re.sub(<span class="string">&#x27;\xa0&#x27;</span>, <span class="string">&quot;&quot;</span>, Price)     <span class="comment"># 去掉“\xa0”字符</span></span><br><span class="line">                <span class="comment"># print(Price)</span></span><br><span class="line">                data_item.append(Price)</span><br><span class="line">                Datalist.append(data_item)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(Datalist))</span><br><span class="line">    <span class="keyword">return</span> Datalist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将html获取的信息存入Excel表格中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">savedata</span>(<span class="params">Datalist,Savapath</span>):</span><br><span class="line">    col = (<span class="string">&quot;链接&quot;</span>, <span class="string">&quot;名字&quot;</span>, <span class="string">&quot;地址&quot;</span>, <span class="string">&quot;户型&quot;</span>, <span class="string">&quot;大小&quot;</span>, <span class="string">&quot;标签&quot;</span>, <span class="string">&quot;价格&quot;</span>)                <span class="comment"># Excel的表头</span></span><br><span class="line">    house_list = xlwt.Workbook(encoding=<span class="string">&quot;utf-8&quot;</span>, style_compression=<span class="number">0</span>)       <span class="comment"># 创建workbook对象</span></span><br><span class="line">    worksheet = house_list.add_sheet(<span class="string">&quot;HouseList&quot;</span>, cell_overwrite_ok=<span class="literal">True</span>)   <span class="comment"># 新建工作区，设为可覆盖</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">7</span>):                                                   <span class="comment"># 写入表头</span></span><br><span class="line">        worksheet.write(<span class="number">0</span>, i, col[i])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">990</span>):                                                 <span class="comment"># 写入数据</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在写入第%d条数据&quot;</span> % (i + <span class="number">1</span>))</span><br><span class="line">        item = Datalist[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">7</span>):</span><br><span class="line">            worksheet.write(i + <span class="number">1</span>, j, item[j])</span><br><span class="line">    house_list.save(Savapath)                                               <span class="comment"># 存储</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序从这里开始执行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;爬取完毕!&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用蓝牙外设却不小心把台式机电脑蓝牙关了</title>
    <url>/posts/46127e37.html</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>今天犯了一个贼SB的错误，起因是蓝牙键盘突然就不能输入了（虽然是连接状态，但是按什么键都没有反应）</p>
<p>原来我的解决方法就是重启一下电脑，但是那会电脑开了贼多的软件。我就想重启也太麻烦了，既然重启的本质也是重启蓝牙，那我要不直接就把蓝牙重启算了，当时想到这里啊，我心中一阵狂喜，觉得我真TMD是个天才</p>
<p>于是我兴冲冲的找到系统设置—蓝牙，把蓝牙关了，然后当我准备开启蓝牙的时候，我傻眼了，艹，我外设都是蓝牙连接的啊，这TM开不开了</p>
<h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><h3 id="尝试用带USB接收器的鼠标"><a href="#尝试用带USB接收器的鼠标" class="headerlink" title="尝试用带USB接收器的鼠标"></a>尝试用带USB接收器的鼠标</h3><p>我的鼠标不仅可以蓝牙连接，还可以用USB接收器连接，我心想这不是轻轻松松简简单单。于是给鼠标换了一个连接方式，插入了USB接收器。但是奇怪的事情发生了，无论我怎么动鼠标，鼠标的指针就是纹丝不动。我怀疑难道是关了蓝牙功能，连这个都影响到了吗</p>
<h3 id="尝试用有线设备"><a href="#尝试用有线设备" class="headerlink" title="尝试用有线设备"></a>尝试用有线设备</h3><p>虽然心中有一丝紧张，但是我感觉这不就是个小事嘛，那要不找个有线的外设不就可以了。于是翻箱倒柜，刨出来家里的古董有线键盘，插入了电脑前面的USB口。</p>
<p>但是，重量级来了，无论按什么键，都没有反应，让我一度以为是不是键盘寄了。然后我把键盘插到了笔记本上，发现还是可以用的，灯也是亮的（但是刚刚插在台式机上灯就没亮）</p>
<p>前面不行，后面总可以吧，肯定么得问题（Flag立的飞起）我买的主板可是有7个USB插口呢！！！这么想着我钻到桌子下面，吸着尘土，一个一个试着USB口，结果是全都不能用。当时心态就发生了一丝变化，我看着屏幕，屏幕看着我，但是感觉我们之间隔了一个不可逾越的鸿沟，那个鸿沟就是USB口。</p>
<h3 id="尝试远程软件"><a href="#尝试远程软件" class="headerlink" title="尝试远程软件"></a>尝试远程软件</h3><p>我逐渐意识到了问题的严重性，但我灵机一动，心想不还有远程软件么，用手机作为输入不就解决了。</p>
<p>我再次满怀希望的打开手机远程操作APP，在“我的设备”里寻找台式机，但是，咚咚咚！！！设备显示是离线状态，这我才想起来之前为了优化开机，把这个软件的开机自启给关了，我又傻眼了。</p>
<h3 id="分析现状"><a href="#分析现状" class="headerlink" title="分析现状"></a>分析现状</h3><p>现在的问题是，台式机蓝牙关了，但是我的常用外设都是蓝牙连接的，没有有线功能。我有一个有线键盘，但是台式机的USB口不知道为什么全不能用了，这就意味着即使我有有线鼠标理论上也没有用。远程软件也没有开启，不用通过手机远程把蓝牙打开。</p>
<h3 id="扣电池"><a href="#扣电池" class="headerlink" title="扣电池"></a>扣电池</h3><p>和卖主板的客服沟通后，建议我扣主板电池试试。关机后，等待5min后（为了放干净电），我把电池扣了下来，又等了3min左右装了上去。奇迹发生了，USB口能用了！！！于是我用键盘操作（一路按tab键）这找到了蓝牙的开关按钮，</p>
<p><img src="https://s1.ax1x.com/2023/08/12/pPu8BIP.png" alt="屏幕截图 2023-08-12 181458"></p>
<p>按空格打开了蓝牙的开关，至此，终于是解决了！！！</p>
<p>PS：如果不知道用空格是确认，当时用键盘打开我的远程软件其实也解决了</p>
<h2 id="反思及预防"><a href="#反思及预防" class="headerlink" title="反思及预防"></a>反思及预防</h2><p>三思而后行啊，<del>以及中午不能睡时间太长</del></p>
<h3 id="关闭蓝牙功能影响USB接收器的使用吗"><a href="#关闭蓝牙功能影响USB接收器的使用吗" class="headerlink" title="关闭蓝牙功能影响USB接收器的使用吗"></a>关闭蓝牙功能影响USB接收器的使用吗</h3><p>之后又专门把蓝牙关了，使用带USB接收器的鼠标连接，发现可以正常使用。看来问题就出在USB接口上了</p>
<h3 id="为什么USB接口不能用"><a href="#为什么USB接口不能用" class="headerlink" title="为什么USB接口不能用"></a>为什么USB接口不能用</h3><p>然后网上查到了USB口之前为什么不能用的原因及解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为了省电，Windows默认情况下会在不使用USB控制器时将其关闭，在需要时再将其重新开启。但有时候Windows不会自动开启。</span><br><span class="line">1、右键单击开始菜单，打开设备管理器。</span><br><span class="line">2、双击展开“通用串行总线控制器”一栏。</span><br><span class="line">3、双击列表中的第一个“USB根集线器”。</span><br><span class="line">4、点击切换到“电源管理”标签页。</span><br><span class="line">5、取消勾选“允许计算机关闭此设备以节省电源”，点击“确定”。</span><br><span class="line">6、对通用串行总线控制器列表中的每个“USB根集线器”重复步骤3-5。</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/08/12/pPu8haq.png" alt="image-20230812182055614"></p>
<p>按照教程把上面一个一个都关了就好了</p>
<h3 id="打开远程软件的自启"><a href="#打开远程软件的自启" class="headerlink" title="打开远程软件的自启"></a>打开远程软件的自启</h3><p>由于也没啥重要的东西，就把软件自启打开了。再也不想为了一点优化差点坑死自己了</p>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
  </entry>
  <entry>
    <title>jz25 合并两个排序的链表</title>
    <url>/posts/5ac6a0d9.html</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>输入两个递增的链表，单个链表的长度为n，合并这两个链表并使新链表中的节点仍然是递增排序的。</p>
<p>数据范围： 0≤10000≤<em>n</em>≤1000，−1000≤节点值≤1000−1000≤节点值≤1000<br>要求：空间复杂度 <em>O</em>(1)，时间复杂度 <em>O</em>(<em>n</em>)</p>
<p>如输入{1,3,5},{2,4,6}时，合并后的链表为{1,2,3,4,5,6}，所以对应的输出为{1,2,3,4,5,6}，转换过程如下图所示：</p>
<p><img src="https://z1.ax1x.com/2023/11/19/piUEyVI.png" alt="09DD8C2662B96CE14928333F055C5580"></p>
<p>或输入{-1,2,4},{1,3,4}时，合并后的链表为{-1,1,2,3,4,4}，所以对应的输出为{-1,1,2,3,4,4}，转换过程如下图所示：</p>
<p><img src="https://z1.ax1x.com/2023/11/19/piUE6at.png" alt="8266E4BFEDA1BD42D8F9794EB4EA0A13"></p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,3,5&#125;,&#123;2,4,6&#125;</span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,2,3,4,5,6&#125;</span><br></pre></td></tr></table></figure>
<h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;,&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h2><p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;-1,2,4&#125;,&#123;1,3,4&#125;</span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;-1,1,2,3,4,4&#125;</span><br></pre></td></tr></table></figure>
<h1 id="题解1"><a href="#题解1" class="headerlink" title="题解1"></a>题解1</h1><p>可以使用虚拟头结点，可以再新建一个链表，然后把两个链表的结点从小到大依次插入到新链表中即可。使用双指针分别指向两个链表，然后每次将较小的结点放在虚拟头结点后面，然后指针（刚刚较小的）放后移动，另一个指针不动</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *  int val;</span></span><br><span class="line"><span class="comment"> *  struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *  ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param pHead1 ListNode类</span></span><br><span class="line"><span class="comment">     * @param pHead2 ListNode类</span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">Merge</span><span class="params">(ListNode* pHead1, ListNode* pHead2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span> (pHead1 == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> pHead2;</span><br><span class="line">        <span class="keyword">if</span> (pHead2 == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> pHead1;</span><br><span class="line">        ListNode* p = pHead2, *q = pHead1;</span><br><span class="line">        ListNode* newHead;</span><br><span class="line">        newHead = p-&gt;val &lt;= q-&gt;val ? p : q;</span><br><span class="line">        ListNode *res = newHead;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">nullptr</span> &amp;&amp; q != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;val &lt;= q-&gt;val) &#123;</span><br><span class="line">                ListNode* tmp = p-&gt;next;</span><br><span class="line">                ListNode* node = p;</span><br><span class="line">                newHead-&gt;next = node;</span><br><span class="line">                newHead = node;</span><br><span class="line">                p = tmp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ListNode* tmp = q-&gt;next;</span><br><span class="line">                ListNode* node = q;</span><br><span class="line">                newHead-&gt;next = node;</span><br><span class="line">                newHead = node;</span><br><span class="line">                q = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            newHead-&gt;next = p;</span><br><span class="line">            newHead = p;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (q != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            newHead-&gt;next = q;</span><br><span class="line">            newHead = q;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>本来打算将一个链表插入到另一个链表之中的，但是太复杂了，一直没有AC</p>
]]></content>
      <categories>
        <category>刷题笔记</category>
      </categories>
  </entry>
  <entry>
    <title>图的邻接表表示转换成邻接矩阵</title>
    <url>/posts/6eba8ea2.html</url>
    <content><![CDATA[<p>算法思想：<br>先初始化邻接矩阵。依次遍历各个顶点的边表，根据边表中记录的“改弧所指向的顶点的位置”修改邻接矩阵arc[i][j]的值。例如遍历第 i 行的时候（当前的顶点所在行数为 i ），依次遍历该顶点的边表结点，若当前顶点的弧顶点的位置为j，则<code>arc[i][j] = 1</code> </p>
<p>创建如下的图：<br><img src="https://img-blog.csdnimg.cn/20210218215606727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>全部代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region 创建邻接表存储的无向图</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxVertexNum 100    <span class="comment">//图中顶点数目最大值</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VertexType char</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _for(i,a,b) for(int i=(a);i&lt;(b);i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ArcNode</span> &#123;    <span class="comment">//边表结点</span></span><br><span class="line">    <span class="type">int</span> adjvex;             <span class="comment">//该弧所指向的顶点的位置</span></span><br><span class="line">    ArcNode* next;          <span class="comment">//指向下一条弧的指针</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">VNode</span> &#123;      <span class="comment">//顶点表结点</span></span><br><span class="line">    VertexType data;        <span class="comment">//顶点信息</span></span><br><span class="line">    ArcNode* first;         <span class="comment">//指向第一条依附该顶点的弧的指针</span></span><br><span class="line">&#125;VNode,AdjList[MaxVertexNum];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;            </span><br><span class="line">    AdjList vertices;       <span class="comment">//领接表</span></span><br><span class="line">    <span class="type">int</span> vexnum, arcnum;     <span class="comment">//图的顶点数和弧数</span></span><br><span class="line">&#125;ALGraph;                   <span class="comment">//ALGraph是以邻接表存储的图类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LocateVex</span><span class="params">(ALGraph&amp; G, VertexType x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    _for(i, <span class="number">0</span>, G.vexnum) &#123;</span><br><span class="line">        <span class="keyword">if</span> (G.vertices[i].data == x)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateALGraph</span><span class="params">(ALGraph&amp; G)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输入顶点数和边数&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin &gt;&gt; G.vexnum &gt;&gt; G.arcnum;</span><br><span class="line">    _for(i, <span class="number">0</span>, G.vexnum) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个顶点的信息&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; G.vertices[i].data;</span><br><span class="line">        G.vertices[i].first = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _for(k, <span class="number">0</span>, G.arcnum) &#123;</span><br><span class="line">        VertexType e1, e2;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;输入第&quot;</span> &lt;&lt; k + <span class="number">1</span> &lt;&lt; <span class="string">&quot;条边的顶点：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; e1 &gt;&gt; e2;</span><br><span class="line">        ArcNode* e = <span class="keyword">new</span> ArcNode;</span><br><span class="line">        <span class="keyword">if</span> (!e) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;内存申请失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> vi = <span class="built_in">LocateVex</span>(G, e1);</span><br><span class="line">        <span class="type">int</span> vj = <span class="built_in">LocateVex</span>(G, e2);</span><br><span class="line"></span><br><span class="line">        e-&gt;adjvex = vj;									<span class="comment">//这三步，类似于单链表的头插法</span></span><br><span class="line">        e-&gt;next = G.vertices[vi].first;</span><br><span class="line">        G.vertices[vi].first = e;</span><br><span class="line"></span><br><span class="line">        e = <span class="keyword">new</span> ArcNode;</span><br><span class="line">        <span class="keyword">if</span> (!e) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;内存申请失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        e-&gt;adjvex = vi;									</span><br><span class="line">        e-&gt;next = G.vertices[vj].first;</span><br><span class="line">        G.vertices[vj].first = e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> visited[MaxVertexNum];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(ALGraph G, <span class="type">int</span> i)</span>          <span class="comment">//邻接表的深度优先递归</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    visited[i] = <span class="literal">true</span>;         		<span class="comment">//访问过了该顶点，标记为TRUE </span></span><br><span class="line">    cout &lt;&lt; G.vertices[i].data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    p = G.vertices[i].first;        <span class="comment">//让p指向边表第一个结点 </span></span><br><span class="line">    <span class="keyword">while</span> (p) &#123;                     <span class="comment">//在边表内遍历 </span></span><br><span class="line">        <span class="keyword">if</span> (!visited[p-&gt;adjvex])    <span class="comment">//对未访问的邻接顶点递归调用 </span></span><br><span class="line">            <span class="built_in">DFS</span>(G, p-&gt;adjvex);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFSTraverse</span><span class="params">(ALGraph G)</span> </span>&#123;        <span class="comment">//邻接表的深度遍历操作</span></span><br><span class="line">    _for(i, <span class="number">0</span>, G.vexnum)</span><br><span class="line">        visited[i] = <span class="literal">false</span>;         <span class="comment">//初始设置为未访问 </span></span><br><span class="line">    _for(i, <span class="number">0</span>, G.vexnum)</span><br><span class="line">        <span class="keyword">if</span> (!visited[i])</span><br><span class="line">            <span class="built_in">DFS</span>(G, i);	            <span class="comment">//对未访问的顶点调用DFS，若是连通图只会执行一次 			</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//P223.4</span></span><br><span class="line"><span class="comment">//写出从图的邻接表表示转换成邻接矩阵表示的算法。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Convert</span><span class="params">(ALGraph&amp; G, <span class="type">int</span> arcs[MaxVertexNum][MaxVertexNum])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    _for(i, <span class="number">0</span>, G.vexnum) &#123;</span><br><span class="line">        ArcNode *p = G.vertices[i].first;</span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            arcs[i][p-&gt;adjvex] = <span class="number">1</span>;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> arcs[MaxVertexNum][MaxVertexNum];</span><br><span class="line">    <span class="built_in">memset</span>(arcs, <span class="number">0</span>, <span class="built_in">sizeof</span>(arcs));</span><br><span class="line">    ALGraph G;</span><br><span class="line">    <span class="built_in">CreateALGraph</span>(G);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;DFS:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">DFSTraverse</span>(G);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;转换后的邻接矩阵:&quot;</span>&lt;&lt; endl;</span><br><span class="line">    <span class="built_in">Convert</span>(G, arcs);</span><br><span class="line">    _for(i, <span class="number">0</span>, G.vexnum) &#123;</span><br><span class="line">        _for(j, <span class="number">0</span>, G.vexnum)</span><br><span class="line">            cout &lt;&lt; arcs[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">7</span></span><br><span class="line">a b c d e</span><br><span class="line">a b</span><br><span class="line">a e</span><br><span class="line">b c</span><br><span class="line">b d</span><br><span class="line">b e</span><br><span class="line">c d</span><br><span class="line">d e</span><br></pre></td></tr></table></figure>
<p>运行结果如下：<br><img src="https://img-blog.csdnimg.cn/20210218215732477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>刷题笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>在Centos7上安装Daikon</title>
    <url>/posts/6aa701de.html</url>
    <content><![CDATA[<h2 id="Daikon简介"><a href="#Daikon简介" class="headerlink" title="Daikon简介"></a>Daikon简介</h2><p>来自官方的翻译</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Daikon 是动态检测可能不变量的一种实现;也就是说,Daikon不变量检测器会报告程序中可能存在的不变量。不变量是程序在某个点或某些点上所持有的性质;它们通常出现在断言语句、文档和形式规范中。不变量可用于程序理解和许多其他应用。例如:&#x27;x.field &gt; abs(y)&#x27;; &#x27;y = 2*x+3&#x27;; &#x27;数组 a 是有序的&#x27;; 对于所有列表对象 lst,&#x27;lst.next.prev = lst&#x27;; 对于所有树节点对象 n,&#x27;n.left.value &lt; n.right.value&#x27;; &#x27;p != null =&gt; p.content in myArray&#x27;;等等。</span><br></pre></td></tr></table></figure>
<p>这样的解释可能有点太晦涩，下面是省流版</p>
<p>Daikon是一个工具,它可以通过观察程序运行时的数据,自动发现一些潜在的规律或模式,我们把这些规律或模式称为不变量。比如说,你写了一个程序对一组数字从小到大排序。在排序之后,数组中的元素肯定是按升序排列的,即array[i] &lt;= array[i+1]。这就是一个不变量,无论输入数据是什么,只要排序成功,这个性质总是成立。再举一个例子,如果一个程序购物车的代码,不变量可能是”购物车不为空,则必须有商品被添加”。</p>
<p>Daikon可以自动分析程序运行轨迹,发现诸如”数组是排序的”、”购物车非空必有商品”这样的不变量规律,并将它们报告给程序员,供他们理解程序、检查错误或声明一些规范性的性质。</p>
<h2 id="安装Daikon"><a href="#安装Daikon" class="headerlink" title="安装Daikon"></a>安装Daikon</h2><h3 id="安装Daikon所需环境"><a href="#安装Daikon所需环境" class="headerlink" title="安装Daikon所需环境"></a><strong>安装Daikon所需环境</strong></h3><p>首先需要安装JDK，如果使用的是Centos 7自带的，则使用不了javac等命令，需要参考<a href="https://blog.csdn.net/four404/article/details/105597485">javac命令报错bash:javac:command not found</a>这篇博客进行修改</p>
<p>安装JDK可以参考<a href="https://blog.csdn.net/codedz/article/details/124044974">CentOS7 安装jdk8教程</a>这篇文章</p>
<h3 id="下载Daikon"><a href="#下载Daikon" class="headerlink" title="下载Daikon"></a><strong>下载Daikon</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找一个位置新建一个daikonparent文件夹，假设建立在home目录下</span></span><br><span class="line"><span class="built_in">mkdir</span> daikonparent</span><br><span class="line"><span class="comment"># 移动到daikonparent文件夹</span></span><br><span class="line"><span class="built_in">cd</span> daikonparent</span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget http://plse.cs.washington.edu/daikon/download/daikon-5.8.18.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">sudo tar zxf daikon-5.8.18.tar.gz</span><br></pre></td></tr></table></figure>
<p><strong>tips：如果下载太慢，如果是虚拟机的话可以用下载到本机上，利用<code>VMware Tools</code>之类的工具拷到虚拟机上（移动后一定检查文件完整不！！！这没弄好导致卡了我半天）。如果不是虚拟机，可以试试<a href="https://blog.csdn.net/qq_40430360/article/details/128670486">wget换源</a>的操作，如果还不行，最好使用magic了</strong></p>
<h3 id="配置Daikon"><a href="#配置Daikon" class="headerlink" title="配置Daikon"></a><strong>配置Daikon</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 转到用户根目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="comment"># 打开配置文件.bashrc</span></span><br><span class="line">sudo vim .bashrc</span><br></pre></td></tr></table></figure>
<p>然后在<code>.bashrc</code>文件最下面加入下面两句话（按下<code>I</code>键进入插入模式，在最下面粘贴完下面两句话后，按下<code>ESC</code>，然后输入<code>:wq</code>保存并退出）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 你自己的Daikon绝对路径，以刚刚建立在home下daikonparent文件夹的为例</span></span><br><span class="line"><span class="built_in">export</span> DAIKONDIR=daikonparent/daikon-5.8.18</span><br><span class="line"><span class="built_in">source</span> <span class="variable">$DAIKONDIR</span>/scripts/daikon.bashrc</span><br></pre></td></tr></table></figure>
<p>然后应用设定</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure>
<p>编译 Daikon 并构建其他工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装make工具</span></span><br><span class="line">sudo yum install make</span><br><span class="line"></span><br><span class="line">sudo make -C <span class="variable">$DAIKONDIR</span> rebuild-everything</span><br><span class="line">make -C <span class="variable">$DAIKONDIR</span> compile</span><br><span class="line">make -C <span class="variable">$DAIKONDIR</span> daikon.jar</span><br></pre></td></tr></table></figure>
<p>之后会编译一段时间就安装完成了，编译完成后是支持<code>Java</code>语言的</p>
<h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a><strong>验证安装</strong></h3><p>这里使用Daikon自带的测试用例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入测试用例目录</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$DAIKONDIR</span>/examples/java-examples/QueueAr</span><br><span class="line"><span class="comment"># 编译Java文件</span></span><br><span class="line">sudo javac -g DataStructures/QueueArTester.java</span><br><span class="line"><span class="comment"># 对QueueArTester程序进行监控和追踪执行</span></span><br><span class="line">sudo java -<span class="built_in">cp</span> .:<span class="variable">$DAIKONDIR</span>/daikon.jar daikon.DynComp DataStructures.QueueArTester</span><br><span class="line"><span class="comment"># 运行QueueArTester程序，并生成一个声明文件，其中包含了程序中变量的类型信息等</span></span><br><span class="line">sudo java -<span class="built_in">cp</span> .:<span class="variable">$DAIKONDIR</span>/daikon.jar daikon.Chicory --daikon --comparability-file=QueueArTester.decls-DynComp DataStructures.QueueArTester</span><br><span class="line"><span class="comment"># 与第3条类似，仅仅运行程序并使用之前生成的声明文件</span></span><br><span class="line">sudo java -<span class="built_in">cp</span> .:<span class="variable">$DAIKONDIR</span>/daikon.jar daikon.Chicory --comparability-file=QueueArTester.decls-DynComp DataStructures.QueueArTester</span><br><span class="line"><span class="comment"># 运行Daikon不变量检测器,输入之前生成的追踪文件</span></span><br><span class="line">sudo java -<span class="built_in">cp</span> <span class="variable">$DAIKONDIR</span>/daikon.jar daikon.Daikon QueueArTester.dtrace.gz</span><br></pre></td></tr></table></figure>
<p>如果能生成<code>QueueArTester.dtrace.gz</code>文件，则说明安装成功，这里是仅支持Java的，如果想支持C++还需要安装<code>kvasir</code></p>
<p><img src="https://s21.ax1x.com/2024/05/11/pketf4f.png" alt="image-20240511230506582"></p>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
  </entry>
  <entry>
    <title>备战2026校招</title>
    <url>/posts/4bf9d947.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3b9793d73b82b290e20f8c248d726f96aad294091a8caf910dae698177693778"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生规划</category>
      </categories>
  </entry>
  <entry>
    <title>分布式数据库期末复习</title>
    <url>/posts/ab78dc44.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6852e35ec018bc955307c84e1b628c89c4cca66e7ad3e070c3b5e1f7ecc77c13">f666a1e82130d441cf5f17739ffab407ad4aeecdcf1a86bf778145f0cb50009276c69c6287e8c1a736051d2e4da5ba415f6309a031c593ea1b0dcb188a02bf6a47ca96ef1caff392f0fa9f54c07462be4e6eb7b8819c0ea1147c109cd3b8333f70a3e644358d963fc7cc70b8fa752bd67b9b4dd41f50a36c7be5097bc8240a610b4d768021939efe6becd3e1412bdefe1e347fddceb6dca85176f43235620d4428f4aee7eb2c7f1b0b094b07eadbf12b66c85f0855225bd23cf42206cf690c9a996f10598e986fdc12dbe851b78026bce7963a3287717f59adfbc95cfa1ce32073536b8ce26a2057760a430f1f7a48527cfc4cbd757f8281d621ba7c10f4c50289cd197b49da1b43848fb5a6ba2bcf9f8b3c62b953faf0412f991af82f81431b0f4249bbe9c7d0c9580d308e3143763d7e3c7e5bfa1a613a388c52d7dfd262cd946c3710219440961d487d3daca3ab8130f02c18f4c6a10a51ca607a91601bab5871d54123a1d2ebf5a7773cc7a034664cdd649dd76c2ce46996de99e6c378856517d744bdcd455d3fcd5e74b0bf530baa465ec736801766225fa39f24818ef9995e422877e20cf67a8e00db2d6c962ef2a924b9daea20d4fdbcbb6e55e6fe3a6f9201628549d65b411bd514988afdeed1e99180a8acff27d89209419b5d20fa608f877cc26ec8bc097d2f3eab06e823eeac56ffb3290d5663c0ef6a888f1c442c8b370a9ccbebef4e7a12824b9109dc7c0b9f73c839e33d5880e7a62728e23cfc176c2555191c1fcfff5c163c1384f322f4cedc7ca282b1d04f5d72e422438f2ba704e570a2fc892321142d5f5193ae9e29c7d5ef01c861f24eb2a985d1ff2c587d514ed129e10fe6ce8e48a47408276326ad6e870daccebe40e68f35615f70fc9e22d7b82569ecde7a39b3bd6d0fe61f276ab95873f7a229c240a48d2b77f5a9642760616baa638e080bc1f44e170dd337ded4b2f58972e3058a59326afe339e0a8ce0fa751e2174417910d7d8616b30baa2a4daa98cd813ab26abbdd158a021d81fb8f307fa7734518636838b3259b2c0121183fa9064791a209768c570ee0fc81bf9b8ffb509d706998b77430d58a0ccb7ba1fa5e94e215c7653c44e3dd1f97320e4b1e5c95c0c1e2491b4ec321994dbf03fa8ba330ce1f0ce51030de50a960d693d3332bc6cf1396d4415771cdfb985436e028c8e3a48e58a5cec0051bd671a9e84bb80b2089c27373721ded766c8b0b42828075cb1fbfc04b3819d1357a1ae97f0943f94356ae5d4d9f3c791a3b07271f4ca94d30df3a45bf0b4734d94eee65ddc99221e0be09310323a9898c06f64ee470dc1764ccee8d43e7121b705f471785b4c18215e56eff1339a7d9be361543f156573a5f877b640b7771dcad25f6e84f1d582373a8b446aab97819fcf42a31e005987e7b6c050c7950f2f3b47b426b27d346d13a867b712b000b5cf6a003fc6105972125170d0cf2074747e13a4d651aece7f09bd9d0594e4f4979fb2cd4830fe96794695241681abf66336df3b72597680e2fa198ee0591e8837a1423e5eb0b4865f24d51f91e60475f9e881812a8fed11ff47243068842012dd9f79c4efd190691b3be4f804f29673b1961e4cf9fa19063b2b4b1ca1db31e3c814dc63cb45ac6020214d2bbbf1b76161aa57da7eab2d75e524c8b97cc06e27df53ea07c598d7e624c3c04b83c2786644fec6a2c6bab5dfb27c343110eebf920c090451f5d35dfa24e00f53f1ab9a3b477ed829b2092c499714079ab46b918b12518953e2caa28e1595f1908e2ec5eef3d305eb7892d51fa4180326a174b7876c5ed77484b13d1de89dbbb0550c032ff6caa9f6150437e384b178219cca8b5475f3dcb4b499ad4d5ae3f8631fd14e4d9e74b36b2ebc5b34366ccd4f78e894fe0477e6cf5308e3c7859b20557df8616d541205a1ac8ce52887db63ced57dd989f673c888f98d4d043be013104a696bb58896867147877d2ef9787b2dfde4e7c74af4285372039aba0dea2a768daa06d7edfe4b5212d34cdf286cc0f7fc4c27604740dbe51a31021453720a988b5d794dc6e81bdc0e918c2a80137d27f0b3c093089db84f3d31b6051296a14540aebc8321f2672f910552b57131ffc20a2d9e2064cd5a1f12cc43d8775745b312b5d6a9b2eb4bc907c491defc2e869cce261f2d9478afd83e76972ff4a390e07c0555528055e8d1da5ea8601b810433c47597499dd4b6922106919f1d035609b05e10102253c7bd5c029c330ae48658dd86a886a64fcbf76e26c4efe432be6bcac1fbe949fbcc24c8b5cdf22f9a0de0e2b297db2704a863be2618577879d60b5318bd9d6dc6b885e5a7765b44f575ff48862eb66f094018a321da4ac813f171b5b223413d745d2e08c99bf56eb9d15d25470d1968f194a1e9c2cb6dd67699da33130e761aa6bb72ad458c1585094448b173b72ae7070c04ae9aeef50edf2f48a0b59b74797b6dc290af803b54be1799600e7fff7dfa92b3138ee4d4f3ecbcfae093d3b5be3f1bfc3f35335e1046d6c9caa067857033ad363a77830add69bb68b70af36ab1237b46c4f3d51cc9df9a29d7983f7940f2995d3967beb2d828ba658b9f20b6a1a5543fd24dcda1a3a84f28035a6696298716ef8c3debd890991a6d97e576cbff679348287daecc5e9c4c7c7a4a099cdf7ff15fc258b68cf419ef6a1d666d330fc7919ed4cd978696b14aa4817a06018e8ae82e3456bc6d69b5ae5968726e17b65b3e4e4670570af050f522de9e8cf48f78c6e199e2fd159521f5400735958bfc2220a26d600d130f0b3c5c3821caf9df7b9c07b6f476f8becf340f4f3cc614dd63da2edf3c7dadf1c833d1236e340a7602859e15e2f3525504c9575f9cb8705b4b4a73d145c141f880a071bb87f87ce562dac60b93f523f550529c684db403492c8c7a425c8a702f5a229eeb50f26e71a68a9dc4d21d6d7c0987f6b8c6372c8fa617dd2bb9e25df90084c5c99bd698e5bc7630fdec29ece095950a03b1409c4322249f3c2d24ed127e96a77ae043f5f21b834e19e934d3c30dda236c24c88916bd28f24cfa13ce2f21971820316499cb1d53c0190905d189e95546facb4eef784fcd685984de6a6c4417aafa7bf8a39272238119aa44f40d4890b0d18698b7c34a034430101a78633ba55665ab6d094e497da22642951374f382b212e14f00084fcfed8713ff7a6b29b1d20ef768816bd1fc546410d34afafff48063e0765761f8ffcc0d8ebe88604a47a7f00f23cf5372a1872647bff4687952f30f284dc5e299a473067fc697721b01897df039dbc9a0fdfc6f9be8437d2a8c383335a030a78ed5dedf2493baa0e3d061d16f11d53d038d67d13be4e35f82a990365042c9db5dfbb14b93234c332d73f7de1834d8604930b157d6855709795d525ef8cdcf3fccf587d63dae04af61be589215b18f419d31b45f80a480d5407b09e9c813f6803422dfdbb49dcb2bc018f7ddc2ea60b62d571c02205b65407d46d401b3cedfee82bb955aff6b494848fd9dcb90df43e43f4ba3ce92b8a8ddd9221c983618df6bf767d301484be150a739a55a6b38c4ef78029ed936827bea6477c2e522615efc7591a86af23f0a031a1c774f144c172ea8d709bce2c0e2a76925be5e8f3c88612a7d28eb2f6e4cf438b93d6f6d37204f0deb749e4e009cd0161c850c7ee80c5e1c33cef873f17e88987a585d0e46be3f3b264a4520a104dd20b3abc38c789d68916e6d4a39708cfca908d2bb337166d3b431a2e9e320ce10211efb9fb609a0fe366cc24eef21f9aa66f0bff00f1d89a409a2dd9e0d65c31d0827a0d55251378ffa0762420f0bd520f343fa85aefd736b3b99de20e9fc994d927faa4ba9f65d2fea3f2a0f7882dbde3e5aa9e49d90875a7fcd4ce2e26b0bd79e3033f8ccb0124edc2c2f149313ddd536774e3233946f550c2ee58d3720daddef328f797c5225808615cc735b9c979b8ad663477d8309589787ab71087c603da9be17f1ad8ebb4d94650fb3048f85760d3d48c6eeb10a37899cae8a84d411ed541e6db7242ba742baf0f3c52edf59c492c85986310abb84b48927926c6f436a1afb7160049c1f707e57f1f26c56c944b3bbb8b8e170d5e06acd7a9c0f30fc3ec5f2af89b0e5f422d391b4a1fea97956614494490a261285a877b44f6b0fd1d65f4c1b4268854a7235240a8d69c035703c8464fbae4c0c0e854d9e882df88882561dc1b6dcc777ea7e3ad21f7c4936adb35c294b1c8589fffb2751102ac49b9236660280c55e951ecc292134e220d1f8e626e61c181c8481c004eccf337a86718fe912ae07bd00d303fbc54861c437a5a3eb234aca9bddfa56066906bec6db9a325d0b624fd1ad639ced3822022e90be73816bae0cd4a57225fb26edd064e87a5d4e8b30a3442881e1404daf0cc31ceaf517e7382b0ba73a0e808e34ee5f868850d5bb6ee7e441c63c28ed7b130ec2ec185fea9778e585b4ca719a56bc7e5835bb19d804c018e7f5eebd6b983ad760e066a81bfa211e885eeb6de3603957fd397a91dd77017998de2d53835ff95f1194cbe480f76073e4e1aee42e146c69068db180f1d4d28a8c93f94e2fa68e542f740da36f5eb8b8239503f20633e6d32be10183f0698f7537b994e36cc582b62e86eb930d9ad0edd787c5d047b0cb00dcc0c1488f59d540ab9c937cbdf58e30b0c52fe1288bf8efdd22640ccc9095a5faebe02b0b6c8d539df4c531bb36035a73006fca9e20588691b5d51b2dc23e9b28187bbc1a0e102d2a105a216905f642073b07e398398d237b60f140589a361b528a69447d46ec36df2d16703b99bbbf4c623138c264ea08705cfa42ac9bc73424872b9437731381201c2918eb1bd36c737ff42ef46d61e6d95a560eea9e6afc4d782e24f906442f4828e8eda42cc4c0119e4441a34418597c757bf2fe7c125e8331ce5a35b4f78813491653d1e484d8e0aeb0fb11158eb79c7a529cd618d0f3f634f73851a057e857103979627a7d156e29684cfa60dcb2e4b6461fcc692d8a67c80c3140b830f9f71896ed5d3a073cfc8b79f7d7c924863dfaea809eb7352d9f09881e7bd9df5fd28c766cca0c5de8861de1f930d2348e8cd2bee7e3ec01736f21b43c387f5645f3f48e1ef9b91d21b4ce817682b7f954b467a6378b2b2868d7fa39189026fb5a93ee97efc699a72b7f3798997f51c2ba9ed9ad8bccad65240219fed0a30be41f205fb3cddb0ab6cdb67907c5f29e49bacc16f755885c5d6180c79a2bc23875d4bf703bd88c6abed7ae6cdfa0e501b59f80807646b82fd7ccce0547cfc28507b85b1dc6080a0017615d3a2bbb1ab500c9f1af10a5acea84ebad3f32eeb566a467c1c7330c7b79fa734257e0f2aa20ee59cd8f23b3958dc69172f8c069f78b8f8c93b4a72f6e924828e22043b0042d1bd823228d90389d3ce6db5e83fa0c3ab5603067af4e885c26ffcd1c585b13d1d8ca571796c9252cd08d1f26f3ff67dd755a7121cc8dec0daee0ca5586f54fa1054a079213dce539f8202579c2a9e54c477e51b1905706a8f9d712e8ce7e791ff21951ca611bc2d7fc25593dd40c4e863255884afa1053cba7716724aaf37c050956659cfae5ff3ecc3d467e560790f3d3205105ae49e7e2f8587109d67669ea14b848ce2dbd64a90cda2885c7fbc69c55320b135a0e15d72e69a2c57ffcf92c114e30571a2ef995de7edfd9d65905255088ce8fc9681c0807738aa1790075b20a83e654d6eadaf9d1bd2402d8a1c1ad0aba9629b5564fec00c1edfe784ee1143edeb3f6dcb02d8cc37c6c0b417246ca20f1ea05131d2697760beba8cffeee1bb783a40b8f5eb75de579c06800310e69876b877b2337706957730e1905207213ebedea21c6b862a8175db7fb623b93a44e3f35bb657009959f1f4c60b4a6f16c4edc953e45f45225a622e4f08747300657a88021dcbc614f0d66b16109558f01639c1f88b883266a3ad659f023e73fb82f08f913f68fac010a5be2ab55ebea756be52e788ca0856034657c4a13a5eb7aec7b4a6d483d592c85244c40ec69d0df272cb000ccc1e6ac3a92e13a631b50faa0c91938d8424cd3251d7a658af63444e3c1afd16c8a92afcbd33efa4b97664fc2dfd0ed465b386b0f5f73f43692aa9fa3becbf8111f990d6d5570eb0034df62f54e15d7b0a94da19b8229fb5fa04f1e19ffd669b865e4a387656e40814d9e7b6eb71307b6c582f586b019c36db59c7deef76d72644aeca4c439408763281134b7f067a582720c3e9c3ae202f914dd1889cf608ab8b683b3041acc8996378fbb6d61a32b1ea07120587b8bd47b302b7be1c99821aa406ae0a3a0c520716bfdceb91419856dae7d2089a7f115f65ff672a65c1f9283c22814fa3709d40aaa82acd694f05f114baec1e59408dd5650aba6642fe0ca15d06d514ebd3169bfc7d16b93cc38f1863362db63425c1d29b8ab311bb83c6362b28ef25f4c7f9f559ba8a9d717d1330f932876a9a04b51e9bd8e574b44e4c2559915262cff115d73ef9792677309ae367cfed2bee0b2ba867e70f1e2ae482ffc566807f8372509b235e0d1c14bef786b30dd7a45981443eb85d2e6f1639328cd070ca02c3e952cb8dad9035ccbbfb4715229dda88d055762bedd8a665cd37f1dae67bb42318375f313ff6de3364d0ace598d30cc98c1afefd4faa398b408abc9c7ecf7f902bbc251561bee4d5dfbf13e1cfb08faeea80b0a8c7b6934bd4b4695790fb3f3c94ba491dba426b62c26157ddfefd5a0b08d02e89abce23d1ab5710f8887b8755cf47aa3ed4cf9403a3db52b8f624441a08048cf68ae37b8322f2fdf8a534d9a499864bbb2c19fca205ae0c47ebf05d8a51024df163604988e3f8e6b72234217f16c938f3bd843a16b7d4b337a56f9dcaadc764c6834daca61398e3fedb8d0b31d3e1785dbcc6769883746c04994237c057f3d80e6d54422c70eb2cb4371e09a2d9fd160a5e94ffd14c94c4c2c50822823ea1a4dd731d2879a8f1dc860f691cc5eaef0aac379494f36aedfbd694c6bb2383bbe8a5f9b2f08e5359747b4a3f81e8d53846df63c0a7202374d2708a35231880557632d4e4396c66944031259b5aaf3b74179eecb715d79945a36ffddffe1e66bcf24623f5daa82004c7333d1c04500807072a0a25a4172b7b9ae07e40b3342b10eb9e189a87fe85f7d1a26ade807c98d0fc33450c00cd3cc92d7b2976ae428afed6bfff82308fa2fd144c75a28b560f2178182d3c8caeaa92e906272c58d9ffa1b318e90ff2be1417690afee9ff41b8045778c9cf726572bd521ea198231eb01021b2b3c2c01772211bdd989c4ea51bddcf9a11266972586040dbaa9e647dede5368862cb97c5a757e965daf75c151c2dc6bf8d27948f558f2793be22162e342558d68dc69856ef61f90515a4ce9ef9f88db3d061f691f93bf96de594136313f2fc7107092665a0228d3ab7f931d49774143dcca2b1ce69df4267670006d528fc1e6dc81411c940e8cfe4b565022149205a4131ad3c6117e2489ad8326c6e3082aca1f75bf3bef2431a0e4162579d55bdfe376d5fa06f03f9c410309f963f5324c4861dbd252d357d6d154adcde2731e65d334f41c5e77747b70a3d0a11774a9a260c4b2d7b2593131875152c83bfd71f2c80945df7caefc8602fe83d8e2baa349e7a5973d30c8392f24ea53d44d6cd1fa53ec70eb192cdc93a3530cdc5858cae2a0a5e878c4f9db0c8a7fcb69fc7527b179991cde53e9e677d96bbf27309df2c9d08f89098a6cec66023eff0aa7efe817e301934eea62305d99d57295d8b127dde4006a73b04c99dcca85c30099fe6a9b21abedef875f398c50649c889f4467deaefea86bca263ae77d65b0bd50bdcc37e3737d33338271dbe4f30deeef4123b89592a056241c79d072e0c5a9dbed8920720eea2ac792deae2838196ecf300aec69ccd5e1ee63ac8c1a7c0033bb18df950ec0d88a6c70e2a2397782f8538b34c6d574b0bb683835a431cf37301896f439b08707850ea916200628a733bc33ea42346ae6e7daff2bd26125872203e85965a01dae0f6f88593d486f686acedb5de9ac7a00d86de2c5aa00ef28a9786b07ba640c023ec92c38b183fb629efdfab335a625634ac102c5a213066da7fb18d03fe92b41a71c55c9ded0da822b58f9e9a0b9ad37d1848a23c01f51081bb7d20917608c5145bb4b4178f1599136c7f1c3af683e29659393d0921320bfdf29353f0c175b49b6a92ef2c07e2858dba73d1ed79c6152f7a9208db405545f6b4efb0dcca80cc82fe1b7b37dee3973c2384908b4a4dec43022e00c35e157b20701e1fbb8abf100f74fa47d29ec157adfe31db1ca419372cf80cc2ea1e55989a313a072f119ceef4799f8e29d044bab39d01f940034c994c6d2f952ed901418a61e202afed10bc36a466a0418258a68f701ecc80a5811e747212753b1b84444e6cf6249670cc2059ea2aa6ae11d9c491ac0183678953d02e8ac059cfea40647beb3ada9e00a286ea51c15a585df941d24d85654c7ccdbae14a4d97e36ab7a069d5c7d12d2c9440411b3b4c5e895d2b6955110378efb022a08e152a7c27e9ac0628bcb077df90f0d49e78e677c1e44f82a72501abff76f674350e201254ae16cc8341a614f73b770e455de1992aa11e2184f8674d826c3a7dc6590239dcfe485d46edc23141c8e88766331784739306f63e9b88e2c1555af91ff577ec77f00717bdf7b39178b86d5a1f84ca5ee12ccea20981de3ac14d7fd14bd2b8f24462211d8f2aab21f547e536f49420da4136e3cc159a212f8fcee3052109d3ea4ad9b102b5b45f84beadf381b8aa41ce6b5efeca806cadc5560128f10160bfb4472feabbd50c1c1688984897b0b5d7aa6020172fa05d49ea13aa935b79d4eb689dfff556513c2ee2d7654d4900769fb0e5a2b065a29467f992a87ab2740bbf7b2b7bab151923e0b8e51c24f1c386cfc817e08ac1f0bf3f673ec6db4185fb0bc33fa1a0c88cf8391a95972f20e983f3e129877e3b1d90e0c707dbdf4b6cdc8dfbcd4d9842b544d3d7427c20c6103ce34128fe00ceabf4e6f74dbb15c0773f27584a3e98bb14062a5041fe23b948aa0af8db9e299edb5710ca44ea7c354dcd322676186dc8ad21e82a704725ea941fec509aeb865ca892ceb79f2cba1149ef5239867b54aa0710cbc70a0eec77f6fff21a94a6ec783ec9aceb78944e0b121358d2095288d66899b7bb08e1def3b033479622ec97112c12a2b9b3daa4013dcc4c8d81567cf49fa16d2b1987ebc4573f1c7d6eb75753b782efe25c89b3d01764451d78d942a12debfba2f74f332ca1ceca39d7ae74fbecc2be72a1979f6370a1492ba720f0efb14156ba20be4c7b29d2403642a36a25dce375594d4c40fa7e8f3e373f21d5519015c819b223abc7d2e046c1e96ef1be6c70fd5bbd5f9343ba0a0b79268858469ab74342847223db86a5cb225a16b532e2a16d60d9eb96afb72b8cd37856aca0753dc5d8e6423218538199b2a9e486431cf923fb5143586575e739447f057b3c168b3d407147cfb2a87b12e66eedb1911b565eeb10baf63ad27df19f1299561ffd204b0f3ed3b118bc76bee217eacefa5b20c881af3d248b1e78e8ad2e0f1b3bfc5e05113c7f37766035cf225671bc7a4d3b2665201b50247a7ef4bc2f9b31666e226f59757589e7ebc0fc3fda8c3a33fdf6c3426cfe4fd136925b7160e4b0453f1a64fdd95e127d2306bc679787c51beae4ac4cf0f31876cf0e755a75c61ecca3df230f1c06cc4a6977dac5f6ca6ca86cbaf3841ff76ed5e0ca57ba650fd45bda20ad45b3b2b4a148993ca3e878bcc13fb6ebb9952a91497965332962b21b8b0f1903086a515d6a1def270bb224345671191832d3d8d0306f38bf08a77dc3a80f8bee02d355e7b2176932b2fbe5f84d23f8808a04d2e37eaa49bffb62837affab0dc07a3da072dd349711788535b02c5871fccb3349294eeb7b00c17fe07c2de354369539d8c983c6d925b284e57845be8ec4688f03b3682cacd0bba38a339ffe5dfe34d2e44e947471e0214e74579218ecba685f7aed923ab618e79532858280e0c689e0f8f8439718841266eca568df5707be9ef87fe118df899413e90400c85f5c952e4334759664dce7a92e58f69e0a3a2dc84ccbdb58e69ebca1aaa24405b38a1f06db27b4839801266a5c186ddae0ae0660a4f9b06cd741d9c11d275e6287dde2badef8865427039193fcd22d59802c6639dd611ed80e76fdf0513c3ef86fbdfc8e3a4960998912c83d4ba1b1093b89fef4cfbb48354c2a2863dafeab69c95f2c592cee1b81c1146e9ce6fc4584c3c32dacf050d1dbfba141cf9c397de87551a249cf6391111598428ba83ae125f1041b65b07b43c3c0616476084967a6497d30eb093823b53643331f4ef3d92cb83e6e402c653b55685083c5cb2cbe113e0ff47666dad8cabb3b14422904c6f283ba9677638f02016035163f643273866e9338f7e80f861261a265f1455765729322c50f82d655889f5c4634fbb777dd172153aca536158997ff55480c7ad2b676143631895c166846076d94f9dea95d0c1c9655efa1af742dc4b4b547cf3c81f792f847fa6451718a37ea8a9adb705428c09d3d4bad04822a2a92b4824ee2b9a89830022ce445adb8c9a9d3c4febd5d96daedff2295928e95070fdcaac0aaff09db2f3a8c7015c0e96708a158d31625134266b48aac74a88115f89df7aed9f646c86305919cc22c33ec79047b59d87266962781508cfb342bf33fb35f1ef8b5c8a567180ce6d17c8e9f1e0bb889763af83949f4688a79e8d8d3a8e7efa883023605d759a520a2506a55e68898914d7b15b91a9b70023e8e1f2301d1252fe0636f1b62c244cbe740d58b8f0656f08de9e59253b105903c73d64569e69b120281b2f15a56526f9cfd6586889191e740fe3b85446944e5c1149668d9b0d7df89eaf5fcb2b74d46c1baa020a19521bd1a6062465a48928c0e607e3ded0400f5a8c1a2c2f5c587e58b07e0ba6cfd5174c71c28139642651be6a967a595c566bd7eb6a21911dfd5e87174411c1bfef27ec89c8dbc9cf45f16ece8e05c61c9788730d5460ca81ee1f0c7fd0b1d47791b5f59300b81bf6849537672ad280f4d393be599431f5bb00a8d313d9cb1fae81d1b542f2bb30f01a4c1d17373311b60b8d21188538267ae55799e08677284ab8b4224e8d5a58433d4ab4eb176ecf869e052377d4f3cc44b620a5f05145cec7798b5e70eb52ddb1ee0509987eb0603f52c90f2dfcc2b0242c246df2249cd43588d3aa20a2e1adf2a1077c536b420fb8f3b86f3da3cd9945e2ec0657aaf05c6551377517fea9cd2cd0836c6a47fbde75ef83acf95dbddc1b8d931dfe9d6c5895aad68c5b5e5e816ea580277ea81b9b04a5656b2e7031aec5a1f231c2316978f553c7f70bcc7614e367b4bb3ee6eec0a2c895e2d2fb99b261ed36f38549d55ff78ca3ec051ab28f75699830c67e954f0f1897c9b7ebfcdf524bb7939d64e99bfddf83f2745abb29efcd3f3280eb61c1ff5811e1c08ad3ab02418588de1052c1f1057474757125440facc3f580f17a73c1f8a4863661b2e85c47b945c5ad167317d5b6e878ff431e9c28768f3f6e729edd6fe3280a249aa08c7ed80b484a319aea04c8bb47b59b225625efc78c6937937b045fa2ca5c92ca7e1b906b08c7bdf808bcaa935db029e4acef1f8a10ca2b61e9844dbe875e1d92b735efbeda995d95cc204927c8552b59e85cea08319410054113617bd62be852b407607b571875e61ea493702a909b029d68e7df3ecf773c1c761f19531dcd2b71dda471260bcfe8bc44210a73be907b73106d2dd8403b3cea2412c733347f27a5839ecbad504bca93fe7f979ce1328e8d6943bc0c94e95300818d0279b2ec4df149769dd4b5d5234cee31f6ae4373c0863e0e3628e2c9e28e4b4e09ed91adfe907ecbe7e592af3eccbfebf91733369a85e90fb928c78f632de6499a86d9375b0276d90662fefc279fec68c31c53dd294004d44dc197ed537ace3ff2529114743793556349c7575f60b53095fb0d3c91046200efe71e5adce9bf5ee0e4a73240386e13313257f0fbfe71cb48d79107b01bbc65ec481b09341c102432dfd79b00a348467b421dcf2f7618001a9b27a59cb98ca4ca55677e08cf580581705c5ada7e5ac2c661d065e393b822d61898e128b74403c2befb8e56fab44ecc4b85712c25977859fde4f2ae275744e103dd8e8cdf716f8489cc267427b53c613f7031d18c1fe6dfbd00de2ac223cc257ba15968678ff8eee7ad95204322dc30ad8f93ed1f7f3a0d7933a933c473136ee4fc79a10b912bfb65a980a86cc1db590b6c9c350e00f3aaf2a8217b7251e39987aed8e05d23f448af03418f398464ccc3858d18a292ba267d4e6c37a248adc6ce7a4ef8d0c87572c652e00171fefc9dee11d3b055007f8dcff1ba1f37233cbddc9c0a413e8858f24139c9f9a68728c5fecd892b16086868d1f8ee5e73be9aac4bab48099965f2112a69acd5444dce05ad4dd1857d88a6917a314d8a7864d4ce143f0dcc30a42a311b4708add834c4b005be192a8ecb27829179903440fb0cd7e4b690fc748b6387672b185c2437d84f6677828e7867262564067e4117d2ff717476ec215980f0f66e2a0f5a7561728b75d0370bb903c8398383755f285e1ab7f7856508008ff174d18bdb884ae53d1251f2cdef89fe8941efb18ab73d2cd5e0d0b5fe64945f744aa1fc8f4f5238ef2ac4755c9b2f9e5075d19e3454105caf8a9978747180c51cd396e13edc981f0a5146cec4fface7dc811432c59aa88c011570dfe7a2016a2c7e177702214423574a33ac223ad88896c36590e925d224931d49477957f553ba86ab079e969292c2f57fcd09aa28779df5d84e9cc55b2e863fbf180d177050462895ec327b4ca937083f76ade695f66f6975636d4bc65cdc6fd784a65954f13bbcb4d3f45d9e7f6d93ffb2de54abfb620f3232590a5e0c282a9a426b055b154c21cbc9ecad3f25a194e37c7402a12061f073563be17e079f08d3f8372ccb861b59d98feba92679033b38089cf7f8cb2f7a17755f26cc2a8368b194ade1e4d4a9f9d9e078e0b18e05a368d5d60e1aaa99fdfa2a4ebee7ca8910b894deefc86f5426497128126b5dd3b6f764cf62c05d3659b97dc3b95107fc8f3d5e0fcf479e72e1dc2fbcf4784e14c04bf8282e932eb8627053a949ed6ac6e087d5de908a06683e5e472d8d432afdae8d15eac00020a80872f80267dbc6d8d3aeebf4d24bf57b00ea5f598516181daf54f347b9d9854a0e126c5d817b0cbfe34fe5b5d257caa94040ee44787a12d38466cf3c23396d040613d32331c786f37ea85629da345a6aedebae5ef8d6e848cc61d5e9d8adcaf715a6f4a686232eb41e95511079f129ce29b8a9be7412185779ee361474622f6a9e29839f85e15da0ed8e53d86fc7091375616f1cb591c76329be7cfc6c888c0cc2e6f1df0d428ee39c889fc61f8a4001f42011717944fa35cb69ed4f13c9d275e04f98814a9f739ee6a26d599e17b969fd84d8711b8dbe914643f07e690596680bd341999f68361b8752c23810f6eba5f9ad2a812477d7944283cf0b294a10cdb23dba4de1b8f8fa792930e5ef90b68d52031b580e01bcc3b3c514f75e35ba0bb87f4bd8aaded46dfe507d27fb02e3728b644a23d9f8aec2036dbf7babd298d1e9cb4681951049837a72e12248c261ce49d1f6c6b4564d07c149cf271e57f8ffaf17a66d06d2eb4450cc20f2a40aa1b62dc13f9a30c983b194bf8e8ce2c9ff71f551d196553c9a09303900a0ee304e8f9fc086c351245eedb7c610cfbd2a52c297401f8f8cf5e254a36cdd48fbfe1578681b6fb78106fbfafa2bf780cd34e7346ed8f1f3f2ae3020a266a0bf3f9c50ecd8371fad27268d9581971c7df623b5302772cf18a5a29150fd962c33bb3989987568a0c000f11909631df7df7eb8f7cd6ca2ee7e7416c8172ef7648136a559f3f5d9421b60b5b7bf92be6bc32565bfb71a338176bc446f4f5f6b2a68288334325c3e0ac2f72fabf5ff39a74a951926732ddba8bbb2dbeb02d1fce03e16c8c284c5eea142b5e9baff4a540990de916569f9ba82e7d4152b1291e2960544e94758ab9c758f69b5a0e2d259979704d03482424e7c824d025ccca49d11ae8d389b8b1f5a6f7b0b9e40f6fd9bd666f2d1067f9ff0b1573c39e63c02056c6d35299e1c2583323e79fff20ce103e50aa9771e39445938a217c2976c5bf5fde126d5c86ce95b6a516e09dcac3ae59da39d12542e6652025f849ada58e06e32884005bc13e3e52703aac007fbb714d3f26958319c5087b3510f6ae79b89250a137cfa365cab1efa66bb0a5eff4ee5785062d9f7cdc1fc3deba2cf06867dcab842f8be7d82a456ff5c61dacdb9219e3afd6278b6f898b08c1696893e231f32ba0deeb24c92c2ba8561c3bbd143beada88dbeff22e9d101f1e389126cc78db2ced0c5c275e917871fd5cd689adbb6794a8dc12bbb606e6fe25a8d37dafa82c78a377b4602f9487a844561be286cd47febc691025d220952f37115bd91c0384492566571b944f0d03fdf50994ed34b63678834d3ff651f36a032ddcd6d35860bbb40c41df43db0401fb51996eb99f1f4e1207344b154b9df143e0c9a01593e2b2da4ea3526a832b4cb438bb1e8008f55ad01d48d3e522b42ef5dfb821fadfdccfe11997a7c1ac1d653d53945da56a6b6353b7ad5bd2f4ce3f8704fd7f8e0338cf07bb0a381d6437bebc371ac32e34998d7b3ed861f1406cad6a108278b233b635f68449d9f91872afbedbd5ac649461b36cfa0c2590443746fbafacd431bf8d0e029fe88ba4e77bc734f1be62be8e25b6ab185268a52d1892a856aecc34ae5c0031d2606f77f48c584e5cb4f0501c54a70b29517e7421e11955bc438f1f7fa29a7f91cd7df820a81e92f3c7fe0fd750ad4d70d64467f1d3d1c98daf80c9365e95837d4d38a748de1d8ee5351b3a372997c2302c5379f21ac9e224eddd348e398ef829e620f05d2036576af7914def7a50e997df6ad644aa88402805572ed95ca7ead7fda2cb203d3f59009d618e6a66ac4a4f8aef99818bbdec8f4e2be16cb709d5e31320319bca0b66af81738682f0df375b258ab2da8cf84a3ab80e11153b25bf5e0dc5031224cd3f08f29beeb8ee03996b2e4c6e6a7ce677de45808720fedd66287b83c42b61f87fec1add6831bd1d3b38550683837d88c1ecb9b0351ae6b878392547e6a0b3df200c89fa0f395d1c72e5d85f3599f38e54547c926c358db1ccb96b9474d7ec198636a2ba4c1723374148533b31d6f6a5ed0c3e04869fb2700e0778fee8cc39dc1b710c349ed11a08232401b34f4d7068193c2bdbe88306681684b202c0b2ebb0334b792b956e2c1efe94bf2ea450595f52b92f341a4db50cb9d00ee0c437e4c5942152dbaf462ba362439035e16fd1bef9d473278a03242147271963ec946a4cb53f958b0bf3e74ee54c51a0362cb461da2f55fd37d5ff3d15bddf90c2772f28c76716a671346f759ef3fc854518741e72e5221f1950c70a5e4513c37a041436dffd738471840dba1427025d028dca875d2f951e2544879baa0e4ceb9388d7d2f9b10a3c72fd30949a5867569fba09cce1ba03c5a3eac254818e5f9bdde3f652d5cb196fc8c5db0da2f8ee5bdb72b6de729f036bfc6e20d58df90fe1611730732c1a6b2c3aa349b7b058cc72cba6fcba3400098f3972121417080f5ad093c5ece474bd8697a27649e1a9aade64b44320f159a69164b32fb714f1601c5a5152be0c72e79b9ade993f4dc38c7517fc438f38bf2917cb44faa0c863b2f187b459b96b5c4faae108eed6b0bc3c962d3ebdd0d224ef7ba7e004f33f46c7f07da5ffa9c9537209d2f2b1161a75d51cc1e1b36011f9070a83ee1d4f6f6ab8670213d0946e811007fe23f5799b052762f9cc221667cb750ff347692fe8f5bbddef448902dd5f59e85e47e99ef0de6a9c6e03cdc5cc214e2749de52e304908d686ed2ce47b0bbf3715de0c23ada3c9a3c93d739f6300837b751e8903330fc975bf077cc313522fc0b70ab66f4847bd253d56c1b8ae1e2aa401d83041879094dc62ba34abc6334901dbc8b66088ecb438d3472882dad85c73afc71bbf1a36b84f801a1b598224bf735f81fe142aba3c47cf4daf698ef0f00e84d07bae5227e2f3fd6098b0088b3322dcfacab599387ac7d2c63e61b444692514f606bec62442e2ee533c27f7bd088faab31b2d8cb081b311cf12e287df646e7529775df317019181ed7be89efbd4b88ed670933781894212957d562cc82d106a2cdbcbc7492d6352906b6c52faacf50fba2fd91c1fece4cbabbd06734c782060199899ed81b0c44efd3d2a56816d4eaa80aa42d9986082fada258d83e695b225fc94806bbb3fe15b259df364f36406d6e08017d3b8b3cd0e8384abd8ecc510fd594778a240330f11c6a02d93cb6c6ae9f38aebc9ea3fc9c0d39395240b7e532f0a738401a204c36ad0a92f294f9a02cd6fec0a74c938006b3475eb24f0b97f65e0690990b69c925c1f51da3099930c2ce71e2ba8939c8d0a324fc2b682e09d415eef2001ed0bd6753a34b66f1c202dd40615e58d21578c57783efa4ae7915206fc0cf91f2d0475b232868c20be0682e934ff9f294a0c713e3ccff23770fc3ee0d2b5a1d4ef2d25d14b66f983bf361b34594da182db5edf2efc9fbc900fae73b0e1ebf15f52e7ee97ab85f2b175b8b27e5fc4af6d2ee4a19816db68935da4502fc1fa50beb0194819a4f416cd2240fcfae152cf2b003dfae59ad6c33471b43ab34da00c61578c7c343a88c97b3e069bac36e96e16fe69e95d12f9680885d73ddeae6f7532b5e9432fc643c531209079a03ab4e5421f8e19fa709f8a8a5b0dce8f3ba597c781fa9174c32fb8b5b3fb2631e23ca5091149a6abefb3d598d5b16e87507c17a9f0b6784dd7c02bf50d0159ec4dcba5783284f1e1cbaac4051dfaae58208f6226ae56451d03950db3f8c43295176a76a69c7aa9457da81c080f65a7ca0087a56e8925b52e26b58ca6711b39282be178dc9553353c40372cdad59b504f551393205c974437a9ab44722dee37250e831c7b47aa5d1a67d41bd64fec613388f29da756f4ed266c797c037abc3d1459855ea014f5e3b092edec3cf5bacf059be7ad350514a368cd9542ffa6634e7556a3e09a10540a23867d0955d64f4b05daed284b99689f5f529f6ffb51d7f16d3e062cd5a9b94288dcb9f10f760df95294d5aeb4e9ed8c3482fdd8f68f639236da71774315a3544581fa3a715372310599208730c663a79b8d8a846d65e51e217294e1e75594492c03d5bb142d23a01a00ca8fec6ec7dbd63cd1dd937f7fa7138abb52aac8f674cb47b915b4a0b2f0eb77dd76be584f2a07ab46b0bbfe857e753c27494ed899e7c45e81fee0e5ec6f82f51f237d2c1f399cfb1050719ad5efbd7cd7c943c1fec7aed869d248b252f5489e1bbca14fb82d0f92185782dbede8a345723c7a1badf647aa7f98c6955c5ff78ce5621d16f95a64319ab7ae22e9af3df7744c4d35f67dec3b21115e79b695566ea38d5f4d712ea9a469cf98cfccd6a62a0f857ee6d489fa6bc1cf380b8fe95566c81f1555be675bbac6c5dec099201d6f1808dfda5237a98c07d0994c7fa84974f4d2d167ec6a77e2b6423e16951265f1211e59dff1a08dc78156a5dff11a223b423d6ce06c4603bf26655baeeebac0c4c02fbc210d0ab72f6435f5a4658f546f541a72b2bde2f1443900f0ca0bc5ba2c872623733a9ba6b9d9a28dcad3f953c3a01cd48d71f10ab512d267d1670db8648ea51e4da20856544d2ec7f4915bdda7c50733a83f1d7544d144de2a450bb57e2290ae1e8e270c41744ce38014f11f2d86cce4a08c7ad3ad3798b69a3c48cda4c5361f388af444d7ecf22824c54fd67a4bb86d223d3482820558312ebc271e8d24163379b3a89faffbff9a8e6fd534d518c7a61b18214ada3efe94b33e0be5c206587baae179858d7554dd46f98fd25658abf187ca8ee4edb2bf0599a7707821418686f6317542fdf4a5ca7ebd6ff0a5c52c75bcdfe771ff4a95beab0b9d07455da9f29defd0f6c5c187ed3ec23538d27f7b04befb5c4af9abe101f6e28c908194a86a04a07b45bd8209689830909cc9aba12b1872ce3d5868c87fe8568825058e411d7c7442e558f815bdb1c11d817546bcba7533c6aacf2f4995432687dcf6194aa6d62d41dbc011344c4e08e10363f6a1a9bc2df535df911555937713f11b85f34008aa3dece08cef8a7e34604522a3a69d88d4d460df77d8e42194163429774ada4c21bdd40ed6b28c7d099252998ed2a05d48d8a37c1757c7ef44884e966840956032e9f5c34a949ba34ae8715aef935726d43b750bbea0e101d2930ef48c625b7205eab4975405b938f132e602f387f297b3c7cb54436aace96fc8b3dad228e0edd88e0923fdc44196556649a14022ea41deae15fa6f9a891ceb784ec57abdea80f3398a49118da5e505b570c8c84c2c226f21f7eabf236c864c42ac19c74d11707e8930748ef9d8a1d9fd1a9b492dc6da7d92d1b0cc87722bc6d4537a25c0d77fe7a68f9232066b8ca9489d05401b8385d0bbf631d3277896f854ec301d7527d0cd87a254f4289bd0897ad546e18e457ebb240fbac406b72cb56fd4bb23fa02157d3a494fd69202513333463823532452cbf78e2cbf2fdda6289b1125acc188f7f2523e1d9ee05d8555215ef2b2cf5a41c7dfc59d5ff37e0de35b183ba3db40ee2d715d286783c968af20bd53e8ba377ed4c568f4e1f0ffaa02824bdf7d99daa9d68444e2b28fca2e065fe81a4c752807552f7199cf7e866381d930703c8602e53340534e021f93b7647b541b2aeac7c4d3defa8a8a023056c02beb03a6be645f61108201917b4006f8b70a813294528f134594888dbd64f0fd2b282ab7d8ad21549ffbe3ee34ccbb87f423f0a90c8030298872dcccbaa189fe3be339bf1cfaba6545211b443f47935dcf613daebf3f1de41931f9251aa951427990b4f4829f38ab9cac7fd7eff8fccce9f014a16383f98aa9955d9e619c78b731bda0e19011c8fe8e052c10cb3b3eb783db85b1572befd9806d50c73ff614644a2bd460b8bae69823bf2945a3bd72e5aabdc619645d6b072096f32e45c6d0aada5380c372c4606e0a421bea082cc093c81653922e1f1323e7835ed89d8fb5cef0ce70aa38af43dfe67faf7452f38dfb09752af3e7e2b50b180ce883626e4dd1d4732edff46f5543820c56d8811a424e0441004eed35f26bf0b1452d43267ae215ba502cf16fecf770bdffd0125f5114f43d85ce070a59fea4bfd69eadadb5eb5228641d5eaa6780d2f7e01e974df793984d5a25c4b94166137df34e0279642205634b488a9925d49eb0d0fd52688971da450999903c1ab819e0402e88fd0f280d7ee44a9dcf856bb36bc525f153a6272227f9f16f7fb192c56f54eb4d4481f1d292d32c9cf1c8f08d3c8b31101e33f810ebbd5e3a40e58959a1bb8bb8434d39ffb8c0a5139ed7e9da55ec453644118e7b4a7d72ff594c5bfbb3362b6992e03fcc7b8cb063449bfb5ea74d10f4e242c54ac8db9075adf63aa72b19a6bed6c50143a563f18426a0e6ee14f94726ed4f39c123c12527ca2dfa1d4546b4ec99514dfecc825e6151835738f35ae5c7654299e4e2916f090838655ee83601065211bef7f188bdc429091b4ec45996d9fec58a88fd822acf28fdd7dc6918af91479b6481d8ce086a5ecbc7005e4d27e3d1bcca6a6f32fc8d2c134f7c74b418e8d3305c74f8087bc3aac22f45f8d547021bb686e9b8cd24d5d0132c5374f5fa04a53dd8fe1cec24f73a38ea14a678dbf9488738f8401253bfe916b3541184eb2d6bf9b900f5b4d11fbb80ad3746e2ac874a44a60dcd82a751366998ccf67d0fb60720de63fa6abfb787edd6f949abfb3e6394fc884480dbeee5447674a2c7c50ca62ab2b12b14e241830c59c3d9337e9976c7cebfadf372e08309886ecbfe28a27ad27b88a026a8dcf99b751e9f7e02e9d54f8d30c2f8e7bcbd30f0f17390951f3a729e516309476a6f8cd022e31f086cb629e85f687f0b0737268ff8d0655cfe9b1ef7c79b41b6a0248cee1b1d88a99927542d5092300baa36f3e7ee31b1d10db6cae97e6f91c815c030b4a596c9c13ad6e610d65a50d5280aad9d4ee44dc54d46e50388256c68db94699104e4116ecae609e38535389a61c0e20d0d0428f45e9cfc8df9a6b9bcad460dd753d2d6485edb920bccdd104bfbfce308ed5dfa0c2b737e525d9c575aba044185ec22706503dcd676978527a285816be7c2520ac8b95f21f769c62908f31f66abfdae2dd8d84ee01f1630d344e4a401a2332390f5809efe0e64e8377d501a2c0a79b582bd556e9cb6903a446cc3ca3efff065efc791ad6fd37e14cc506740e1a45f23faac403a8c89c64e826fb282028b0d8e4a947ef587961184559dfc543fa792315ed94acbbe7802103fbdbd99ebbc0cd0c2357d055e76eb37f625dc1f590ae9c4c1ed5756a99f7aec74f6aad4d076adbdf400add3297115cbd89325c7ce5b155669c795628869f911ba030f80cfe7a75a1b36f17223dc14d00f425a712cc72a8abba354dca6a72c18f2df0d91f28a282369ad8bacaa632279363e0f1b4a1fe1b837a7eccda4d2b721a6f16ce4fdff6a49145696f987939f28fb1e637b06da406d54a38a8be52b0eccff534680c6197ce37c36da19de5912e82daa089695cd9edeaf3a75b393c2c2a38f4db13161a3917b2ee41fba28c60f9e2931ed1c3d7f713d2df92630be3cc2d0483ff4c3cebfde739bc6a48483c8304aed75f34017d4cab0a8e15f65dc75f5103328fe91681acb165e642bd4449edbd5b970f0ca2125c8d4a84a363f22b90365f07b542235e7d19d8a54dec05076d6a43a6e6cbf8c57979def1a5de5947b51d9f67291f95dd88c3f1cad545fa927604e4d9f80f9b60e60607ce24efd0f51081ece8be4c0611f6e5673fb7b928645e5625cac4ac50a55466aad97390850eca3ce64a7a5985fff028b7ea04fddde58a3f6f832acc27bc1744bbdc562f7406b60acb8c17cbc95f91167747e68e3c07726a1d88aede51df2b6b5c70e32c7a2bdb87adef8d63afc26f4f8e0049d185d0c29182fa1d2b370d30ef7dcb2b7a5ce220771608766a50d176a3faef82a81bc95355f56aaaf6a224b286b6878d7969481e6a2f735a2314fe5d8bdd6ce17ece0a82d3bce594594f01d6530947f9a2d4b079dfa69cad2c2e4f61db50065364a242f8774b73f0a7b06ae864714fd82015179667a96b89a3f3651ecb4b7cc425a3d73174a9c8a98994f25001ae46d8411cbb334b7696e85b7e9284eeaa779e7e762b4f47ab492def6a6886113136c3d18128a404759a1edaf81512e64a41ea87076f8be6677c3335613711bfead7ba61b5e90e22dbd6256dc82ccc4ddf6fceeca2f885817749e98f37f4d24d341cc6b96de7d0945af18a047949ccfd55f4200a0d1fef2ea3af4c8b7688bb0c5345a7db1edc3afe6c27239f7af61faf2d54bd95beb8521830574f4d9c10092a11b147b8232a86bd09cc9f4c9af26a7d018e725067277fbc95ad530b5893e12726b5872db8edffd32e23aa2313389e20fd2a4933138fe325e5777b339da09603a7e0ca08aae84f55fbb94d410c163c3a20f38caca0467836a7cfbf6f57cf81e93f78af939ad1cb0314eaebbcb04a679b2f2b7687739174b092b25a3ec7f8d4c89c279542a4d8216841f97dbffc2c0cc42b2b837940725fea470be5efa383d1023006e52c895476a8e00e2b1b248789719651ef7701de22a80d05cebdc39be7557e9ab65361f898b61c9762d404cdf91a9c43859b76d1d019dbacbe41ab8cd5d5e7257a4ddce492d9c421a829ef4d149648eab7ca3bc206ea1bad2e19754f82b316a4b461ff5b9d7205e315dd3861c16528d47ccefc8db4c2f7e5615a1ed9d075638679990b57b2e9110f4fd50fb4e4ad14590b3c4f9eed996bc8763afebfeab71509a32772da8898cc6766b104eb425b50f144cdce7c04b0757694a0d893ce2d62966ec8f9ba08ea45c470e6c4ac3cbb202df5c6b94fe620e95e80daa68bbd750a09435404720158869a5a3eead71e44abe7cfcb064e90a7aa114d7ce2626a6493c88ae0226b79cf0a8adde9770cc820bd3bf921e533c7270f772bc3c1e612d1d88b18f9d5d7d576c7221b97b4a9b690998a82a5c096530c4bd14e1e2225073232ad5b981cb75872893b613abfadf2a2ee6d0024ae9511f11c74075396a63c76fdc934c765ab8162964fb06d74ce62a0adee02e33c03123ceeda467634a369b9e0c2be37b14ec286446cccd14fd9dbd106151dbeed95894400755394ff51ac3323b098539f5936512ef3eff8e70af4015b001a647e6d0acb77e8cef35cc6e0adc3f69b6e67baf1980cc9fb7ab2479997ba154f7e54def9c5cf70091c55edda17c9500293815b26859dd721806f42f5da6433e438c19619f1cd4ab81fe0ee7a69cfbca5f11263bf81ab848834865232b10fd3b105cf445a1d4663c2816f6658c13fbca7787bf2cbfec26c0f790aa299ef993bcf9f7950dba4fd66627b6f0f0571308b24d8ffe3a94b80d3cfe072561ef440d71c70f605fe47a5f928c544fbf0788256d28109c2d6acad4e6cabf4c1e7ce9e51a66c5333f0be1667055a3c5ff3b38cc907cbaa0ea692dfeb7c146af6687e59cbab2f9afe4753137d45d2f2af90a8939f108254c182a2ed1abce7fa7662f0d35fe6697ecc2fbe3e253513673de9a946d45ed643401bec5eea8f6e5d4ca80bca8c02426289f5b924152a886ea51cc3e0d5f00c68f36bf71ad56c5502e355c39a939a0f409ead8836a614309499317ae4379283e01a2403d30b0c6165e58bd3d24f4243406ed00757c553fc253be0157ca26858922e2436cb63b95f413c04c47304999cfe52ccff5738f3f5e74b1bd9c1ef90bb6c01cddc7d530c896a8758743d7fe5bbe9b1a0389dda86450485de75580826296518265b084cdd494fe5ec3c9c5bf867849af0e804a6a38e643b0b19737754ce464ab84b1efd1f3c297ffab39eabca019969caf8c5c5131ecd1f2fc829b2245c159b5570583b02bb61893c173ddaf81577c99df5bc472766cd955e8658fbe4870af40c4b638cb4949db18835e63bd13f930616c243498ece41af56a70e401e326304ddd07450f3744c925301bf5b1a32564e33daa66457bbb316d6556db376dd1f5a205cfd92a489d7b0421ec9daf7aa81b5e90134f32c4f07472fc1e1a22bbadfed398027b21e631a51084da4c1f098735af6cb2685da852a01d6d3f3a1935c8f580d4b92e523101d1dc840deaa24b189d4e808db5f1290bb774883bc72d90e3047fa9cf6aa9216ff7ce554984a27a69adbe02e9fd4dad9bcd3e758a1606eac1999e9ae394c57d97bc21a68fecd2b4d979aadb44e5067584118658445b5d062004ae497fb67ed077db318272e1d9f955a32d16c44d0da86b61b0ac97125e2e5e29ebc0b481fa3ebcc809a229079f0065a61c0e9714587033df3949ae59439039c6f3917fedecb0bd773b357732655011fcbc8fa8fd8084b0f64a52fc97518c7099b00f478d1707f35fe5a81b70a9c75342b68cc8cb5eef0503105c9dce91ef3cd0dadb00778adeb09a52d063442cd6b8cec373511adf399eae609e0f82b52dc8b71a318f9516c20ee60054c4bbe1597f8145280dccd1630fca527fc2b4104fb419d9776491cf50e9afa8ab6bcaf0558aea435a38dee44598702c9cb1848499545c8f385e7cef9a17affdc045794601813b41eafcbcedf63f6573f432f0182e266facef0aa396689ce61981e4139e7ea463eae94f61f14635e5733f8814c32818742d5ff79c0ac0d270091c6b54fcb2b19db279d1be984fd9a3ff5abc4bfef557866c3e44b0ac5ab54a15879327502b371307943f24ad9b9067c9087bd93df38208c62aa8401d82eae6214ef6986c20756c3e4b663f7f460e44b8ab15e330b237d0716dca4d1d81515437045985b8c3e4c8514cc1b1d4e0f03de7068dfa87fb2481c6f5ac0167aa45434c29e687b35f94a1579245d775688a29dda8377444a0a0c22e303265a6831001b8b315e318197cd3f3691267a4dce5bdba25915537789ab741c5bba5d570c9db705fee1e47b839b10da6e2db3352fb7c916dd22a2f3fff8e0de320016ded41f62a26bbd24850a9ad04176b710a7f0876936d91b0aed726df23afd8094e24ed1a22b67515a867c26cd76fcb9c63423beecff6b44a5c1e8fd2ab53677cc921adce113bbfba63c292dfa4bd4eeb5707a8f9fdcd85c5add8f802c003f1756a6aefa34fcc08745c8c5ff6aa1d0edf26dfa14aca8abbd9ed140b49b518529cfdd9844027df4911b049c9cc19bc5c322bbe3a3b517781c5bcf007df917ef93773c10f1d4e5f2a0818623a8df17ab9d25237598952b6cd3601695ebea55ad5e4296fcfc983fdca6f3528dd6061b160663acdec8a2da2b02d77b3f23d8150c16fc57941b8da0262b6663c03ce96bf9dbc9d45bc719284544d334acffc1661288fca6ac95acf95b7954a55f47293c548291666b4bdca53141e8e75e4108116ead1225b6c5c0ce5e6ea118e6c5865afcd7de89423aad87b470e90bc2b3b0cc283ec2b540882784e79e160636f2f1888ff47979e45964303acf13ab339149283b62dbbc4019fd8393e0bc618d7ebff152e0bb29a0f7d79da8e1afc8a3f056be9e33683625744690a40369625c6337cc6fad2a02f1b601e9c9d733ee2eda815e333bce38df9e876f83cb03d570fe1e51748c1d0e105dd9092dfaef65db0237a131c4c79892a4a89ed502bfbffc5771810f3449e9bf17ae3131235331a40e5de3745fde3f0df362f2b914f4fd9a67bd99efeb7b1d72ab9df1e632790350900499ebff8d1c4fda7fc0a1bd297f6ea377795d774c7c8a7cbc9c6f9c5788e20bbf7de2a6efb38ca5f6640e01bcaa2529e1a5a8109e35ae51f968ef723bfd462037f5bf0fae4748da15c18c1a3e379dbc36f4e9d735f866065f99e5e3cf3c425cfe2d4046d784ea13e3b457b0f12c6ec7ae10249874be50d3dc7c3bb5cd5e780307e110445ae195066b0b70b7f1f4e5f87f049e12da6ceff49e355d65abcf4bda77ca328c1bd7a7f09c39b9d342344da2421f97f14b2fb2654457ca2150bebaf27ad4ee05f05f1719731ac1deb34c7154cb74339c0252dddfbde11e2e4c5761a113fc5f5841af9054979fc85a4bf8c6eed69e2aa7584d46abe5ca539462c26ef0b441c6749a55c1ac8f221e608df57d46e51d1b0ba883335071de77730ee8fc762c1cbbafb6138235a42d29099a0aa12d6d81b0d5bd3280502afb1e2bb484c69a8ad6653e6c3a253f7a69cf71e1d4357db4eaa58c127c53d771a916d8ad1edbcd24b5b7db836dd4a368638971aad3831260db5363d3949bbab7fbbce7bf859aca3a20504f06602a475a5478e7a5a02dc0a7bdd3472686080e4673894e7b1729f56b46a83539b9791b3b7a72a0bc0f0a576d2fa6ab9274cd931ebd14d56e8377e42c77b5e21c2443990adc7486fe655e334108f876c3bec62f4512555f6ea6046b9ce36a6bb59b593e9eb5c2c6a9575a7f70a5051dc845ba3e0cc81d84cd88635cd06302c55c2def53e9ec750883e21b995ab1680767ad20ee5d8c211ea4b606569d5ea8e11cb7b1d60f6d4bd2f6571d5bcb6761613f03956410da1321bc1442dcda555fa4cef6d5ebf1e237104fb6e24eaacc6ac06e6bb831b4766b7d747f5c2cff3152291442d7777029e9cbccabb1983ef0526e18801a5f3465cd3b433fe6400a4f69beed0ee5cf02a2c7498101ed794d57a7b9c729b3aa2b0bdf5f90908db323a0d08b96941877ef0236b4a6826731bf3d247006106c02a48c2d2f36f57bae6e3e223b94a25b39e397842abf41d04717ac99daf774369bb17568b9e3fdee5ec506fb565f555c2941c69ffca814bcd022cd9bf4a6d318f4fd54a48df8c1371151ba8ecbf0deebdcf38430895d2fc9007375121b193d6e255570a3da6a42da24085bc647b0a49223a06333a8f3677c5b5d3abf2e136a5449172f3b7944a06b70de48ce8b7bdfd3605ad058ded1085d528b7e39a573a52ef0b9630a01e15fa87a331dc714504f30c905e2ef2a8f103f294627742b9bee5a320e09e977aefe113adb474bbebd0fafa4a38f831b5c15c9f1d425f673954df703ae7cf99764948ca8574441de2fd4ad5a323ded58abcf3bda2527757ac864827f401185ce97deee0c4c92d1356bca1895040acbf5326aeedbd767cf4eb3682c8080b18916f8c643274b8501a8590368e22231183edcaed23c4ff87fcacf49b2ef3c3ef747151c591f6e6ded28916c059834ad00b9479ee75047df28d67b77405c67a1cb5587a0858d46af193ecf0a64a9160191c05eb73c4e5ad1bf23bea04a3b5535577a885d4fd7c66f20fbdce6f8237a0406b3f790ec4998f6d63d2a8d20802b7c634beb017c34c46e59e673df8e31df0aea3eecf1c0d2b9e705a9aecca6ba6e0bca551e3f4f46398817411b62cb36b5aa9ef8156cc988d99383986db452e5d5582c3c82171d8810aaf4bf023aff6b2a98b0de3d5bf587097d93f30473765300347a700462ad68bc6c15c6231dc29889b2db74fa3065e86b4a01d4b0c98f674a87ddb1c923504c22951c028ee5da4d06c09a3d8be15cf0d15cdfb42fbb14173ea82b82f2458d2c82c277e80b1ca928bdb20730a023bf96a9fd4248b89a520e6b56bf49adf228cfd4043a647504363899b7225f0f31f0874b6cc823acc91a3b3ab1387484269421c85ce178f8ade6eb51c1c824b61ebdb67f0e57260b52235cfa50936a1d5519d154cd8d4575f70ef1fe19b9ae2cd3696f5cc96f39627eaf319bd66234ac83efb13c5f3110017b097cdf0e1fdab5238e4df63b210893763ac24d913c36dcdbf434e273ab756c40f702d5574b9814e6e7831036a099cd6b2b0eb64fda026192092ba57e4ddce49e5705fecf2131b1c533c2f210f01fbbb755b013fd9fb6a9fd0100131b19d914513cedf9a975e57cad61d6ee028b5d1d96ae7e3491051d8292c4ad4faa847925d83c23905817991bb9c89b838da413e85fcfc51bd628302384bcc16dcd970a62158c33bbfbc3e466b9abe5490207e5b733907da48db8a34e69d8716f3528d656c68c48983b7a03e224b526d3ae7037b22cfc5911fb99be23832c44e84fda5950644bba175a351e0bbb1ad65895058e191cc47534479fae192e73fa3c429f04703c7c673d6d4ecacc8ba1b603c5155bdcf78a740a4cfff04352a1108c94bca974dca807a6e77d20b098b2cd21fda48dbb4188b2cc503cef1b7f1f8528e377960079b5b94caaec9ca6932b9030625d5a41faa69e3117beabf48cafc241141bd4665323fea74c78a6b5adeac4540ab5b96597802115be14a9610faa33042e6fd0767aabae049ea6da7260f2562b63708ca8fea8f71aaa9751decb4268065274567a9fdb3d196a242807139b6337bfd8a5158447f008aa4c635401a2700db89324c47151f057665f5a5e2c87c09984ed931fed18dc17d59120196ec1229b37f0ba5c23caf6e8085f0ee58ff4b2282ee675bbfd8d4ed6144e9b74fd2afc97cba43c06f6953e1fa74159b6480234d5146ca97b25be2353278cef494d7e5b93b0e301ba0edbeb9b26db5bc40c534e94c7a1fc16c34fba8a9359fae0274d8cedc4ddf732c09bf488c34f77ec2b6f2f6618a403f1fabb9c3035a6a8eeaa3a6c9cecfc5c114a3c7dde72a9be2d13ee8702f46432272ffdb49a50bb0a92f37468fe4166ba333eece165443d0e0d7a35a08936494b45657ee4a6a99f5c21d0487e221c3932b4c38715570655216e6346a58e61d3eace9118345b1983031a6854568caf57528dad615dcb18a2979f65372b11383c0b4190c032a5b69d17d267e8dd3af8f07252a80963ccb877395921053df8ae3f3d3df13a6e0f274f49498dfb57e8b2e1903d6e2461c54c4abc3b5141b0a5a04062b14d9b34df963822d1731692536a02e2c8bb727a54ef05115883ef47390fe8177043cd1a270831e98f2eb609e2bc72b34a9f0dc519d4c38f615f2f980062b6e0d272b83c15060c74504d43e660348689f438f31faf775bd98256723960d7af12a41fb5b436fab4c627759efd07522b542c490d926a081304551058df96c9156a59103390f0d77a98276f4c810a60849f71fa577104ab4fb7f3c92e41468baacad91a606d5ab0abd876668d2f9850aec8d1f6e1f3078ab75ed6e3e505b8e24bd1b9866a0f714a00e698bb34dfd5023b808e473aee90e44500994aa8d2e75ede03396a9b202a223d372df456b627e088a24cd59e44432bf9fe101a3542ea9e411bb1eee653e4da2491a15b110303ad7607d8f890a34eb16760b66e0d9c8e8715cd48eb43ec6156810633c0e6e0930905319865ac6e1c04c4a7f080e948ab2d464ca502cf47405690ae8e2029778eb3f1f538ca0fad54c46c1f0d95662dc2dc944085c3724def889d194bb9adb0f512ff41f40b5c64445a9e5490fa06c608f3d393244bcd6635979170d79ba2777989ce0679a7d1a98a94f46200e036a8932d9236a9f7e7e4a7787fe64b8475a405558deae59d3ffb964dde68a3d6f90e206701f47de634cabf5bb59c423a57e378274d0989f03f1e814d7d9e332bc4556b79033a9db5170f971303c0bb21da45c80c13f3a8114ceead1fa215ac9f755d2d2f9d3b67d2968b08aefc58014a941b5daffd9469b4b05a02813c8597680334fe11d41bc7f07e5f5fb513d9c01ae4721f2843cd7a59277727270143384941b4d9c8b88cff7e3088adce36436dfa5f9c100649eaaa169a1a8ecf93ba5753f4ce75f226941ad7998d230dd22a85201c58e930d2373f541bba81e8776396f8ca73226c7a1e6823ffa28b28e4cc94be2412a98112a23d657b8fafbe7d9d6e6894b26baf12dcb1bb183baf47cde817597e3e1178a56a838c61456cd34532148983d03f02fd56658c0fcae36389164635a92b371dd4d2c5cc8d161ba1e36d841172e9b914ecda1acb85faa24aaa691cbe9cb3fa3dcb59ba41143059fd585f0f447c8f0ab911bb769221ddadde26236114acc7a0f097583f56c9eff1708083b224b420b4a8d730ac329fdf55e9159a6029034e7704caa468765c737947fd8e3e145733d5091c3efb4c425205221bbb77cca6b0be2198d4e3813ea078042aa12727eda1f03ad4b07d9c23d2074a0b91211d25aee2e729952fd98622819c12926824a537519f297d2bf474daed61582ac0e326b17f3abceeb3b9f800787245ecf95a363bb5cfcca4b7d1e6595befdafdea3a2ebf4ffaa11bd15a7b0e887606f195db4efd58c8aa2ef1a0ebba853b06e58b86c74dc0b4e50fccf82e12c7596dcbd72e7cc8b6d4630f9b99c74e1f43bb05822219f11cabdb8b3f8bd371875b8ddb14a5a96facb784f52a158163b6739259ff6f17897177a6a01fbb68fbfae38e09d8ef85ff183f6b3ca98904f38d8459d34ba074f502960f95353427d57595e267a94dbddbd24706378bc4c6d1869dd562d5752e0c558f09cac65a5ba00d1b4a4544200a9f3e5a14e28befe680de6dc0b2f3701df29c6ad337b2ab8ee247706a9d60f3599fe1ba247013fb340d24845d62364be6037835a6a9410b9d132424c9933895b02b38c4a7e4cc31a00f14acd59c2996161111e7102a1b093bdf0eb8b4b7106db6b7ef0de081cdcfd597c41aea1487fd03ffda0c77ecc7e689fa4c8b7ff8c2ade3f10bfc5ae3bf38ed10c6ff44c9a6e2a6318dcf1a43a9ee68b23fab2fe1b992aebb0f2b9ef5f67d7f3728b874f0d77ec3a6329c922aa2b608a338641827c565652234f4e7ebe8a24c17de7a970d43fcf4fe414055970493284ebcbaf5e2b13da9001553e8e277d8edea25fb0c0992d123776c032fe20b6d68864d1e90ec4eb3b0cc4a3b177bc0739aaddd8b36e2516660bc38a307220a98c7d1bde46148347ca1f0072c608eb3f7202f0faf607589e89a76e5e5fc7dfbfb8df05aa624d1a82e59468449bd31fbba88d2790c3e080679d0be75a48bc6df9452497aad3fde7e40ba0b98c173d83c21885daaf24d1f944f7189df836ee162e61938313e96fce1be882bd80ecb4418be70c0599509313516e41b2263f38b2a92840ed810effe18eecf74292cd4c38fb33ca53f995c510fa64e446f1fc5dc1eade9ab4738467df1fedc722a104443cd1d5c1ea70662cfbb150fc9173c5888076dafe3cead65f15596e581734c0ee2933874b0ac11c4e221f902266e2e75e29613a6730072b66383ed66ac22a9af63bdb5f150b58a7536001f26d023aff777c99d549ec84e035cc5fa264fd3d5e8eb2adc5ae19ea27242d681f9004982dcc3ca32fd0e8ad409a93bfd3bc8c789cb1db6236185030c7eff57ae46616ed83d01416942a30093ae2017e0d60cd0e4545c41f6a93784878ca9ecfb8b9cfe8cf7fbbf997db1cbbcb880a14d55c51ad713e51d65e0826a3ebd596befe3754f78642cd16089dcc2a26c5329ae1f1964522e7998e6cb06990e1e19609f47cfa7a2a33571523dd212680260eb5a5de262202765f41d5aca4156b910ab17642fa4e6450d855f3022346b8eafb80e12d62c7a18d13cc932946a1b781f90d613c9e2c876d9d3ea4823f0ff1c75ee83f74d70e2e4e222cac118c865940537c289029233d2af47e4d171b0ae4f52efaba7825409910f2fa60d3673e5004f9887c22023f2fffe7ef07b3703fb4c5314a0961f6107e17d62e6bc8b01d7ae7f0c610e46f73aedd20fbfaa1cf7f05d2eeefc7191e86a22f34b3439a8b0df37766837d2b1729b3a8ff741b0b2e9de18add9523745a510ac493cb651375727207ebb4ed0b0b72e6410b2276dde649f19e85403c6ba45c9e1610149b9ec1f044c8816f4b74fe89e262933bc87fe6ae226b3234caca2d3380e379a0b085a99e3274098e02fcb6d7b225c17d8d5f65ac2f488781d1abbcdec787aa393c3ce76454a47e53828113e19f6bad1c52443275abf6305efb8962a10fd96c57928a5e240496f8b81965e880598b19ee83beee86f5fe31c8f0d91772350b1f21680c85675b50d16a29b52c339684db215f64a159a4e878f3a14b324d0595b4dc851647595d56d5a405b43ddf23bd390d2307b8a78c4468ee5b7e846841a1d6b9a67e6a2445568c04793725162e8274bf23019f9e676e1fa54fb010264a996d03e95254f7ca71bc745b971af927ef564c528be5e4ace257f97f622ed52d0ab67ae3919055404c18b7c52049e5b12d4c18b7a12533e6dbb457eaf7a750261139bce576cfb61f6beab0efcf697d2af1f6521f095a96bed7e8e302a880515c959d563350b61818e7cad0c49395836c3de305177b46aae215701f43bceb8fa9a426d58d766e8845aa96a323f3a8da732f8c50701c193ce0b060bc17ed4c1ece7d47d5e9a34da6031078c7cff2784f6023d28366216ef319ff9269f4b789810156074c9b0d4cfc19c667f549a4a82f636013049a9e1dc9e93e502b1f6ebc4779d6dcc035db5d10c8c3ed7b7fab04e4e6f7b06527663aa6c49a2aa3485df97d553c1239228b4c89f5b35c7cf8053e0ecc54d2ae013aaa8e2fc645bc15b18901b6dcb9e91bae322ac8e318fcdd6fb61be43f66ceec15e2edf5b997e86191cbb6283aec24a59274cde02740f0523dd8059bc064065b752912197c12191cbfd4d642066c5fd2f1b04d39406c30ba7328783d6712cf7d11f001b3d61c5f039bf7bb15e42e88ef868413b9836e18308101077eb0e9dc9acea51929ac8b70bf5b9a1d18fa50ba90916b3d1b89973cc1e3a74df5313edf6b0bab68e34c28ebb3c9977dd05957f37ffba4ef7d24591b1a169210581090032064906c02085be002cb6c52170c46bfb645418f3dde6f712bbdf930f7ab7a7ba6276098c593d2bad4454068ce09963be6162b9700e038447a6cff1ea6d4cbfc7c9fcb2aed67388357950e4f9ae687f0533cfde65e5965811da40b6ce1bc879d5f0a6c8a5576eb0c01f9cac0211cc8fe1e7aad791f47d063cc4e745d5c2e9bcaf0d34496f5a33620d9f8569ee66c3717f7ca0ec73c80c7d37d08c2dc59f5e0d9de32573f2f45fed5dcbec48f717417e055f5bd9a5daf5c82260deaee1be3169113a3e7fb45e884684dc39fc177c49b6e17adfaf5579e5264e6464434635c9cf319aa8142f570a9afdf3354adbe5b69423142acd02f9ed6bcfeca769c0fd1357cfdea7a2585b9002a6b500f7d9dc41e1deb1d0e819daae288451b4223c86216ce16208bf00c7a41590fbf993a6f234e34c8bde47e5b0df6fb30e448a3055b629e042686cb6b72e507e05d9600c7eaa819178e9b6e0f0c7016b0d409d2183c892770edca1fe95309a35250f59b07d699450b62f8f1bf3f033373cdaa200d9c3acc29f8aa2192116a33a2f38fbc75e87ad8456585381c6b9bf2b1a218893885cb149e27ac97e27b297d98410609b0ba2c5db5c0030183d438fba3cd3a51ed52b6debcb2a07c8966081da3d776ebee3b0629a4564c7f9506eb8539adec53e27424240bf54ef7ce8b5b09cf63e87a0ba938168e8a25d12528abaca852bd9989c3ab724f245c0881e8ba92789917f2087a9cb8751cd28bb1a5e253eef81c60aa2e0031282e3ef898f2f41aa80bda3eb3835cfe18c6b7acf9accf42da2a8bb0a18c2ec8a004be1d148b7328b76431a0bf3a6dbadfd3cbdc13229460934c959a58bc26efa30e6517f16f8dbee56d092cc402ebf0d9c6c01be755cf5d81e124594d65005704cb640c813abb62561a15637942bc73806b41dfd1a30a51ac04faf1b620e502da4eeb47df92c8b7a30e40c4b239620a0189f37c951cd4d804505e7da788083c473d82c2185dad0949cef8edc14b83fbace9d055d527a0cb9a806d310b70f365f19f6539899d2aa29cf022ec203b4ebb0f93b26471c1af9c1ebe4d93001afbf1fb9da37c802f9186bb3d25cb5be535ae85565ad337ab3747dd4382764b72fc9c0adff466798afe9c52ccf717d9f9d333e1b6994fcf0d9b400f8a1d3166918452e18d0aed39e55c117658434dc46e754841b6e494c92969c28227bae786390255c0861f672908c3088e0f7eb2ff273cf73f76ca74a1d33be011f83f0f90dff712d1c9b9b470329a8be0747721e57ffe041228dea121c1005bed2f7db566133a0a04b9508841ed0138c5777085a3e6c49f63dfc05968680a89f78ef2343ee92c85f95536c1448f99d8ab0be43e899502c5e161d3fe2ace220497a5fd10bd11bbf3e9f3b1ab658eba437e36bea4a05cbbecb66d9a71050a825ae50046eb4996562a579bc1b084636c12f4770a5a5cee4eb66d6a3203800bcf82ebc0ad7202fbfbc8b1d091377847d68a9b89e754c2cab58a92dfad7f9c600b586b3925e1e58ee81c202797a971113926997538c1cf168dfb2b3ed28c6f44549c8a2ee23317d88526dd5fddab59262343142f1f5b30b4918c526084687edcb687486b9ea186c2c6d9f0e3b4a753ee88ebe4b3d25be10ca45a5e9c8da33b8b5d9ded3f38e505dbc5d0be2a5c625992ecf3b7f27455ee531010d2b300378b4695e3629be9ea6fb9b2ae9f41b8df7d5a372ef75ea468d173cb3eb6ad5cf06454534dd61677a79ad57bc0b7b2f486a667008955a98f5dcf9bfcd498ee50f348af447fd0019398e74c7cf4325a18935e7745b11410a23f1a0fafc9ce3dbe445821176655f3a50b3f18db4f00368c3c180959e4819553f398a22f696d25bcc523693f754305bb82943e8e8be7f0bdd110207eb93d5e9e4ad1d6c6100f90ef131fcfc5426598f917f58034b7cb5b37a6e719fd6b47221183805465d33202e3f4e651d509f73913b3aa856fa7490238daa60269939cf66d7cad2beb668311d30f2a7b9e6764bb3a53d3ada7f09599afe02aa642855b79a089d927367a714edd791d51541d1d1337f47ca9cd8a25dbf60e7720410c5754df6ed06490f709af8d6f46ebdf85e4574a23ac7c7d66582afe8d499a21e0adc4aa5b69262c1ac868e4125d0a9b75a33c52d3dc6d449196ee48fd3aec6485f0e061cc44fc8ffe3c69eacc8838b84d8e6a9d1aecd106cc78ebe1d9e7f96a262d133241840cb5fa0bacec6b43ada491efa9e9ab40f164946e661aacb791073b8c81902acc1861a166662d7ca4067b09e720db60f67f5974596a69eef7d3789de67ef6e6b56632039e2a921e1b3c5807dec83a6bc8637f35eacff0c3c1a4e7de0273167580706e3f7e20f760e9c4857f3f9488836f136eec7b3717021c73298f3dcab3667fc227b889e8a887ed74688be4afc128eee0833168aea3f468212c757be3d946edb272c861c0cd9537d3c6620cc27b14f887d3540fb502d68109b5a3f6c841aa066ecaf0aec1cc0fe66e3a116b37949d25a0f91c7a7e05c9bc4156cb58e770e597129f660845b4afa838b70ea9bdea96ca4439295ccbc433427831c1931e0d8ffe9c8d81c9ecea42efcc4757c985af29e2a780e153da1491c3610e66e6e0ecdb7affa70e9192bde0c878e2b8d4cfcd1fafeb6361c3ed79b5fa2ad63987a72774a6acd03faf9e431d67cbd2a3ca29eee70be43f7914f5b4e0fb00467348a0a7a78377cab8c56f492a1e55d970785dcad95545e7c33c447588be622b81e93e22aec317b07e565789002f2ab9f63b85493d29b169c3531f230af734e690323602370dd1d93bdf74602f3b15e752708d8222176c3d43bf4ddac082f372c5ccfa22bb9a05f86b629e0694ae16c2fe84efc30b3c34d25b760788837551e0f809cf7d539e7423ead6c9b149e45357547335370eff345e380357610ae3e358a1cff506dbe6a6aff02bd12803de7ff0112bc69ef96dc085223b8b9baf2b1f26e495331413a4df29de3f6b28872200647c91f9432eba33ccb20a3a60b3b396884b60befb11a89e39e92f9960baa90ce166e81b532b0d38ce158b4be7e13c986f28abfac1fb5d1d84f89e8b939698fb3ac537eb8aa77c04111c872e85d92daebb2cd2afd6411bac419db0623130f3c1b373bd5655702c04025afc0e365bda332f6d86991cf78332b41d69127164c5db3f97da2fbc00969618f312f01f8bdf2d76037e7b2849da755df348021dcd1d58070792258471fa74b060a24837124b5b42a2a402172ca928c492d109a39b7073f7a2d47b1f3db9d3028c0096acc26aaa120d27e2a0a73dcbc36fd135e4d6a5a0117fae633f47297a3227dd109d75f6d0f002430e4f04015b928df08f3a041d27769ef83276f9579fb511bed6ecd76fad7bfb998c0249f34caeaed67abef5489d9b2b711252030bc5281242013661dcfa3c97d307f8d9fd7f549d6b493b904a15d42d27fd4b9f78281f534a54266fad1960ba83c3fcb2b9a6c70f8b80c800f9cb19c16e03a197c7998e50395366aaa5767368a212e6ddea75d3e94562be786c33d7bc6bb76c33e9a8cfbc65a78537b59456bab4d70e0342e70ae3be12582f5a64828ca57ee2958633054b0bd31cfa1834948fa2362a5b21dd9204959a925916fd9b344f4c1c806697b5122da097c77f756547c7d895f0bcf639d6a11ff0db7a3c0fc2fe248dd37552d9f0d9564c6cfadf4f36a6f1a062d9abfee042192d4015261dffef1e95429760618388605c6e9e90893fdcc81816327502c91b0514aacdc3a68aa4b1b9824af391744426dff587e9c4a52d6f0812ed626cf8d17cfe6802b254f197f76da7da2f843db8f29c24fc65aed2587ace44119b29a6757f097f4b27714c45aa112aed19134c258752ba763fa831079f9b1dbd7bb43f1f08df168d5fcb85bf37eeffce3a89a708e6ce91eed153ee5ce085dd6a48e17cc2b09e4d42ae4a616e554c879121b650b9859e73d71825afe6a7f6af37c0a73c0f2876052120e5ecf0134cbcbf44f10f197bdca29e011e9a81a607b0204220f7fffa265bda454455290557aa646f7cdec7b2bc2c631eb1f5625b5b9a6bc01d61abec70fb3d0633816e6cb31c6bdcaf6fa2006ce28ed6d26a3625f854a6503e229f5a83252c416854a1a3ce60f069ebaa3b7eb27503f301023242fc9dd0f1cb06ee519f67ffa1b202818bd2161d1c81297d4668a7be59c9983548ae4757c470d4a13862bd1aed6a60e48e6ee1cd166baff620ce7b3450a84a91dfc9ac3db10c3a1db77174f33f176b233b5a475cd111be56d81c13fad5c2f152443af2a63c3550b28f2e72bd7874f7c8897bf5451adec3593771decbe8e69d67345b83ea68c2db18e3c3f7f72c64ef48d67a16ccb1a89496ba09963dc245ca4966168d4a64514d79cf5debfad7b058ed79812f73008bbf28ccaf70a6ec6be8e239a4829106d694bf12986a98d4e769811f7e20c67cda51bf4df3c9744abb499378b7ec8bdee568aeca63992bd499acff93d000327bea9663839a4501f5616a8896cee107ad08</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>个人笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>复现KnowLog模型</title>
    <url>/posts/2a42dcdb.html</url>
    <content><![CDATA[<p>这次要复现的一个项目是<strong><a href="https://github.com/LeaperOvO/KnowLog">KnowLog</a></strong>，首先创建一个虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create KnowLog -n python=3.8</span><br><span class="line">conda activate KnowLog</span><br></pre></td></tr></table></figure>
<p>然后来到项目的根目录，安装项目所需的环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>之后尝试运行训练的部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python KnowLog_pretrain.py --pretrain_data ./datasets/pre-train/all_log.json --abbr ./datasets/pre-train/abbr.json --base_model bert-base-uncased</span><br></pre></td></tr></table></figure>
<p>毫无意外的会出报错，提示少了什么包，这时候提示缺什么用pip安装即可</p>
<p>再安装完这些包之后，再次尝试训练，出现了下面这个错</p>
<p><img src="https://s21.ax1x.com/2024/03/31/pF7ZiLT.png" alt="image-20240331100215828"></p>
<p>查了一下是python关于SSLError的错误，尝试降级版本解决</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install urllib3==1.25.11</span><br></pre></td></tr></table></figure>
<p><img src="https://s21.ax1x.com/2024/03/31/pF7ZkeU.png" alt="image-20240331101640666"></p>
<p>成功解决问题，开启魔法可以正常下载了</p>
<p><img src="https://s21.ax1x.com/2024/03/31/pF7ZAwF.png" alt="image-20240331101821967"></p>
<p>但是发现下载一半又断开连接了，可能是这种下载方式不支持断点续传，于是打算先把预训练模型下载到本地试试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">huggingface-cli download --resume-download google-bert/bert-base-uncased --local-dir bert-base-uncased</span><br></pre></td></tr></table></figure>
<p><img src="https://s21.ax1x.com/2024/03/31/pF7ZEo4.png" alt="image-20240331104044658"></p>
<p>下好了之后再次尝试跑一下，应该是下了CPU版的torch，重新安装一下吧</p>
<p><img src="https://s21.ax1x.com/2024/03/31/pF7ZeY9.png" alt="image-20240331104118085"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install pytorch==1.10.1 torchvision==0.11.2 torchaudio==0.10.1 cudatoolkit=11.3</span><br></pre></td></tr></table></figure>
<p>再次尝试训练，跑通了！！！</p>
<p><img src="https://s21.ax1x.com/2024/03/31/pF7ZuS1.png" alt="image-20240331110908244"></p>
<p>但是一直卡在34%了…重启运行了一下代码，把代理开了开（可能是代理的原因？）就可以继续往下跑了，但是好像跑不动，之后在GPU服务器上跑一下试试</p>
<p><img src="https://s21.ax1x.com/2024/03/31/pF7ZKQx.png" alt="image-20240331112852208"></p>
<p>尝试直接验证一下模型</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python KnowLog_finetune_single.py --train_data ./datasets/tasks/MC/hw_switch_train.json --dev_data ./datasets/tasks/MC/hw_switch_dev.json --test_data ./datasets/tasks/MC/hw_switch_test.json</span><br></pre></td></tr></table></figure>
<p><img src="https://s21.ax1x.com/2024/03/31/pF7Z3wD.png" alt="image-20240331113220505"></p>
<p>也跑通了，之后在服务器上完整的跑一下</p>
]]></content>
      <categories>
        <category>论文复现</category>
      </categories>
  </entry>
  <entry>
    <title>复现论文ChineseBERT(ONTONOTES数据集)</title>
    <url>/posts/4199d00e.html</url>
    <content><![CDATA[<p>记录一下自己复现论文<strong><a href="https://arxiv.org/pdf/2106.16038.pdf">《ChineseBERT: Chinese Pretraining Enhanced by Glyph and Pinyin Information》</a></strong>的过程，最近感觉老在调包，一天下来感觉什么也没干，就直播记录一下跑模型的过程吧</p>
<p>自己电脑环境如下：</p>
<ul>
<li>显卡：3060TI</li>
<li>CUDA : 11.0</li>
<li>CUDAToolkit : 8.0.2</li>
<li>tensorflow : 2.4.0</li>
<li>pytorch : 1.7.0</li>
</ul>
<p>首先使用<code>Conda</code>创建一下项目的虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n ChineseBERT python=3.8</span><br></pre></td></tr></table></figure>
<p>进入环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate ChineseBERT</span><br></pre></td></tr></table></figure>
<p>用<code>Pycharm</code>打开项目并切换到刚刚新建的环境</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-08%20093431.png" alt="屏幕截图 2023-06-08 093431"></p>
<p>找到<code>requirements.txt</code>文件，在环境中一个一个安装</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-08%20094729.png" alt="屏幕截图 2023-06-08 094729"></p>
<p>安装的时候，发现<code>torch</code>版本装不到这么低的</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-08%20101810.png" alt="屏幕截图 2023-06-08 101810"></p>
<p>然后就装了项目简介中的版本，（发现自己要跑的<code>OntoNotes 4.0</code>数据集正好也需要装这个版本，nice）</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-08%20102015.png" alt="屏幕截图 2023-06-08 102015"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install torch==1.7.1+cu101 torchvision==0.8.2+cu101 torchaudio==0.7.2 -f https://download.pytorch.org/whl/torch_stable.html</span><br></pre></td></tr></table></figure>
<p>然后打开作者的文档<a href="https://github.com/ShannonAI/ChineseBert/blob/main/tasks/OntoNotes/README.md">OntoNotes NER task</a>，下载对应的<a href="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20084906.png">数据集</a></p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20084906.png" alt="屏幕截图 2023-06-11 084906"></p>
<p>然后新建一个名为<code>ONTONOTES_DATA_PATH</code>的文件夹，把解压后的文件放进去</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20085550.png" alt="屏幕截图 2023-06-11 085550"></p>
<p>找到<code>tasks/OntoNotes/OntoNotes_trainer.py</code>文件，尝试第一次运行</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20085821.png" alt="屏幕截图 2023-06-11 085821"></p>
<p>果不其然会报错，好像是<code>numpy</code>版本不匹配的问题，搜一下</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20090052.png" alt="屏幕截图 2023-06-11 090052"></p>
<p>看了一眼自己装的<code>numpy</code>版本，果然高一点</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20090154.png" alt="屏幕截图 2023-06-11 090154"></p>
<p>然后直接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip uninstall numpy</span><br><span class="line">pip install numpy==1.23.4</span><br></pre></td></tr></table></figure>
<p>再跑一次！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20090605.png" alt="屏幕截图 2023-06-11 090605"></p>
<p>好消息，刚刚的错误解决了。新的错误好像是路径格式的问题？难道是我刚刚路径那没配好？</p>
<p>又看了一遍文档，好像是我<strong><code>ChineseBERT-base</code></strong>模型没下，赶紧去<a href="https://drive.google.com/file/d/1CseJzc58W4s8U_eIuAnshHQmnmi7Sr5-/view">下载</a>一下</p>
<p>然后按照文档中说的，也把模型文件都放在<code>CHINESEBERT_PATH</code>这个文件夹中（我猜的</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20092103.png" alt="屏幕截图 2023-06-11 092103"></p>
<p>配置完如下</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20092339.png" alt="屏幕截图 2023-06-11 092339"></p>
<p>再跑一次试试！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20092443.png" alt="屏幕截图 2023-06-11 092443"></p>
<p>emmm待我研究一下…又看了眼文档，好像是跑错文件了？</p>
<p>应该是要运行<code>chinesebert_base.sh</code>文件，再运行之前需要修改两个个参数，把这两个位置的地址换成自己的。（啊我终于理解作者的意思了，不是要新建一个<code>ONTONOTES_DATA_PATH</code>的文件夹啊，是要把这个地址修改成自己的…）</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20210900.png" alt="屏幕截图 2023-06-11 210900"></p>
<p>改到一半的时候发现，好像这其他路径也得该啊，而且这个是在<code>Linux</code>的环境下运行的,不管了先用<code>git</code>跑试试，改完路径后结果如下</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20212135.png" alt="屏幕截图 2023-06-11 212135"></p>
<p>配置一下<code>Pycharm</code>，让其可以直接用<code>git</code></p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20214248.png" alt="屏幕截图 2023-06-11 214248"></p>
<p>走起！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20214750.png" alt="屏幕截图 2023-06-11 214750"></p>
<p>emmm闪一下就没了，什么情况</p>
<p>在<code>chinesebert_base.sh</code>脚本最后加入以下代码以便查看运行情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  使用read命令达到类似bat中的pause命令效果</span></span><br><span class="line"><span class="built_in">echo</span> 按任意键继续</span><br><span class="line"><span class="built_in">read</span> -n 1</span><br><span class="line"><span class="built_in">echo</span> 继续运行</span><br></pre></td></tr></table></figure>
<p>运行情况如下</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20214624.png" alt="屏幕截图 2023-06-11 214624"></p>
<p>啊？没东西输出吗？看了一下路径，好像是<code>Windows</code>和<code>Linux</code>的路径不一样，Linux下路径是<code>/</code>，Win下应该是<code>\\</code></p>
<p>再跑一次！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-11%20215427.png" alt="屏幕截图 2023-06-11 215427"></p>
<p>啊？？？（黑人问号.jpg)</p>
<p>试试把.sh文件转成.bat的，搜了一下网上居然还有一键自动转换的<a href="https://daniel-sc.github.io/bash-shell-to-bat-converter/">网址</a>，太赞了</p>
<p>转换完的<code>.bat</code>脚本如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line">SET <span class="string">&quot;TIME=0711&quot;</span></span><br><span class="line">SET <span class="string">&quot;FILE_NAME=ontonotes_glyce_base&quot;</span></span><br><span class="line">SET <span class="string">&quot;REPO_PATH=D:\code\ChineseBert&quot;</span></span><br><span class="line">SET <span class="string">&quot;BERT_PATH=..\..\CHINESEBERT_PATH&quot;</span></span><br><span class="line">SET <span class="string">&quot;DATA_DIR=..\..\ONTONOTES_DATA_PATH&quot;</span></span><br><span class="line">SET <span class="string">&quot;SAVE_TOPK=20&quot;</span></span><br><span class="line">SET <span class="string">&quot;TRAIN_BATCH_SIZE=26&quot;</span></span><br><span class="line">SET <span class="string">&quot;LR=3e-5&quot;</span></span><br><span class="line">SET <span class="string">&quot;WEIGHT_DECAY=0.001&quot;</span></span><br><span class="line">SET <span class="string">&quot;WARMUP_PROPORTION=0.1&quot;</span></span><br><span class="line">SET <span class="string">&quot;MAX_LEN=275&quot;</span></span><br><span class="line">SET <span class="string">&quot;MAX_EPOCH=5&quot;</span></span><br><span class="line">SET <span class="string">&quot;DROPOUT=0.2&quot;</span></span><br><span class="line">SET <span class="string">&quot;ACC_GRAD=1&quot;</span></span><br><span class="line">SET <span class="string">&quot;VAL_CHECK_INTERVAL=0.25&quot;</span></span><br><span class="line">SET <span class="string">&quot;OPTIMIZER=torch.adam&quot;</span></span><br><span class="line">SET <span class="string">&quot;CLASSIFIER=multi&quot;</span></span><br><span class="line"></span><br><span class="line">SET <span class="string">&quot;OUTPUT_DIR=..\\..\\outputs/chinesebert\\%TIME%\\%FILE_NAME%_%MAX_EPOCH%_%TRAIN_BATCH_SIZE%_%LR%_%WEIGHT_DECAY%_%WARMUP_PROPORTION%_%MAX_LEN%_%DROPOUT%_%ACC_GRAD%_%VAL_CHECK_INTERVAL%&quot;</span></span><br><span class="line"><span class="built_in">mkdir</span> <span class="string">&quot;-p&quot;</span> <span class="string">&quot;%OUTPUT_DIR%&quot;</span></span><br><span class="line"><span class="built_in">export</span> <span class="string">&quot;PYTHONPATH=&quot;</span>%PYTHONPATH%:%REPO_PATH%<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">python3 <span class="string">&quot;%REPO_PATH%\\tasks\\OntoNotes\\OntoNotes_trainer.py&quot;</span> </span><br><span class="line">    <span class="string">&quot;--lr&quot;</span> <span class="string">&quot;%LR%&quot;</span> </span><br><span class="line">    <span class="string">&quot;--max_epochs&quot;</span> <span class="string">&quot;%MAX_EPOCH%&quot;</span> </span><br><span class="line">    <span class="string">&quot;--max_length&quot;</span> <span class="string">&quot;%MAX_LEN%&quot;</span> </span><br><span class="line">    <span class="string">&quot;--weight_decay&quot;</span> <span class="string">&quot;%WEIGHT_DECAY%&quot;</span> </span><br><span class="line">    <span class="string">&quot;--hidden_dropout_prob&quot;</span> <span class="string">&quot;%DROPOUT%&quot;</span> </span><br><span class="line">    <span class="string">&quot;--warmup_proportion&quot;</span> <span class="string">&quot;%WARMUP_PROPORTION%&quot;</span> </span><br><span class="line">    <span class="string">&quot;--train_batch_size&quot;</span> <span class="string">&quot;%TRAIN_BATCH_SIZE%&quot;</span> </span><br><span class="line">    <span class="string">&quot;--accumulate_grad_batches&quot;</span> <span class="string">&quot;%ACC_GRAD%&quot;</span> </span><br><span class="line">    <span class="string">&quot;--save_topk&quot;</span> <span class="string">&quot;%SAVE_TOPK%&quot;</span> </span><br><span class="line">    <span class="string">&quot;--bert_path&quot;</span> <span class="string">&quot;%BERT_PATH%&quot;</span> </span><br><span class="line">    <span class="string">&quot;--data_dir&quot;</span> <span class="string">&quot;%DATA_DIR%&quot;</span> </span><br><span class="line">    <span class="string">&quot;--save_path&quot;</span> <span class="string">&quot;%OUTPUT_DIR%&quot;</span> </span><br><span class="line">    <span class="string">&quot;--val_check_interval&quot;</span> <span class="string">&quot;%VAL_CHECK_INTERVAL%&quot;</span> </span><br><span class="line">    <span class="string">&quot;--gpus=1&quot;</span> </span><br><span class="line">    <span class="string">&quot;--precision=16&quot;</span> </span><br><span class="line">    <span class="string">&quot;--optimizer&quot;</span> <span class="string">&quot;%OPTIMIZER%&quot;</span> </span><br><span class="line">    <span class="string">&quot;--classifier&quot;</span> <span class="string">&quot;%CLASSIFIER%&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;按任意键继续&quot;</span></span><br><span class="line"><span class="built_in">read</span> <span class="string">&quot;-n&quot;</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;继续运行&quot;</span></span><br></pre></td></tr></table></figure>
<p>运行一下试试！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-12%20205940.png" alt="屏幕截图 2023-06-12 205940"></p>
<p>太痛了！好像又是路径的问题？检查了一下确实是路径的错误</p>
<p>把上述<code>OUTPUT_DIR</code>的地址换成下面的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET <span class="string">&quot;OUTPUT_DIR=..\..\outputs\chinesebert\%TIME%\%FILE_NAME%_%MAX_EPOCH%_%TRAIN_BATCH_SIZE%_%LR%_%WEIGHT_DECAY%_%WARMUP_PROPORTION%_%MAX_LEN%_%DROPOUT%_%ACC_GRAD%_%VAL_CHECK_INTERVAL%&quot;</span></span><br></pre></td></tr></table></figure>
<p>再跑亿次！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-12%20210918.png" alt="屏幕截图 2023-06-12 210918"></p>
<p>我再康康…好像那个网站转换的有问题</p>
<p>我用chatGPT转换了一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> TIME=0711</span><br><span class="line"><span class="built_in">set</span> FILE_NAME=ontonotes_glyce_base</span><br><span class="line"><span class="built_in">set</span> REPO_PATH=D:\code\ChineseBert</span><br><span class="line"><span class="built_in">set</span> BERT_PATH=..\..\CHINESEBERT_PATH</span><br><span class="line"><span class="built_in">set</span> DATA_DIR=..\..\ONTONOTES_DATA_PATH</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> SAVE_TOPK=20</span><br><span class="line"><span class="built_in">set</span> TRAIN_BATCH_SIZE=26</span><br><span class="line"><span class="built_in">set</span> LR=3e-5</span><br><span class="line"><span class="built_in">set</span> WEIGHT_DECAY=0.001</span><br><span class="line"><span class="built_in">set</span> WARMUP_PROPORTION=0.1</span><br><span class="line"><span class="built_in">set</span> MAX_LEN=275</span><br><span class="line"><span class="built_in">set</span> MAX_EPOCH=5</span><br><span class="line"><span class="built_in">set</span> DROPOUT=0.2</span><br><span class="line"><span class="built_in">set</span> ACC_GRAD=1</span><br><span class="line"><span class="built_in">set</span> VAL_CHECK_INTERVAL=0.25</span><br><span class="line"><span class="built_in">set</span> OPTIMIZER=torch.adam</span><br><span class="line"><span class="built_in">set</span> CLASSIFIER=multi</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> OUTPUT_DIR=..\..\outputs\chinesebert\%TIME%\%FILE_NAME%_%MAX_EPOCH%_%TRAIN_BATCH_SIZE%_%LR%_%WEIGHT_DECAY%_%WARMUP_PROPORTION%_%MAX_LEN%_%DROPOUT%_%ACC_GRAD%_%VAL_CHECK_INTERVAL%</span><br><span class="line"><span class="built_in">mkdir</span> %OUTPUT_DIR%</span><br><span class="line"><span class="built_in">set</span> PYTHONPATH=%PYTHONPATH%;%REPO_PATH%</span><br><span class="line"></span><br><span class="line">python %REPO_PATH%\tasks\OntoNotes\OntoNotes_trainer.py ^</span><br><span class="line">    --lr %LR% ^</span><br><span class="line">    --max_epochs %MAX_EPOCH% ^</span><br><span class="line">    --max_length %MAX_LEN% ^</span><br><span class="line">    --weight_decay %WEIGHT_DECAY% ^</span><br><span class="line">    --hidden_dropout_prob %DROPOUT% ^</span><br><span class="line">    --warmup_proportion %WARMUP_PROPORTION% ^</span><br><span class="line">    --train_batch_size %TRAIN_BATCH_SIZE% ^</span><br><span class="line">    --accumulate_grad_batches %ACC_GRAD% ^</span><br><span class="line">    --save_topk %SAVE_TOPK% ^</span><br><span class="line">    --bert_path %BERT_PATH% ^</span><br><span class="line">    --data_dir %DATA_DIR% ^</span><br><span class="line">    --save_path %OUTPUT_DIR% ^</span><br><span class="line">    --val_check_interval %VAL_CHECK_INTERVAL% ^</span><br><span class="line">    --gpus=<span class="string">&quot;1&quot;</span> ^</span><br><span class="line">    --precision=16 ^</span><br><span class="line">    --optimizer %OPTIMIZER% ^</span><br><span class="line">    --classifier %CLASSIFIER%</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<p>重新跑一下！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-12%20214704.png" alt="屏幕截图 2023-06-12 214704"></p>
<p>chatGPT牛逼！看来格式是转换对了，下面就是调包的问题了</p>
<p>看这个错应该是这个<code>pypinyin</code>包没装，装一下试试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pypinyin</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-12%20215157.png" alt="屏幕截图 2023-06-12 215157"></p>
<p>但是环境里应该有了鸭，难道是跑的时候不在这个环境吗</p>
<p>单独跑了一下这个文件，并没有报错！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-12%20215537.png" alt="屏幕截图 2023-06-12 215537"></p>
<p>感觉我的推理是正确的，查了一下如何在<code>bat</code>文件中选择环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%切换到ChineseBert环境%</span><br><span class="line">CALL activate ChineseBert</span><br></pre></td></tr></table></figure>
<p>将这段代码放在执行<code>Python</code>文件前面</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-13%20092124.png" alt="屏幕截图 2023-06-13 092124"></p>
<p>然后走起！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-13%20092200.png" alt="屏幕截图 2023-06-13 092200"></p>
<p>这？？？这是跑起来了？？？有戏有戏</p>
<p>等了一会也没反应，看了下说明，好像说是模型没训练初始化？</p>
<p>又等了一会</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-13%20093055.png" alt="屏幕截图 2023-06-13 093055"></p>
<p>难…难道再等等？好像又说CUDA和Pytorch不匹配？（但我之前专门按照官网装的鸭</p>
<p>还说我什么<code>model.example_input_array</code>或者<code>input_array</code>属性没设置</p>
<p>首先解决一下CUDA和Pytorch的版本匹配问题，再次检查一下作者提供的Pytorch安装代码，发现和我CUDA版本是不匹配的，看来这个需要自己修改一下，不能无脑复制</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-13%20094404.png" alt="屏幕截图 2023-06-13 094404"></p>
<p>我自己的CUDA</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-13%20094832.png" alt="屏幕截图 2023-06-13 094832"></p>
<p>于是直接重装吧</p>
<p>先卸载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip uninstall torch</span><br></pre></td></tr></table></figure>
<p>再安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install torch==1.7.1+cu110 torchvision==0.8.2+cu110 torchaudio==0.7.2 -f https://download.pytorch.org/whl/cu110/torch_stable.html</span><br></pre></td></tr></table></figure>
<p>在跑一次试试！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-13%20145951.png" alt="屏幕截图 2023-06-13 145951"></p>
<p>跑起来了？！！！！！Ohhhhhhhh</p>
<p>等了一下午，终于跑出了结果了</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-23%20185801.png" alt="屏幕截图 2023-06-23 185801"></p>
<p>作者的结果如下</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Model</th>
<th>Test Precision</th>
<th>Test Recall</th>
<th>Test F1</th>
</tr>
</thead>
<tbody>
<tr>
<td>BERT</td>
<td>79.69</td>
<td>82.09</td>
<td>80.87</td>
</tr>
<tr>
<td>RoBERTa</td>
<td>80.43</td>
<td>80.30</td>
<td>80.37</td>
</tr>
<tr>
<td>ChineseBERT</td>
<td>80.03</td>
<td>83.33</td>
<td>81.65</td>
</tr>
</tbody>
</table>
</div>
<p>不知道为什么<code>test_precision</code>这一项结果略低一点，其他结果相差不是很大</p>
]]></content>
      <categories>
        <category>论文复现</category>
      </categories>
  </entry>
  <entry>
    <title>复现论文SpikeGPT Generative Pre-trained Language Model with Spiking Neural Networks</title>
    <url>/posts/c8399eaa.html</url>
    <content><![CDATA[<p>记录一下复现论文<a href="https://arxiv.org/abs/2302.13939v2">SpikeGPT: Generative Pre-trained Language Model with Spiking Neural Networks</a>的过程，论文给出了项目的<a href="https://github.com/ridgerchu/SpikeGPT">GitHub</a>地址。此博客是边跑边写边改的，尽量把顺序合理化，让人可以少走一些弯路</p>
<h2 id="论文概述"><a href="#论文概述" class="headerlink" title="论文概述"></a>论文概述</h2><p>利用工具，可以大概对此篇论文有如下了解</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">这篇文章介绍了SpikeGPT，这是一种基于脉冲神经网络(SNNs)的生成式语言模型。SNNs利用稀疏、事件驱动的激活方式来减少计算复杂性，提高能源效率，因此在深度学习领域有很大的潜力。虽然SNNs在计算机视觉任务上取得了成功，但在语言生成方面仍然有待进一步探索，因为它们的训练过程相对复杂。文章的作者们对Transformer模块进行了修改，消除了多头自注意力带来的二次计算复杂度，并引入循环计算，实现了逐词计算，同时保留了长程依赖关系。结果得到的SpikeGPT模型在语言生成任务上表现出竞争力，同时能耗仅为传统人工神经网络(ANNs)的五分之一。该模型还是迄今为止最大的反向传播训练的功能性SNN模型，拥有多达2.6亿个参数。这项工作为在自然语言处理任务中有效训练大规模SNNs并将Transformer架构与SNNs结合起来实现高性能和能源效率开辟了新的潜力。</span><br></pre></td></tr></table></figure>
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="新建环境"><a href="#新建环境" class="headerlink" title="新建环境"></a>新建环境</h3><p>新建一个<code>Conda</code>环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -n SpikeGPT python=3.8</span><br><span class="line">conda activate SpikeGPT</span><br></pre></td></tr></table></figure>
<p>然后用<code>pycharm</code>打开此项目，并切换到刚刚新建的环境</p>
<p>接下来就是安装环境了，由于作者没有提供具体包的版本，只能根据缺啥安装啥的原则，有什么问题之后再慢慢改</p>
<h3 id="安装accelerate"><a href="#安装accelerate" class="headerlink" title="安装accelerate"></a>安装accelerate</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install accelerate</span><br></pre></td></tr></table></figure>
<p>在安装<code>accelerate</code>的时候，自动给我装了一个torch2.0.1版本的，这个后面管，只要这个torch版本大于10.0.0就行</p>
<h3 id="安装Pytorch"><a href="#安装Pytorch" class="headerlink" title="安装Pytorch"></a>安装Pytorch</h3><p>根据我的<code>CUDA</code>版本，安装了如下的<code>torch</code>，具体安装细节可以参考<a href="https://ruvikm.gitee.io/2023/06/06/Win11%E9%85%8D%E7%BD%AEAnaconda-Cuda-Pytorch-Tenserflow%E7%8E%AF%E5%A2%83/">这篇博客</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install pytorch==1.11.0 torchvision==0.12.0 torchaudio==0.11.0 cudatoolkit=11.3</span><br></pre></td></tr></table></figure>
<h3 id="安装matplotlib"><a href="#安装matplotlib" class="headerlink" title="安装matplotlib"></a>安装matplotlib</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure>
<h3 id="安装tqdm"><a href="#安装tqdm" class="headerlink" title="安装tqdm"></a>安装tqdm</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install tqdm</span><br></pre></td></tr></table></figure>
<h3 id="安装transformers"><a href="#安装transformers" class="headerlink" title="安装transformers"></a>安装transformers</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install transformers</span><br></pre></td></tr></table></figure>
<h3 id="安装deepspeed"><a href="#安装deepspeed" class="headerlink" title="安装deepspeed"></a>安装deepspeed</h3><h4 id="错误安装方法"><a href="#错误安装方法" class="headerlink" title="错误安装方法"></a>错误安装方法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install deepspeed</span><br></pre></td></tr></table></figure>
<p>安装的时候报错了</p>
<p><img src="https://s1.ax1x.com/2023/07/22/pCbvDot.png" alt="image-20230722102232403"></p>
<p>换<code>conda</code>试了后，<code>conda install deepspeed</code>，也不行。</p>
<p>网上查了一个安装方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install transformers[deepspeed]</span><br></pre></td></tr></table></figure>
<p>还是那个错，网上查了一下</p>
<p><img src="https://s1.ax1x.com/2023/07/22/pCbxpY6.png" alt="image-20230722103014784"></p>
<p>设置一下环境变量试试</p>
<p><img src="https://s1.ax1x.com/2023/07/22/pCbxX38.png" alt="屏幕截图 2023-07-22 105535"></p>
<p>报错！！！好消息是报错变了</p>
<p><img src="https://s1.ax1x.com/2023/07/22/pCbxbNt.png" alt="image-20230722105444097"></p>
<p>去<code>github</code>看了一下，意思大概是这个库原本是在<code>linux</code>上的，在<code>window</code>上的支持还不是很好</p>
<p><img src="https://s1.ax1x.com/2023/07/22/pCbxy7R.png" alt="image-20230722103953254"></p>
<h4 id="正确安装方法"><a href="#正确安装方法" class="headerlink" title="正确安装方法"></a>正确安装方法</h4><p>网上查到一篇win10成功安装的<a href="https://zhuanlan.zhihu.com/p/636450918">博客</a>，按照博客的说法</p>
<p>首先安装必要组件</p>
<p><img src="https://s1.ax1x.com/2023/07/22/pCq9crD.png" alt="image-20230722122822936">先把<a href="https://github.com/microsoft/DeepSpeed">官方</a>的开源的代码下载下来，解压（要用管理员权限）后</p>
<p>用管理员权限打开cmd，切换到解压的目录，在命令行输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">build_win.bat</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/07/22/pCq9A8P.png" alt="image-20230722121606679"></p>
<p>慢慢改错吧，先解决一个报错最多的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error: attribute <span class="string">&quot;nodiscard&quot;</span> does not take arguments</span><br></pre></td></tr></table></figure>
<h3 id="下载数据集"><a href="#下载数据集" class="headerlink" title="下载数据集"></a>下载数据集</h3><p>作者提供数据集<code>Enwik8</code><a href="https://data.deepai.org/enwik8.zip">下载地址</a></p>
]]></content>
      <categories>
        <category>论文复现</category>
      </categories>
  </entry>
  <entry>
    <title>复现论文《Efficient Estimation of Word Representations in Vector Space》（未跑通中）</title>
    <url>/posts/fc5075a5.html</url>
    <content><![CDATA[<p>Word2Vec工具的出处在一篇<a href="https://arxiv.org/abs/1301.3781">论文</a>《Efficient Estimation of Word Representations in Vector Space》中</p>
<p>从论文中可以找到提供的<a href="https://code.google.com/p/word2vec/">开源地址</a>，但是发现跳转网页的时候会显示<code>404</code>，于是换了一种方法<a href="https://ruvikm.gitee.io/2023/07/01/%E5%AE%89%E8%A3%85Word2Vec/">安装Word2Vec</a></p>
<p>作者提供的开源地址中，提供了论文的<a href="https://storage.googleapis.com/google-code-archive-source/v2/code.google.com/word2vec/source-archive.zip">源码</a>，解压源码的压缩包然后用<code>Pycharm</code>打开，然后用<code>Pycharm</code>切换到<code>Word2Vec</code>环境（如果发现解压错误需要先新建一个名为<code>Word2Vec</code>的文件夹）</p>
<p><img src="https://s1.ax1x.com/2023/07/03/pCrmbDO.png" alt="屏幕截图 2023-07-03 095919"></p>
<p>打开后找到作者写的<code>README</code>文件</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Tools for computing distributed representtion of words</span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line">We provide an implementation of the Continuous Bag-of-Words (CBOW) and the Skip-gram model (SG), as well as several demo scripts.</span><br><span class="line"></span><br><span class="line">Given a text corpus, the word2vec tool learns a vector for every word in the vocabulary using the Continuous</span><br><span class="line">Bag-of-Words or the Skip-Gram neural network architectures. The user should to specify the following:</span><br><span class="line"> - desired vector dimensionality</span><br><span class="line"> - the size of the context window for either the Skip-Gram or the Continuous Bag-of-Words model</span><br><span class="line"> - training algorithm: hierarchical softmax and / or negative sampling</span><br><span class="line"> - threshold for downsampling the frequent words </span><br><span class="line"> - number of threads to use</span><br><span class="line"> - the format of the output word vector file (text or binary)</span><br><span class="line"></span><br><span class="line">Usually, the other hyper-parameters such as the learning rate do not need to be tuned for different training sets. </span><br><span class="line"></span><br><span class="line">The script demo-word.sh downloads a small (100MB) text corpus from the web, and trains a small word vector model. After the training</span><br><span class="line">is finished, the user can interactively explore the similarity of the words.</span><br><span class="line"></span><br><span class="line">More information about the scripts is provided at https://code.google.com/p/word2vec/</span><br></pre></td></tr></table></figure>
<p>翻译一下后</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">计算单词的分布式表示的工具</span><br><span class="line">------------------------------------------------------</span><br><span class="line"></span><br><span class="line">我们提供了一个连续词袋（CBOW）和跳格模型（SG）的实现，以及几个演示脚本。</span><br><span class="line"></span><br><span class="line">给定一个文本语料库，word2vec工具为词汇库中的每个词学习一个向量，使用连续词袋或跳格模式。</span><br><span class="line">字袋或跳格神经网络结构为词汇中的每个词学习一个向量。用户应该指定以下内容：</span><br><span class="line"> - 希望的向量维度</span><br><span class="line"> - Skip-Gram或Continuous Bag-of-Words模型的上下文窗口的大小</span><br><span class="line"> - 训练算法：层次化的softmax和/或负采样</span><br><span class="line"> - 对频繁出现的词进行下采样的阈值 </span><br><span class="line"> - 要使用的线程数</span><br><span class="line"> - 输出词向量文件的格式（文本或二进制）。</span><br><span class="line"></span><br><span class="line">通常情况下，其他超参数，如学习率，不需要针对不同的训练集进行调整。</span><br><span class="line"></span><br><span class="line">脚本demo-word.sh从网上下载了一个小型（100MB）文本语料库，并训练了一个小型的词向量模型。训练结束后</span><br><span class="line">训练完成后，用户可以交互式地探索这些词的相似性。</span><br><span class="line"></span><br><span class="line">关于这些脚本的更多信息，请见https://code.google.com/p/word2vec/</span><br></pre></td></tr></table></figure>
<p>那就先跑一下<code>demo-word.sh</code>这个脚本试试吧，首先用万能的chatGPT把其转换成<code>demo-word.bat</code>脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> not exist text8 (</span><br><span class="line">    powershell -Command <span class="string">&quot;&amp; &#123; Invoke-WebRequest http://mattmahoney.net/dc/text8.zip -OutFile text8.gz &#125;&quot;</span></span><br><span class="line">    powershell -Command <span class="string">&quot;&amp; &#123; Expand-Archive -Path text8.gz -DestinationPath . -Force &#125;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">time word2vec -train text8 -output vectors.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 20 -binary 1 -iter 15</span><br><span class="line"></span><br><span class="line">distance vectors.bin</span><br></pre></td></tr></table></figure>
<p>跑一下试试吧</p>
<p><img src="https://s1.ax1x.com/2023/07/03/pCrmXUH.png" alt="image-20230703100224888"></p>
<p>按照提示改改吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> not exist text8 (</span><br><span class="line">    powershell -Command <span class="string">&quot;&amp; &#123; Invoke-WebRequest http://mattmahoney.net/dc/text8.zip -OutFile text8.zip &#125;&quot;</span></span><br><span class="line">    powershell -Command <span class="string">&quot;&amp; &#123; Expand-Archive -Path text8.zip -DestinationPath . -Force &#125;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">time word2vec -train text8 -output vectors.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 20 -binary 1 -iter 15</span><br><span class="line"></span><br><span class="line">distance vectors.bin</span><br></pre></td></tr></table></figure>
<p>再跑试试</p>
<p><img src="https://s1.ax1x.com/2023/07/03/pCrM8Ig.png" alt="image-20230703100810359"></p>
<p>好像是<code>distance vectors.bin</code>不太对，按照原来的脚本改成<code>./distance vectors.bin</code>试试</p>
<p>跑了一下还报错，用一天一次的<code>chatGPT-4</code>转换了一下康康</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> not exist text8 (</span><br><span class="line">  powershell -Command <span class="string">&quot;Invoke-WebRequest -Uri &#x27;http://mattmahoney.net/dc/text8.zip&#x27; -OutFile &#x27;text8.gz&#x27;&quot;</span></span><br><span class="line">  gzip -d text8.gz -f</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Calculating word vectors...</span><br><span class="line">powershell -Command <span class="string">&quot;Measure-Command &#123; .\word2vec -train text8 -output vectors.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 20 -binary 1 -iter 15 &#125; | Select-Object TotalSeconds&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Running distance...</span><br><span class="line">.\distance vectors.bin</span><br></pre></td></tr></table></figure>
<p>然后把.gz换成zip试试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> not exist text8 (</span><br><span class="line">  powershell -Command <span class="string">&quot;Invoke-WebRequest -Uri &#x27;http://mattmahoney.net/dc/text8.zip&#x27; -OutFile &#x27;text8.zip&#x27;&quot;</span></span><br><span class="line">  gzip -d text8.zip -f</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Calculating word vectors...</span><br><span class="line">powershell -Command <span class="string">&quot;Measure-Command &#123; .\word2vec -train text8 -output vectors.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 20 -binary 1 -iter 15 &#125; | Select-Object TotalSeconds&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Running distance...</span><br><span class="line">.\distance vectors.bin</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/07/03/pCrM4eK.png" alt="image-20230703101439557"></p>
<p>居然出来一个神奇的结果，再改改删删试试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> not exist text8 (</span><br><span class="line">  powershell -Command <span class="string">&quot;Invoke-WebRequest -Uri &#x27;http://mattmahoney.net/dc/text8.zip&#x27; -OutFile &#x27;text8.zip&#x27;&quot;</span></span><br><span class="line">  zip -d text8.zip -f</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Calculating word vectors...</span><br><span class="line">powershell -Command <span class="string">&quot;Measure-Command &#123; .\word2vec\truck -train text8 -output vectors.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 20 -binary 1 -iter 15 &#125; | Select-Object TotalSeconds&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Running distance...</span><br><span class="line">.\distance vectors.bin</span><br></pre></td></tr></table></figure>
<p>好吧，还是上面那个错</p>
<p>又改了改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> not exist text8 (</span><br><span class="line">  powershell -Command <span class="string">&quot;Invoke-WebRequest -Uri &#x27;http://mattmahoney.net/dc/text8.zip&#x27; -OutFile &#x27;text8.zip&#x27;&quot;</span></span><br><span class="line">  zip -d text8.zip -f</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Calculating word vectors...</span><br><span class="line">powershell -Command <span class="string">&quot;Measure-Command &#123; .\word2vec.c -train text8 -output vectors.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 20 -binary 1 -iter 15 &#125; | Select-Object TotalSeconds&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Running distance...</span><br><span class="line">.\distance.c vectors.bin</span><br></pre></td></tr></table></figure>
<p>跑一下试试</p>
<p><img src="https://s1.ax1x.com/2023/07/03/pCrQpFg.png" alt="image-20230703102332133"></p>
<p>然后还突然弹出来我的<code>vs code</code>，就是这个<code>./distance</code>怎么老报错啊</p>
<p>在问问万能的<code>chatGPT</code>吧</p>
<p><img src="https://s1.ax1x.com/2023/07/03/pCrQGm6.png" alt="image-20230703102608238"></p>
<p>但是好像我没有<code>distance</code>这个文件啊，搜一下康康</p>
<p><img src="https://s1.ax1x.com/2023/07/03/pCrUfaR.png" alt="image-20230703125901033"></p>
<p>好吧，看来还是有的，那就简单了，再把脚本修改一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> not exist text8 (</span><br><span class="line">  powershell -Command <span class="string">&quot;Invoke-WebRequest -Uri &#x27;http://mattmahoney.net/dc/text8.zip&#x27; -OutFile &#x27;text8.zip&#x27;&quot;</span></span><br><span class="line">  zip -d text8.zip -f</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Calculating word vectors...</span><br><span class="line">powershell -Command <span class="string">&quot;Measure-Command &#123; .\word2vec.c -train text8 -output vectors.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 20 -binary 1 -iter 15 &#125; | Select-Object TotalSeconds&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Running distance...</span><br><span class="line">.\distance.c vectors.bin</span><br></pre></td></tr></table></figure>
<p>跑一次试试</p>
<p><img src="https://s1.ax1x.com/2023/07/03/pCrUoRK.png" alt="image-20230703130041541"></p>
<p>ohhhh这是运行完了？再康康文档对这个<code>demo</code>的解释吧</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">脚本demo-word.sh从网上下载了一个小型（100MB）文本语料库，并训练了一个小型的词向量模型。训练结束后</span><br><span class="line">训练完成后，用户可以交互式地探索这些词的相似性。</span><br></pre></td></tr></table></figure>
<p>好像怎么也得有一点结果吧，我感觉是本来要在cmd里运行的<code>.c文件</code>，结果却用<code>vscode</code>打开了</p>
<p>试试在脚本里能不能修改一下，继续求助chatGPT</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">gcc -o your_program your_program.c</span><br><span class="line">your_program.exe</span><br></pre></td></tr></table></figure>
<p>请注意，<code>your_program</code>应替换为您的C程序的名称，<code>your_program.c</code>应替换为您的C源代码文件的名称。</p>
<p>照猫画虎的改改试试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> not exist text8 (</span><br><span class="line">  powershell -Command <span class="string">&quot;Invoke-WebRequest -Uri &#x27;http://mattmahoney.net/dc/text8.zip&#x27; -OutFile &#x27;text8.zip&#x27;&quot;</span></span><br><span class="line">  zip -d text8.zip -f</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Calculating word vectors...</span><br><span class="line">powershell -Command <span class="string">&quot;Measure-Command &#123; word2vec.c -train text8 -output vectors.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 20 -binary 1 -iter 15 &#125; | Select-Object TotalSeconds&quot;</span></span><br><span class="line">word2vec.exe</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Running distance...</span><br><span class="line">gcc -o distance distance.c </span><br><span class="line">vectors.bin</span><br><span class="line">distance.exe</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/07/03/pCraKQU.png" alt="image-20230703130956790"></p>
<p>emmmm意料之中,还是不能自己改啊，继续用chatGPT逐句改吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> not exist text8 (</span><br><span class="line">  powershell -Command <span class="string">&quot;Invoke-WebRequest -Uri &#x27;http://mattmahoney.net/dc/text8.zip&#x27; -OutFile &#x27;text8.zip&#x27;&quot;</span></span><br><span class="line">  zip -d text8.zip -f</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Calculating word vectors...</span><br><span class="line">gcc -o word2vec word2vec.c</span><br><span class="line">time ./word2vec -train text8 -output vectors.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 20 -binary 1 -iter 15</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Running distance...</span><br><span class="line">gcc -o distance distance.c</span><br><span class="line">./distance vectors.bin</span><br></pre></td></tr></table></figure>
<p>跑一跑试试</p>
<p><img src="https://s1.ax1x.com/2023/07/03/pCraTkn.png" alt="image-20230703132032334"></p>
<p>感觉是用gcc编译运行了，但是好像是输入的时间变了又不对了。试试自己能不能把两个结合一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> not exist text8 (</span><br><span class="line">  powershell -Command <span class="string">&quot;Invoke-WebRequest -Uri &#x27;http://mattmahoney.net/dc/text8.zip&#x27; -OutFile &#x27;text8.zip&#x27;&quot;</span></span><br><span class="line">  zip -d text8.zip -f</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Calculating word vectors...</span><br><span class="line"><span class="string">&quot;Measure-Command &#123;</span></span><br><span class="line"><span class="string">gcc -o word2vec word2vec.c</span></span><br><span class="line"><span class="string">	--train text8 ^</span></span><br><span class="line"><span class="string">    --output vectors.bin ^</span></span><br><span class="line"><span class="string">    --cbow 1 ^ </span></span><br><span class="line"><span class="string">    --size 200 ^</span></span><br><span class="line"><span class="string">    --window 8 ^</span></span><br><span class="line"><span class="string">    --negative 2 ^</span></span><br><span class="line"><span class="string">    --hs 0 ^</span></span><br><span class="line"><span class="string">    --sample 1e-4 ^</span></span><br><span class="line"><span class="string">    --threads 20 ^</span></span><br><span class="line"><span class="string">    --binary 1 ^</span></span><br><span class="line"><span class="string">    --iter 15 ^</span></span><br><span class="line"><span class="string">&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Running distance...</span><br><span class="line">gcc -o distance distance.c</span><br><span class="line">	--output vectors.bin </span><br></pre></td></tr></table></figure>
<p>好吧，还是崩了。那就直接用<code>visual studio</code>跑一下代码试试吧</p>
<p>ps：如果显示找不到启动项可以试试<a href="https://blog.csdn.net/qq_46070108/article/details/128761974">这个方法</a></p>
<p><img src="https://s1.ax1x.com/2023/07/03/pCrysRs.png" alt="image-20230703152429717"></p>
<p>打扰了…找一个视频吧，我记得哔哩哔哩大学有使用这个工具的教程</p>
]]></content>
      <categories>
        <category>论文复现</category>
      </categories>
  </entry>
  <entry>
    <title>复现论文《SPIKING CONVOLUTIONAL NEURAL NETWORKS FOR TEXT CLASSIFICATION》</title>
    <url>/posts/74c3e798.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录一下复现论文<a href="https://openreview.net/pdf?id=pgU3k7QXuz0">《SPIKING CONVOLUTIONAL NEURAL NETWORKS FOR TEXT CLASSIFICATION》</a>的过程，<del>以免就调包感觉自己什么也没干</del>。<strong>不建议一步一步跟着我的步骤做，这个是实况，建议跳着看看再参考着做</strong></p>
<h2 id="论文概况"><a href="#论文概况" class="headerlink" title="论文概况"></a>论文概况</h2><p>借助工具，大概对此篇的论文的认识如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这篇文章探讨了使用脉冲神经网络（SNN）进行自然语言处理任务的可行性，以实现比深度神经网络更节能的效果。虽然SNN已被证明在视觉任务中可产生具有竞争力的结果，但由于以脉冲形式表示单词和处理变长文本的困难，对于它们在自然语言处理（NLP）任务中的有效性的研究还很少。作者提出了一种“转换+微调”的两步法来训练SNN进行文本分类，并提出了一种编码预训练词嵌入为脉冲训练的有效方法，使SNN能够利用来自大量文本数据的词嵌入。实证结果表明，经过所提出的方法训练的SNN在能源消耗更少的情况下能够实现与其DNN同行竞争的结果，并且它们也更具对抗性。该研究是在英语和中文语言的文本分类任务中展示SNN有效性的首批研究之一，并突显了转换方法和微调阶段中的代用梯度作为该领域的一个关键贡献。</span><br></pre></td></tr></table></figure>
<p>在论文的末尾，找到作者<a href="https://github.com/Lvchangze/snn">开源的代码</a>，并将其下载下来</p>
<hr>
<h2 id="弯路1"><a href="#弯路1" class="headerlink" title="弯路1"></a><strong>弯路1</strong></h2><p>然后用<code>Pycharm</code>打开刚开作者的项目，找到<code>md文档</code>，点击<code>Install Requirements</code>旁边的绿色箭头一键安装环境</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-23%20200449.png" alt="屏幕截图 2023-06-23 200449"></p>
<p>经过一段时间，大部分都安装好了，但是有些还是出现了类似如下的报错</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-23%20201023.png" alt="屏幕截图 2023-06-23 201023"></p>
<p>这时候需要分别查看<code>requirements.txt</code>和<code>textattack_r.txt</code>文件里，查看有哪些包没有装好</p>
<p>首先把<code>Pycharm</code>的环境切换到<code>snn</code></p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-23%20195956-1687522789851-6.png" alt="屏幕截图 2023-06-23 195956"></p>
<p>查看<code>requirements.txt</code>文件</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-23%20201847.png" alt="屏幕截图 2023-06-23 201847"></p>
<p>纳尼？！为什么显示一个都没装，那么刚刚的东西都装哪了</p>
<p>重新检查了一下刚刚命令行的代码，发现了问题，在脚本里使用<code>conda activate</code>是不会生效的</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-23%20202649.png" alt="屏幕截图 2023-06-23 202649"></p>
<p>按照上面的建议，修改一下切换环境的代码，然后将第一句注销了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">conda create -n snn python=3.7</span></span><br><span class="line">CALL activate snn</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r textattack_r.txt</span><br></pre></td></tr></table></figure>
<p>再次点击旁边的绿色小箭头！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-23%20204422.png" alt="屏幕截图 2023-06-23 204422"></p>
<p>emmmmm他演我！看来还是自己老老实实用命令行吧</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-23%20205049.png" alt="屏幕截图 2023-06-23 205049"></p>
<p>而且环境里的Python文件都有问题了！</p>
<p>……</p>
<p>……</p>
<p>重头开始吧</p>
<p>先把环境删了重新装一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda remove -n snn --all</span><br></pre></td></tr></table></figure>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>重装环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda create -n snn python=3.7</span><br><span class="line">conda activate snn</span><br></pre></td></tr></table></figure>
<p>然后Pycharm重新加载一下环境，使用命令行进入到项目的路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /d D:\code\SNN</span><br></pre></td></tr></table></figure>
<p>安装环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install -r textattack_r.txt</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-23%20210230.png" alt="屏幕截图 2023-06-23 210230"></p>
<p>走起！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-23%20210429.png" alt="屏幕截图 2023-06-23 210429"></p>
<p>找不见文件？！检查了一下，发现是作者是文件名和代码里的名字对不上（少了一个<code>i</code>）</p>
<p>把其中一句改一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -r requrements.txt</span><br></pre></td></tr></table></figure>
<p>再跑一次！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-23%20210804.png" alt="屏幕截图 2023-06-23 210804"></p>
<p>很好，没有报错！再继续安装另一个文件里的包</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-23%20211222.png" alt="屏幕截图 2023-06-23 211222"></p>
<p>根据提示，只有 <code>pycld2</code>这个包没有安装成功</p>
<p>重新单独装一下试试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pycld2</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-23%20211601.png" alt="屏幕截图 2023-06-23 211601"></p>
<p>还是报错，这次发现了原因，是缺少某个C++的库，点进去提供的<a href="https://visualstudio.microsoft.com/visual-cpp-build-tools/">链接</a>进行下载</p>
<p>选择如下模块进行安装（建议装在除C盘外的盘，占用</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-23%20211947.png" alt="屏幕截图 2023-06-23 211947"></p>
<p>经过大概20多分钟，安装完毕，重启，然后再次安装那个包</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20081107.png" alt="屏幕截图 2023-06-24 081107"></p>
<p>啊嘞，还报错！</p>
<p>通过搜索，看到了一个解决方案。首先进去这个<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#pycld2">网站</a>下载需要安装的包，由于当前环境是Python3.7的，所以下载如下的包</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20083511.png" alt="屏幕截图 2023-06-24 083511"></p>
<p>下载完成后，使用如下命令进行安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install .whl文件的绝对路径</span><br></pre></td></tr></table></figure>
<p>例如我的命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install G:\Download\Chrome\pycld2-0.41-cp37-cp37m-win_amd64.whl</span><br></pre></td></tr></table></figure>
<p>走起！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20083832.png" alt="屏幕截图 2023-06-24 083832"></p>
<p>nice，这下包就全部安装完毕了，可以试试能不能跑起来了</p>
<h2 id="下载数据库ChnSenti"><a href="#下载数据库ChnSenti" class="headerlink" title="下载数据库ChnSenti"></a>下载数据库<code>ChnSenti</code></h2><p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20084301.png" alt="屏幕截图 2023-06-24 084301"></p>
<p>当我翻到最后时，发现居然要自己准备数据集！！！</p>
<p>让我翻一下论文康康他们用的什么数据集，发现他们中文数据集用的是<code>ChnSenti</code>和<code>Waimai</code>，我挑了一个<code>ChnSenti</code>数据集</p>
<p>网上搜索一下<code>ChnSenti</code>数据集的下载地址，找到一个github的<a href="https://github.com/SophonPlus/ChineseNlpCorpus/blob/master/datasets/ChnSentiCorp_htl_all/intro.ipynb">地址</a></p>
<p>将下载的<code>ChnSentiCorp_htl_all.csv</code>文件放在项目中（新建一个名为datasets的文件夹）</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20090501.png" alt="屏幕截图 2023-06-24 090501"></p>
<p>然后应该就是找找从哪调用这个数据集，改一下路径什么的了</p>
<h2 id="安装环境DLC"><a href="#安装环境DLC" class="headerlink" title="安装环境DLC"></a>安装环境DLC</h2><p>ちょっと待って，好像还有包没有装完</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20090634.png" alt="屏幕截图 2023-06-24 090634"></p>
<p>鼠标右键一键安装一下（好像要一个什么插件，根据Pycharm的提示安装一下就行）</p>
<p>然后就可以<del>摸摸鱼</del>了</p>
<p>经过了一个多小时的等待，安装的差不多了</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/image-20230624132216425.png" alt="image-20230624132216425"></p>
<p>把剩下的包再装一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install bert-score==0.3.5</span><br><span class="line">pip install flair</span><br><span class="line">pip install pinyin==0.4.0</span><br><span class="line">pip install OpenHowNet</span><br></pre></td></tr></table></figure>
<p>安装完毕后，就会显示浅色的波浪线了</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20155740.png" alt="屏幕截图 2023-06-24 155740"></p>
<p>接下来应该就是跑程序了，我需要跑的是一个中文数据集</p>
<p>根据作者的md文件</p>
<p><strong>Shift Pre-trained Word Embeddings to [0, 1]</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd data_preprocess</span><br><span class="line">python tensor_encoder.py</span><br><span class="line">python chinese_tensor_encoder.py</span><br></pre></td></tr></table></figure>
<p>找到<code>项目根目录\data_preprocess\chinese_tensor_encoder.py</code></p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20162120.png" alt="屏幕截图 2023-06-24 162120"></p>
<p>这里应该需要把地址和数据集（也改成txt格式的）改一下</p>
<p>先换格式</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20162547.png" alt="屏幕截图 2023-06-24 162547"></p>
<p>然后改一下地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">datafile_path=<span class="string">&quot;../datasets/chnsenti_test.txt&quot;</span></span><br></pre></td></tr></table></figure>
<p>先跑一下试试</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20163436.png" alt="屏幕截图 2023-06-24 163436"></p>
<h2 id="重装numpy"><a href="#重装numpy" class="headerlink" title="重装numpy"></a>重装numpy</h2><p>大概意思应该是我<code>numpy</code>这个包有问题，康康自己是装的是什么版本的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure>
<p>然后<code>Ctrl+Shift+F</code>搜索一下<code>numpy</code>，发现我的版本是<code>1.21.6</code>，盲猜是不是有点高了</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20163609.png" alt="屏幕截图 2023-06-24 163609"></p>
<p>根据之前的经验，可能是<code>TensorFlow</code>和<code>numpy</code>的版本不适配导致的</p>
<p>于是查了一下，果然不匹配，我的<code>TensorFlow</code>版本是<code>1.14.0</code></p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20164441.png" alt="屏幕截图 2023-06-24 164441"></p>
<p>于是重装一下<code>numpy</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install -U numpy==1.16.0</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20164740.png" alt="屏幕截图 2023-06-24 164740"></p>
<p>然后跳出来一片红……<del>我的基金要是这样红该有多好</del></p>
<p>研究一下，装一下版本为<code>1.17.3</code>的就可以全解决，再试一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install -U numpy==1.17.3</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20165037.png" alt="屏幕截图 2023-06-24 165037"></p>
<p>还有一个问题，是<code>torchvision</code>不和<code>torch</code>版本不匹配，重新安装一下<code>torch</code>吧，（我记得他会自动卸载之前的版本）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install pytorch==1.12.0 torchvision==0.13.0 torchaudio==0.12.0 cudatoolkit=11.3</span><br></pre></td></tr></table></figure>
<p>安装完以后，在试一次！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20180924.png" alt="屏幕截图 2023-06-24 180924"></p>
<p>又双叒叕报错了，这次应该是<code>pyarrow</code>这个包有问题，试试重装？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install -U pyarrow</span><br></pre></td></tr></table></figure>
<p>再跑一次试试</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20181728.png" alt="屏幕截图 2023-06-24 181728"></p>
<p>好消息，刚才那个错是没有了。看前面几行，好像是<code>numpy</code>装了两个版本吗，查看一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20184534.png" alt="屏幕截图 2023-06-24 184534"></p>
<p>只有一个啊，是不是之前操作失误，把包全装在base环境里导致的</p>
<p>切换到<code>base</code>环境删除numpy（这个需要使用管理员运行<code>prompt</code>）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip uninstall numpy</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20185504.png" alt="屏幕截图 2023-06-24 185504"></p>
<p>再跑一次试试</p>
<p>好吧还是刚刚那个问题，要不这次直接物理删除试试<code>\doge</code>，找到他说的地方，删除其中一个文件</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20185819.png" alt="屏幕截图 2023-06-24 185819"></p>
<p>在跑一次康康有没有前面的报错了（删除要关闭Pycharm，否则会提示文件被占用）</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20190048.png" alt="屏幕截图 2023-06-24 190048"></p>
<p>啊这，这是删除崩了吗，那就重装一下吧，把剩下的直接物理删除完</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20190201.png" alt="屏幕截图 2023-06-24 190201"></p>
<p>重新安装一下（复制一下上面的代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install -U numpy==1.17.3</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20190459.png" alt="屏幕截图 2023-06-24 190459"></p>
<p>怎么感觉自己越走越远了，试试他给我的建议</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install --force-reinstall --no-deps numpy==1.21.6</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20190740.png" alt="屏幕截图 2023-06-24 190740"></p>
<p>淦，还不行，等等，我可以从回收站恢复！还可以挽救。</p>
<p>恢复完毕后，再跑一下看看</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20190953.png" alt="屏幕截图 2023-06-24 190953"></p>
<p>又回到了这个熟悉的报错，那就先解决下面的问题吧，感觉是什么<code>xxhash</code>的包有问题</p>
<p>重新安装一下试试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install -U xxhash</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20191156.png" alt="屏幕截图 2023-06-24 191156"></p>
<p>看来刚刚一番折腾，还得把<code>numpy</code>这个包重装一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install -U numpy==1.17.3</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20191311.png" alt="屏幕截图 2023-06-24 191311"></p>
<p>啊？我康康能不能先卸载了</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20191512.png" alt="屏幕截图 2023-06-24 191512"></p>
<p>也不太行，查了一下网上的强制升级试试？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install numpy --ignore-installed numpy</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20191614.png" alt="屏幕截图 2023-06-24 191614"></p>
<p>nice，装好了，那再重装到<code>1.17.3</code>版本试试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install -U numpy==1.17.3</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20191712.png" alt="屏幕截图 2023-06-24 191712"></p>
<p>回来了，都回来了！跑一下试试</p>
<h2 id="解决报错OSError-WinError-126"><a href="#解决报错OSError-WinError-126" class="headerlink" title="解决报错OSError: [WinError 126]"></a>解决报错OSError: [WinError 126]</h2><p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20191846.png" alt="屏幕截图 2023-06-24 191846"></p>
<p>又换错了…但是前面的冲突居然没有了耶</p>
<p>查了一下网上这个错最好还是重装</p>
<p>那就试试重装<code>nltk</code>这个包吧</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip uninstall nltk</span><br><span class="line">pip install nltk</span><br></pre></td></tr></table></figure>
<p>再跑试试。好吧还是上面那个错。网上看了一个<a href="https://blog.csdn.net/qq_40243750/article/details/120123119">博客</a>的解决方法，打算试试</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20193137.png" alt="屏幕截图 2023-06-24 193137"></p>
<p>但是这个错我感觉还是<code>nltk</code>这个包的问题啊</p>
<p>查一下作者用的版本</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20193236.png" alt="屏幕截图 2023-06-24 193236"></p>
<p>这也太痛了，那么就查一下<code>nltk</code>关于<code>OSError: [WinError 126]</code>这个错的方向吧</p>
<p>果不其然搜到了</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20193523.png" alt="屏幕截图 2023-06-24 193523"></p>
<p>照着上面的解决方案做一下</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20193720.png" alt="屏幕截图 2023-06-24 193720"></p>
<p>但是还是有戏的，安装完毕</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20193921.png" alt="屏幕截图 2023-06-24 193921"></p>
<p>再….跑一次试试吧</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20194018.png" alt="屏幕截图 2023-06-24 194018"></p>
<p>？？？为什么。网上搜了一圈也没有很合适的，问问万能的chatGPT吧</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-26%20230624.png" alt="屏幕截图 2023-06-26 230624"></p>
<p>我盲猜可能是因为第三条，安装一下试试，由于找不见他说的<code>Microsoft Visual C++ Redistributable for Visual Studio</code>，我直接装了一个IDE，（这总可以包含了吧）</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-27%20180927.png" alt="屏幕截图 2023-06-27 180927"></p>
<p>跑一下试试</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-27%20181140.png" alt="屏幕截图 2023-06-27 181140"></p>
<p>oh no！我不信了！B站找到了一个<a href="https://www.bilibili.com/video/BV1AF411M7Jo/?vd_source=d703d44820358e50191fc790dd38d074">下载方式</a>，把文件下载下来如下：</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-27%20181620.png" alt="屏幕截图 2023-06-27 181620"></p>
<p>运行一下<code>.bat</code>文件试试</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-27%20182021.png" alt="屏幕截图 2023-06-27 182021"></p>
<p>然后重启一下试试，然后跑一下</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-27%20182610.png" alt="屏幕截图 2023-06-27 182610"></p>
<p>所以可能就不是少装C++库的问题吧，把<code>nltk</code>重装了试试吧</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip uninstall nltk</span><br><span class="line">pip install nltk</span><br></pre></td></tr></table></figure>
<p>用网上验证成功安装的方法检测一下：</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-27%20190509.png" alt="屏幕截图 2023-06-27 190509"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.book <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-27%20190547.png" alt="屏幕截图 2023-06-27 190547"></p>
<p>这应该是成功安装了，再跑试试</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-27%20182823.png" alt="屏幕截图 2023-06-27 182823"></p>
<p>卡住了啊！难道是这个版本太新了？可是也不知道作者的版本是多少啊emm。全局搜一下康康能不能有什么线索</p>
<p>最后也没找到emm，问问chatGPT 4.0的试试吧……</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">出现这个错误的原因可能是nltk库所依赖的某些模块或动态链接库在你的系统中找不到。为了帮助你解决这个问题，请按照以下步骤操作：</span><br><span class="line"></span><br><span class="line">1. 首先，确保你已经安装了nltk库。在conda虚拟环境中，你可以运行以下命令来安装nltk：</span><br><span class="line"></span><br><span class="line">```sh</span><br><span class="line">conda activate your_env_name</span><br><span class="line">conda install -c anaconda nltk</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">将`your_env_name`替换为你的conda虚拟环境名称。</span><br><span class="line"></span><br><span class="line">2. 请确保你的操作系统中安装了对应的Visual C++运行时库。对于不同版本的Python，需要相应版本的Visual C++运行时库。例如，对于Python 3.7，你应该安装[Microsoft Visual C++ 2015-2019 Redistributable](https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads)。</span><br><span class="line"></span><br><span class="line">3. 如果问题仍未解决，请尝试升级nltk库：</span><br><span class="line"></span><br><span class="line">```sh</span><br><span class="line">conda activate your_env_name</span><br><span class="line">conda update nltk</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">4. 如果问题仍然存在，可以尝试重装nltk库：</span><br><span class="line"></span><br><span class="line">```sh</span><br><span class="line">conda activate your_env_name</span><br><span class="line">conda uninstall nltk</span><br><span class="line">conda install -c anaconda nltk</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">5. 如果以上方法都不能解决问题，请尝试在conda虚拟环境中安装`nltk`库的依赖项。例如，`numpy`可能是一个必要的依赖项。要安装它，请运行：</span><br><span class="line"></span><br><span class="line">```sh</span><br><span class="line">conda activate your_env_name</span><br><span class="line">conda install numpy</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">希望上述步骤能帮助你解决问题。如果问题仍然存在，请提供更多详细信息，以便我们能够更好地帮助你。</span><br></pre></td></tr></table></figure>
<p>感觉完全没用呀，要不我试试把<code>x86</code>的<code>Microsoft Visual C++ 2015-2019 Redistributable</code>卸载了？有没有可能和<code>x64</code>版本的相互影响？</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-27%20184933.png" alt="屏幕截图 2023-06-27 184933"></p>
<p>卸载完后，在运行试试？</p>
<p>太离谱了，还是上面的错！又看了几个博客，好像意思是可能是依赖缺少的问题，他们推荐用<a href="https://dependencywalker.com/">Dependency Walker</a>这个软件下一下组件</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-27%20185446.png" alt="屏幕截图 2023-06-27 185446"></p>
<p>我下载的是这个，根据网上说明，只要找到<code>dll</code>或者<code>exe</code>文件就可以了</p>
<p><img src="https://s1.ax1x.com/2023/07/13/pChWSWd.png" alt="屏幕截图 2023-06-27 191021"></p>
<p>但是！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-27%20190817.png" alt="屏幕截图 2023-06-27 190817"></p>
<p>就离谱！<code>exe</code>文件也一样</p>
<p>仔细想了想，可能<code>nltk</code>这个库确实是没问题的，那么可能是他下面依赖的库不全的问题，继续查看报错的信息，看到最后一行</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-27%20191447.png" alt="屏幕截图 2023-06-27 191447"></p>
<p>他最后要找的是<code>ctypes</code>这个库下的某个东西，结果没有找到，那可能出问题的是<code>ctypes</code>这个库？</p>
<p>安装一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install ctypes</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-27%20192030.png" alt="屏幕截图 2023-06-27 192030"></p>
<p>打扰了，使用<code>conda</code>安装也装不了</p>
<p>又难道是<code>scipy</code>这个库，他说<code>scipy&gt;=1.4.1</code>，我的版本是<code>1.7.3</code>难道是太高了吗</p>
<p>试试重装一个<code>1.4.1</code>版本的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install -U scipy==1.4.1</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-27%20194333.png" alt="屏幕截图 2023-06-27 194333"></p>
<p>跑一下试试吧…</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/image-20230627194555681.png" alt="image-20230627194555681"></p>
<p>woc？！这个错解决了吗？！ohhhhhhh</p>
<h2 id="弯路2"><a href="#弯路2" class="headerlink" title="弯路2"></a><strong>弯路2</strong></h2><hr>
<p>这个错感觉好说，配一下路径就行（理论上</p>
<p>好像是没有下载<code>word2vec</code>这个数据集，网上搜了一下，找到了好人发的<a href="https://pan.baidu.com/s/1kTCQqft?_at_=1632703228320">度盘资源</a>，下载下来康康</p>
<p><img src="https://s1.ax1x.com/2023/06/28/pCdt3Xq.png" alt="image-20230628114534236"></p>
<p>emmm怎么用呢，好像和程序里的目录不太一样</p>
<p>在论文里康康</p>
<p><img src="https://s1.ax1x.com/2023/06/28/pCdRdeS.png" alt="79405c0f6bd9693beb7fdeafaf230a9"></p>
<p>我不会还要自己先用这个工具包先弄出点数据吧…</p>
<p>往下看md文档，好像下面就是训练数据了，先试试可以跳过预训练不</p>
<p>Train Tailored Models</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python main.py \</span><br><span class="line">--mode train </span><br><span class="line">--model_mode ann </span><br><span class="line">--model_type textcnn</span><br></pre></td></tr></table></figure>
<p>把这部分改成bash语言（转换用的chatGPT)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">python main.py ^</span><br><span class="line">--mode train ^</span><br><span class="line">--model_mode ann ^</span><br><span class="line">--model_type textcnn</span><br></pre></td></tr></table></figure>
<p>然后新建一个.bat文件，把这段代码放进去跑一下试试</p>
<p><img src="https://s1.ax1x.com/2023/06/28/pCdWeYj.png" alt="image-20230628160203135"></p>
<p>走起</p>
<p><img src="https://s1.ax1x.com/2023/06/28/pCdWupn.png" alt="image-20230628160249712"></p>
<p>盲猜是因为在脚本里没有选择环境(之前的经验)，在脚本最前面加入这段代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%切换到snn环境%</span><br><span class="line">CALL activate snn</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/06/28/pCdWJk4.png" alt="image-20230628160628632"></p>
<p>跑一下</p>
<p><img src="https://s1.ax1x.com/2023/06/28/pCdWUpR.png" alt="image-20230628160706883"></p>
<p>好像是又少什么包了</p>
<p><img src="https://s1.ax1x.com/2023/06/28/pCdWwX6.png" alt="image-20230628160811533"></p>
<p>对比了一下，画红线的那两个包在代码里也没有啊，要不注释了试试吧</p>
<p><img src="https://s1.ax1x.com/2023/06/28/pCdWR1I.png" alt="image-20230628161111726"></p>
<p>再跑试试</p>
<p><img src="https://s1.ax1x.com/2023/06/28/pCdWWct.png" alt="image-20230628161142673"></p>
<p>看了一下，下面的代码还用到了，那就退回上一步，用<code>IDE</code>的建议试试</p>
<p><img src="https://s1.ax1x.com/2023/06/28/pCdWOcq.png" alt="image-20230628161422730"></p>
<p>可恶，还报错</p>
<p>观察了一下刚刚转换完的脚本，他用的是<code>textcnn</code>这个模型，和报错的那两个没有关系</p>
<p>那就！把报错的全注释8！再运行一下</p>
<p><img src="https://s1.ax1x.com/2023/06/28/pCdf6bT.png" alt="image-20230628162018807"></p>
<p>好像是路径的问题，怎么会有<code>lvchangze</code>这个文件夹</p>
<p>全局搜索一下</p>
<p><img src="https://s1.ax1x.com/2023/06/28/pCdffPJ.png" alt="image-20230628162158756"></p>
<p>修改一下吧</p>
<p><img src="https://s1.ax1x.com/2023/06/28/pCdhjTU.png" alt="image-20230628163618882"></p>
<p>再试试吧</p>
<p><img src="https://s1.ax1x.com/2023/06/28/pCd49p9.png" alt="image-20230628163705575"></p>
<p>好消息是少了前面一坨红字了，网上查了一下这个错</p>
<p><img src="https://s1.ax1x.com/2023/06/29/pCwYwD0.png" alt="image-20230629092442814"></p>
<p>看来可能还是路径的问题？修改一下刚刚改的路径试试</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">self.workspace = &#x27;D:<span class="keyword">\\</span>code<span class="keyword">\\</span>SNN&#x27;</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/06/29/pCwYDET.png" alt="image-20230629092733737"></p>
<p>跑一下试试</p>
<p><img src="https://s1.ax1x.com/2023/06/29/pCwYg29.png" alt="image-20230629092837676"></p>
<p>行吧，还是那个错，但是我发现这个目录最后有一个<code>.log</code>文件，但是实习在那个目录里却没有</p>
<p><img src="https://s1.ax1x.com/2023/06/29/pCwYqxA.png" alt="image-20230629092931037"></p>
<p>难道是因为创建不了这个文件的原因，所以导致读取不到吗（可能是不是权限的问题</p>
<p><img src="https://s1.ax1x.com/2023/06/29/pCwYxVf.png" alt="image-20230629093039827"></p>
<p>加点权限试试，然后再跑一下试试</p>
<p><img src="https://s1.ax1x.com/2023/06/29/pCwtP2j.png" alt="image-20230629093155829"></p>
<p>好吧，还是这个错。那试试用管理员开始bat文件？</p>
<p>可恶一闪而过了，加入点东西让他运行完停止</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%使用<span class="built_in">read</span>命令达到类似bat中的pause命令效果%</span><br><span class="line"><span class="built_in">echo</span> 按任意键继续</span><br><span class="line"><span class="built_in">read</span> -n 1</span><br><span class="line"><span class="built_in">echo</span> 继续运行</span><br></pre></td></tr></table></figure>
<p>再运行试试，可恶也是一闪而过</p>
<p>这样吧，反正这玩意是日志，应该注释了不影响</p>
<p><img src="https://s1.ax1x.com/2023/06/29/pCwtKG4.png" alt="image-20230629093706751"></p>
<p>给他注释了</p>
<p><img src="https://s1.ax1x.com/2023/06/29/pCwtMRJ.png" alt="image-20230629093746034"></p>
<p>这是数据集找不见了，全局搜索一下<code>data_path</code>的字段</p>
<p>根据脚本的字段设置，找到关于<code>ann</code>和<code>textcnn</code>相关的，修改一下路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--model_mode ann ^</span><br><span class="line">--model_type textcnn</span><br></pre></td></tr></table></figure>
<p>等等有一个更好的方法，可以让程序输出一下原本<code>data_path</code>里的字段，然后顺着这个字段改一下就行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这里应该有数据集&quot;</span>+args.data_path)</span><br></pre></td></tr></table></figure>
<p>把上面这句加在这里</p>
<p><img src="https://s1.ax1x.com/2023/06/29/pCwtrLt.png" alt="image-20230629094553351"></p>
<p>跑一下康康路径在哪</p>
<p><img src="https://s1.ax1x.com/2023/06/29/pCwtWWQ.png" alt="屏幕截图 2023-06-29 094634"></p>
<p>bingo！把我刚找的数据集放在这个目录下试试吧，等等我找的应该不太行</p>
<p>他之前的文件夹是<code>sst2</code>，在论文里找一下这个数据集的下载方式吧</p>
<p>网上搜了一下<code>SST-2</code>是一个什么东西</p>
<p><img src="https://s1.ax1x.com/2023/06/29/pCwNnmt.png" alt="image-20230629095830475"></p>
<p>这是他论文中提供的一个数据集的<a href="https://www.cs.cornell.edu/people/pabo/movie-review-data/">下载地址</a>，搜了一圈，发现他是把积极和消极的评论数据集分开放了</p>
<p>发现我又从网上找到了一个<code>SST-2</code>的<a href="https://dl.fbaipublicfiles.com/glue/data/SST-2.zip">下载地址</a>，下载下来后解压是这些文件</p>
<p><img src="https://s1.ax1x.com/2023/06/29/pCwNXAf.png" alt="image-20230629101313283"></p>
<p>试试能不能套上去吧</p>
<p><img src="https://s1.ax1x.com/2023/06/29/pCwa5yd.png" alt="image-20230629102623668"></p>
<p>跑一下试试</p>
<p><img src="https://s1.ax1x.com/2023/06/29/pCwaIOA.png" alt="image-20230629102827453"></p>
<p>啊好吧，可能是路径没改完，这样吧，直接在<code>main</code>文件里把传过来的地址改一下，把之前改的注销了</p>
<p><img src="https://s1.ax1x.com/2023/06/29/pCww0bR.png" alt="image-20230629103651187"></p>
<p>再跑一下试试</p>
<p><img src="https://s1.ax1x.com/2023/06/29/pC0SLUe.png" alt="image-20230629103825433"></p>
<p>阿哲，还可以下溢的吗</p>
<hr>
<h2 id="弯路3"><a href="#弯路3" class="headerlink" title="弯路3"></a>弯路3</h2><p>隔了好多天，网上看<a href="https://ruvikm.gitee.io/2023/07/04/word2vec%E5%B7%A5%E5%85%B7%E5%AE%9E%E6%88%98/">博客</a>用word2vec工具把预训练集弄出来了，这次试试吧</p>
<p>这次跑完生成了如下几个文件</p>
<p><img src="https://s1.ax1x.com/2023/07/05/pCydeAJ.png" alt="image-20230705154808654"></p>
<p>试试把预训练的代码改一下</p>
<p><img src="https://s1.ax1x.com/2023/07/05/pCyd0jf.png" alt="image-20230705155238466"></p>
<p>跑一下<code>data_preprocess/chinese_tensor_encoder.py</code>试试吧</p>
<p><img src="https://s1.ax1x.com/2023/07/05/pCydrDS.png" alt="image-20230705155346084"></p>
<p>有毒，那把第一个文件改成<code>wiki.zh.text.model.syn1neg</code>试试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vocab_path=<span class="string">&quot;../word2vec/wiki.zh.text.model.syn1neg&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/07/05/pCydfg0.png" alt="image-20230705155536477"></p>
<p>看来没有这个文件还是不太行啊</p>
<hr>
<h2 id="将预训练的词嵌入转移到-0-1"><a href="#将预训练的词嵌入转移到-0-1" class="headerlink" title="将预训练的词嵌入转移到 [0, 1]"></a>将预训练的词嵌入转移到 [0, 1]</h2><p>又过了一段时间，联系到了原作者，热心的作者给我发了这个文件！！！！</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1eHcj8bvbQPAg76v7D<span class="built_in">_</span>Xs8A </span><br><span class="line">提取码：tvr8</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/07/10/pC2Tnnx.png" alt="image-20230710124846593"></p>
<p>跑一跑试试吧</p>
<p><img src="https://s1.ax1x.com/2023/07/10/pC2TJgA.png" alt="image-20230710125324489"></p>
<h2 id="解决编码问题"><a href="#解决编码问题" class="headerlink" title="解决编码问题"></a>解决编码问题</h2><p>好像是编码的问题？</p>
<p><img src="https://s1.ax1x.com/2023/07/10/pC2TwE8.png" alt="image-20230710125505872"></p>
<p>把里面的代码改改试试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(self.vocab_path, <span class="string">&quot;r&quot;</span>) //旧</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(self.vocab_path, <span class="string">&quot;r&quot;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) //新</span><br></pre></td></tr></table></figure>
<p>再跑试试？</p>
<p><img src="https://s1.ax1x.com/2023/07/10/pC2TLb6.png" alt="image-20230710130032731"></p>
<p>这是在跑吗好像，先等会康康吧</p>
<p><img src="https://s1.ax1x.com/2023/07/10/pC27uxs.png" alt="image-20230710131123106"></p>
<p>看来可以跑，应该是刚刚没改干净，看来和<code>open</code>有关的都需要改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(datafile_path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:   //旧</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(datafile_path, <span class="string">&quot;r&quot;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f: //新</span><br></pre></td></tr></table></figure>
<p>再跑试试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python chinese_tensor_encoder.py</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/07/10/pC2jY0s.png" alt="image-20230710144910295"></p>
<p>还有错？！继续查查怎么改</p>
<p><img src="https://s1.ax1x.com/2023/07/10/pC2jIje.png" alt="image-20230710145152994"></p>
<p>试试直接<code>ignore</code>了，不对，可能是我的数据集的问题</p>
<p><img src="https://s1.ax1x.com/2023/07/10/pC2xpRK.png" alt="image-20230710150619368"></p>
<p>把<code>ChnSentiCorp_htl_all.csv</code>的内容直接复制到<code>chnsenti_test.txt</code>中，用<code>utf-8</code>就不会出现乱码了</p>
<p>再跑跑试试</p>
<p><img src="https://s1.ax1x.com/2023/07/10/pCRp7k9.png" alt="image-20230710151333555"></p>
<p>6！把数据集直接改成<code>ChnSentiCorp_htl_all.csv</code>这个文件试试</p>
<p>emmm还是这个错，有仔细观察了一下，好像是<code>label</code>在第一个，句子在第二个，那感觉和代码里的就反过来了</p>
<p>之前的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sentence = temp[<span class="number">0</span>].strip()</span><br><span class="line">label = <span class="built_in">int</span>(temp[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p>改后:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sentence = temp[<span class="number">1</span>].strip()</span><br><span class="line">label = <span class="built_in">int</span>(temp[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p>再跑试试吧</p>
<p><img src="https://s1.ax1x.com/2023/07/10/pCRKo7R.png" alt="image-20230710161042621"></p>
<p>emmm用<code>Pycharm</code>还不能直接运行，只能在命令行里运行</p>
<p>等等我知道我为什么pycharm运行不了了</p>
<p>之前迁移过一次环境从C盘到D盘，试了试这个<a href="https://blog.csdn.net/qq_44832009/article/details/129621060">博客的方法</a>，把这个问题解决了</p>
<p>调试了一下，发现要把数据集最开始的一行删了，感觉是那个导致的报错</p>
<p>再跑试试，发现还是那个错</p>
<p>我感觉可能是数据集变了处理数据的内容需要修改一下</p>
<p>康康chatGPT是怎么处理的吧：</p>
<p>可以使用Python中的字符串操作来提取这个句子并将它分别存放在label和sentence字段中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text = &#x27;1,&quot;距离川沙公路较近,但是公交指示不对,如果是&quot;&quot;蔡陆线&quot;&quot;的话,会非常麻烦.建议用别的路线.房间较为简单.&quot;\n&#x27;</span><br><span class="line"></span><br><span class="line"># 提取label</span><br><span class="line">label = text.split(&#x27;,&#x27;)[0]</span><br><span class="line"></span><br><span class="line"># 提取sentence</span><br><span class="line">sentence = text.split(&#x27;,&#x27;)[1].strip()[1:-2]</span><br><span class="line"></span><br><span class="line">print(label)</span><br><span class="line">print(sentence)</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">距离川沙公路较近,但是公交指示不对,如果是&quot;蔡陆线&quot;的话,会非常麻烦.建议用别的路线.房间较为简单.</span><br></pre></td></tr></table></figure>
<p>按照这个把代码改一改，原代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(datafile_path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        temp = line.split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        sentence = temp[<span class="number">0</span>].strip()</span><br><span class="line">        label = <span class="built_in">int</span>(temp[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># sentence = temp[1].strip()</span></span><br><span class="line">        <span class="comment"># label = int(temp[0])</span></span><br><span class="line">        sample_list.append((sentence, label))</span><br></pre></td></tr></table></figure>
<p>改完</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(datafile_path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">       <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">           temp = line.split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">           <span class="comment"># sentence = temp[0].strip()</span></span><br><span class="line">           <span class="comment"># label = int(temp[1])</span></span><br><span class="line">           sentence = temp[<span class="number">0</span>].split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>].strip()[<span class="number">1</span>:-<span class="number">2</span>]</span><br><span class="line">           label = temp[<span class="number">0</span>].split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">           sample_list.append((sentence, label))</span><br></pre></td></tr></table></figure>
<p>跑跑试试</p>
<p><img src="https://s1.ax1x.com/2023/07/10/pCRdGYF.png" alt="image-20230710184632963"></p>
<p>感觉有希望了耶，试试把报错那句的<code>utf8</code>去掉试试。再跑试试</p>
<p><img src="https://s1.ax1x.com/2023/07/10/pCRdHpQ.png" alt="image-20230710185614613"></p>
<p>别报错别报错×114514</p>
<p><img src="https://s1.ax1x.com/2023/07/10/pCRwAn1.png" alt="image-20230710190309371"></p>
<p>居然说我找不到文件，建个叫<code>senti</code>的文件夹试试</p>
<p><img src="https://s1.ax1x.com/2023/07/10/pCRBsYT.png" alt="08f46c72ca112d14c2102a5e17a7406"></p>
<h2 id="训练定制模型"><a href="#训练定制模型" class="headerlink" title="训练定制模型"></a>训练定制模型</h2><p><img src="https://s1.ax1x.com/2023/07/10/pCRDd3D.png" alt="image-20230710194725452"></p>
<p>好像又是少文件，试试把刚刚跑出来的文件重命名为<code>train_u_3v_sst2_glove300d_sent_len25.tensor_dataset</code>试试</p>
<p><img src="https://s1.ax1x.com/2023/07/10/pCRDrDA.png" alt="image-20230710195102925"></p>
<p>啊这，再把上面跑出来的文件复制一份改个名过去康康</p>
<p><img src="https://s1.ax1x.com/2023/07/10/pCRDRC8.png" alt="image-20230710195304235"></p>
<p>我怎么没看懂哪错了，从下往上看，找到最后项目代码报的那一行错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.save(model.state_dict(), save_path)</span><br></pre></td></tr></table></figure>
<p>好像是我之前把日志那行代码注释了导致的</p>
<p><img src="https://s1.ax1x.com/2023/07/12/pCfjlM8.png" alt="屏幕截图 2023-07-12 203749"></p>
<p>解除注释试试</p>
<p><img src="https://s1.ax1x.com/2023/07/12/pCfj1sS.png" alt="image-20230712203926230"></p>
<p>又是文件读写的问题，好像日志文件就是创建不了，难道是系统权限的问题吗</p>
<h2 id="解决报错OSError-Errno-22-Invalid-argument"><a href="#解决报错OSError-Errno-22-Invalid-argument" class="headerlink" title="解决报错OSError:[Errno 22] Invalid argument"></a>解决报错OSError:[Errno 22] Invalid argument</h2><p>试试用管理员身份运行试试</p>
<p><img src="https://s1.ax1x.com/2023/07/12/pCfvVyT.png" alt="image-20230712204810636"></p>
<p>看来不是权限的问题，突然网上看到了这个，我感觉很有道理耶</p>
<p><img src="https://s1.ax1x.com/2023/07/12/pCfvmmF.png" alt="image-20230712204932116"></p>
<p>不能用冒号啊！！！！！！！！！！！！！！！！！！！！！！！</p>
<p><img src="https://s1.ax1x.com/2023/07/12/pChpwb8.png" alt="屏幕截图 2023-07-12 222221"></p>
<p>瞬间知道怎么改了</p>
<p>把这句改一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file_name = <span class="string">&quot;&#123;&#125;.log&quot;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, local_time))  //旧</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&quot;&#123;&#125;.log&quot;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&quot;%Y-%m-%d %H-%M-%S&quot;</span>, local_time))  //新</span><br></pre></td></tr></table></figure>
<p>跑一次试试</p>
<p><img src="https://s1.ax1x.com/2023/07/12/pChpI54.png" alt="image-20230712222431492">怎么还有冒号</p>
<p><img src="https://s1.ax1x.com/2023/07/12/pChpH2R.png" alt="image-20230712222534705"></p>
<p>把这里全局搜索到的都改一下试试</p>
<p><img src="https://s1.ax1x.com/2023/07/12/pCh9CRA.png" alt="image-20230712222823863"></p>
<p>难道有戏？！</p>
<p><img src="https://s1.ax1x.com/2023/07/12/pCh9FMt.png" alt="image-20230712222935732"></p>
<p>对比一下作者的结果</p>
<p><img src="https://s1.ax1x.com/2023/07/13/pChW50f.png" alt="屏幕截图 2023-07-13 161415"></p>
<p>为什么作者的好高啊</p>
<h2 id="转换-归一化"><a href="#转换-归一化" class="headerlink" title="转换+归一化"></a>转换+归一化</h2><p>接下来就是把这句改成批处理的代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python main.py \</span><br><span class="line">--mode conversion</span><br><span class="line">--model_mode snn</span><br><span class="line">--model_type textcnn</span><br><span class="line">--conversion_mode normalize</span><br><span class="line">--conversion_normalize_type model_base or data_base</span><br></pre></td></tr></table></figure>
<p>转换完后，在前面加上切换环境的代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line">%切换到snn环境%</span><br><span class="line">CALL activate snn</span><br><span class="line"></span><br><span class="line">python main.py ^</span><br><span class="line">--mode conversion ^</span><br><span class="line">--model_mode snn ^</span><br><span class="line">--model_type textcnn ^</span><br><span class="line">--conversion_mode normalize ^</span><br><span class="line">--conversion_normalize_type model_base or data_base</span><br></pre></td></tr></table></figure>
<p>跑一下试试</p>
<p><img src="https://s1.ax1x.com/2023/07/13/pChm1Vs.png" alt="image-20230713091029595"></p>
<p>这题我会！又是文件名不符合Windows的命名规则（<del>说人话就是不能出现<code>:</code></del>）</p>
<p>在全局搜一下<code>%H:%M:%S</code>关键字，但是我搜到的全改了啊</p>
<p>突然一看报的时间，咦？为什么是2022年的呢，可能是不是写死文件名了</p>
<p>顺着搜了一下</p>
<p><img src="https://s1.ax1x.com/2023/07/13/pChmRMD.png" alt="image-20230713091633520"></p>
<p>果然！！！把后面那部分去了试试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.conversion_model_path = <span class="string">&quot;saved_models/2022-09-17 22:53:22.log--epoch4.pth&quot;</span>   //旧</span><br><span class="line">self.conversion_model_path = <span class="string">&quot;saved_models/&quot;</span>   //新</span><br></pre></td></tr></table></figure>
<p>再跑跑试试</p>
<p><img src="https://s1.ax1x.com/2023/07/13/pChnKW6.png" alt="image-20230713091926963"></p>
<p>为什么拒绝访问鸭。我懂了，应该是要加载某个文件，我试试加载一个文件试试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.conversion_model_path = <span class="string">&quot;saved_models/model_modeann-modetrain-model_typetextcnn-dataset_namesst2-sentence_length25-dropout_p0.5-weight_decay0.0-batch_size32-learning_rate0.0001-label_num2/2023-07-12 22-29-13.log--epoch46.pth&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/07/13/pChn46U.png" alt="image-20230713093254555"></p>
<p>虽然但是，为什么精度还下降了一点emm。不过我的推理没错，这里果然是要加载一个文件，<del>跑起来就算成功</del></p>
<p>以下是作者的结果，好神秘只有<code>Conv SNN + MN</code>这一项和作者比较接近</p>
<p><img src="https://s1.ax1x.com/2023/07/13/pChfl3d.png" alt="image-20230713162351591"></p>
<h2 id="转换-微调"><a href="#转换-微调" class="headerlink" title="转换 + 微调"></a>转换 + 微调</h2><p>还是惯例，把下面的代码换成Windows下能运行的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python main.py \</span><br><span class="line">--mode conversion</span><br><span class="line">--model_mode snn</span><br><span class="line">--model_type textcnn</span><br><span class="line">--conversion_mode tune</span><br></pre></td></tr></table></figure>
<p>换成.bat文件后，加上环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line">%切换到snn环境%</span><br><span class="line">CALL activate snn</span><br><span class="line"></span><br><span class="line">python main.py ^</span><br><span class="line">--mode conversion ^</span><br><span class="line">--model_mode snn ^</span><br><span class="line">--model_type textcnn ^</span><br><span class="line">--conversion_mode tune</span><br></pre></td></tr></table></figure>
<p>运行试试</p>
<p><img src="https://s1.ax1x.com/2023/07/13/pChuNB4.png" alt="image-20230713094327585"></p>
<p>为什么不动鸭，再等等吧</p>
<p><img src="https://s1.ax1x.com/2023/07/13/pChuyjO.png" alt="image-20230713094837489"></p>
<p>速度好慢，一直挂着吧</p>
<p><img src="https://s1.ax1x.com/2023/07/13/pChMaf1.png" alt="image-20230713102720050"></p>
<p>半小时走了20%</p>
<p><img src="https://s1.ax1x.com/2023/07/13/pChURQH.png" alt="image-20230713112248591"></p>
<p>过了一小时，又走了20%多</p>
<p><img src="https://s1.ax1x.com/2023/07/13/pChdMEq.png" alt="image-20230713115158894"></p>
<p>又过了一小时，说起来这玩意占资源占的好多</p>
<p><img src="https://s1.ax1x.com/2023/07/13/pChd88U.png" alt="image-20230713115306126"></p>
<p>又过了一个多小时….</p>
<p><img src="https://s1.ax1x.com/2023/07/13/pCh0yBd.png" alt="image-20230713125534432"></p>
<p>ohhhhhhhhhhhhhh终于跑完了</p>
<p><img src="https://s1.ax1x.com/2023/07/13/pChBubd.png" alt="屏幕截图 2023-07-13 131142"></p>
<p><img src="https://s1.ax1x.com/2023/07/13/pChBnDH.png" alt="屏幕截图 2023-07-13 131125"></p>
<p>记录一下全部的输出</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">cmd.exe /c &quot;Conversion + Fine-tuning SNNs.bat&quot;</span><br><span class="line">Program args: SNNArgs(args<span class="built_in">_</span>for<span class="built_in">_</span>logging=[&#x27;model<span class="built_in">_</span>mode&#x27;, &#x27;mode&#x27;, &#x27;conversion<span class="built_in">_</span>mode&#x27;, &#x27;model<span class="built_in">_</span>type&#x27;, &#x27;dataset<span class="built_in">_</span>name&#x27;, &#x27;conversion<span class="built_in">_</span>normalize<span class="built_in">_</span>type&#x27;, &#x27;label<span class="built_in">_</span>num&#x27;, &#x27;positive<span class="built_in">_</span>init<span class="built_in">_</span>rate&#x27;, &#x27;num<span class="built_in">_</span>steps&#x27;, &#x27;learning<span class="built_in">_</span>rate&#x27;], attack<span class="built_in">_</span>logging<span class="built_in">_</span>dir=&#x27;D:<span class="keyword">\\</span>code<span class="keyword">\\</span>SNN<span class="keyword">\\</span>logs<span class="built_in">_</span>attack&#x27;, attack<span class="built_in">_</span>method=&#x27;textfooler&#x27;, attack<span class="built_in">_</span>model<span class="built_in">_</span>path=&#x27;saved<span class="built_in">_</span>models/best.pth&#x27;, attack<span class="built_in">_</span>numbers=1000, attack<span class="built_in">_</span>text<span class="built_in">_</span>path=&#x27;data/sst2/test.txt&#x27;, attack<span class="built_in">_</span>times=1, batch<span class="built_in">_</span>size=32, beta=1.0, bidirectional=&#x27;True&#x27;, bit=8, codebook<span class="built_in">_</span>type=&#x27;green&#x27;, conversion<span class="built_in">_</span>mode=&#x27;tune&#x27;, conversion<span class="built_in">_</span>model<span class="built_in">_</span>path=&#x27;saved<span class="built_in">_</span>models/model<span class="built_in">_</span>modeann-modetrain-model<span class="built_in">_</span>typetextcnn-dataset<span class="built_in">_</span>namesst2-sentence<span class="built_in">_</span>length25-dropout<span class="built_in">_</span>p0.5-weight<span class="built_in">_</span>decay0.0-batch<span class="built_in">_</span>size32-learning<span class="built_in">_</span>rate0.0001-label<span class="built_in">_</span>num2/2023-07-12 22-29-13.log--epoch46.pth&#x27;, conversion<span class="built_in">_</span>normalize<span class="built_in">_</span>type=&#x27;model<span class="built_in">_</span>base&#x27;, data<span class="built_in">_</span>augment<span class="built_in">_</span>path=&#x27;data/sst2/train<span class="built_in">_</span>augment.txt&#x27;, data<span class="built_in">_</span>dir=&#x27;D:<span class="keyword">\\</span>code<span class="keyword">\\</span>SNN<span class="keyword">\\</span>data<span class="keyword">\\</span>sst2&#x27;, data<span class="built_in">_</span>path=&#x27;data/sst2/train<span class="built_in">_</span>u<span class="built_in">_</span>3v<span class="built_in">_</span>sst2<span class="built_in">_</span>glove300d<span class="built_in">_</span>sent<span class="built_in">_</span>len25.tensor<span class="built_in">_</span>dataset&#x27;, dataset<span class="built_in">_</span>name=&#x27;sst2&#x27;, dead<span class="built_in">_</span>neuron<span class="built_in">_</span>checker=&#x27;False&#x27;, dev<span class="built_in">_</span>data<span class="built_in">_</span>path=&#x27;data/sst2/dev<span class="built_in">_</span>u<span class="built_in">_</span>3v<span class="built_in">_</span>sst2<span class="built_in">_</span>glove300d<span class="built_in">_</span>sent<span class="built_in">_</span>len25.tensor<span class="built_in">_</span>dataset&#x27;, device=device(type=&#x27;cuda&#x27;), distill<span class="built_in">_</span>batch=32, distill<span class="built_in">_</span>epoch=30, dpcnn<span class="built_in">_</span>block<span class="built_in">_</span>num=2, dpcnn<span class="built_in">_</span>step<span class="built_in">_</span>length=5, dropout<span class="built_in">_</span>p=0.5, encode=&#x27;rate&#x27;, ensemble=&#x27;False&#x27;, ensemble<span class="built_in">_</span>class=2, epochs=50, feature<span class="built_in">_</span>loss<span class="built_in">_</span>weight=10, filter<span class="built_in">_</span>num=100, filters=[3, 4, 5], hidden<span class="built_in">_</span>dim=300, hidden<span class="built_in">_</span>layer<span class="built_in">_</span>num=200, initial<span class="built_in">_</span>method=&#x27;zero&#x27;, label<span class="built_in">_</span>num=2, learning<span class="built_in">_</span>rate=0.0001, logging<span class="built_in">_</span>dir=&#x27;D:<span class="keyword">\\</span>code<span class="keyword">\\</span>SNN<span class="keyword">\\</span>logs<span class="keyword">\\</span>model<span class="built_in">_</span>modesnn-modeconversion-conversion<span class="built_in">_</span>modetune-model<span class="built_in">_</span>typetextcnn-dataset<span class="built_in">_</span>namesst2-conversion<span class="built_in">_</span>normalize<span class="built_in">_</span>typemodel<span class="built_in">_</span>base-label<span class="built_in">_</span>num2-positive<span class="built_in">_</span>init<span class="built_in">_</span>rate0.55-num<span class="built_in">_</span>steps50-learning<span class="built_in">_</span>rate0.0001&#x27;, logging<span class="built_in">_</span>path=&#x27;D:<span class="keyword">\\</span>code<span class="keyword">\\</span>SNN<span class="keyword">\\</span>logs<span class="keyword">\\</span>model<span class="built_in">_</span>modesnn-modeconversion-conversion<span class="built_in">_</span>modetune-model<span class="built_in">_</span>typetextcnn-dataset<span class="built_in">_</span>namesst2-conversion<span class="built_in">_</span>normalize<span class="built_in">_</span>typemodel<span class="built_in">_</span>base-label<span class="built_in">_</span>num2-positive<span class="built_in">_</span>init<span class="built_in">_</span>rate0.55-num<span class="built_in">_</span>steps50-learning<span class="built_in">_</span>rate0.0001<span class="keyword">\\</span>2023-07-13 09-38-21.log&#x27;, logit<span class="built_in">_</span>loss<span class="built_in">_</span>weight=1.0, loss=&#x27;ce<span class="built_in">_</span>rate&#x27;, lstm<span class="built_in">_</span>fc1<span class="built_in">_</span>num=200, lstm<span class="built_in">_</span>hidden<span class="built_in">_</span>size=150, lstm<span class="built_in">_</span>layers<span class="built_in">_</span>num=1, max<span class="built_in">_</span>len=25, mode=&#x27;conversion&#x27;, model<span class="built_in">_</span>mode=&#x27;snn&#x27;, model<span class="built_in">_</span>type=&#x27;textcnn&#x27;, modify<span class="built_in">_</span>ratio=0.1, neighbour<span class="built_in">_</span>vocab<span class="built_in">_</span>size=15, num<span class="built_in">_</span>steps=50, optimizer<span class="built_in">_</span>name=&#x27;Adamw&#x27;, positive<span class="built_in">_</span>init<span class="built_in">_</span>rate=0.55, pretrain<span class="built_in">_</span>embedding<span class="built_in">_</span>name=&#x27;glove&#x27;, saving<span class="built_in">_</span>dir=&#x27;D:<span class="keyword">\\</span>code<span class="keyword">\\</span>SNN<span class="keyword">\\</span>saved<span class="built_in">_</span>models<span class="keyword">\\</span>model<span class="built_in">_</span>modesnn-modeconversion-conversion<span class="built_in">_</span>modetune-model<span class="built_in">_</span>typetextcnn-dataset<span class="built_in">_</span>namesst2-conversion<span class="built_in">_</span>normalize<span class="built_in">_</span>typemodel<span class="built_in">_</span>base-label<span class="built_in">_</span>num2-positive<span class="built_in">_</span>init<span class="built_in">_</span>rate0.55-num<span class="built_in">_</span>steps50-learning<span class="built_in">_</span>rate0.0001&#x27;, seed=42, sentence<span class="built_in">_</span>length=25, sentence<span class="built_in">_</span>similarity=0.8, student<span class="built_in">_</span>model<span class="built_in">_</span>name=&#x27;dpcnn&#x27;, surrogate=&#x27;fast<span class="built_in">_</span>sigmoid&#x27;, teacher<span class="built_in">_</span>model<span class="built_in">_</span>path=&#x27;saved<span class="built_in">_</span>models/bert-base-uncased<span class="built_in">_</span>2022-09-14 18:27:35<span class="built_in">_</span>epoch0<span class="built_in">_</span>0.9335529928610653&#x27;, test<span class="built_in">_</span>data<span class="built_in">_</span>path=&#x27;data/sst2/test<span class="built_in">_</span>u<span class="built_in">_</span>3v<span class="built_in">_</span>sst2<span class="built_in">_</span>glove300d<span class="built_in">_</span>sent<span class="built_in">_</span>len25.tensor<span class="built_in">_</span>dataset&#x27;, threshold=1.0, use<span class="built_in">_</span>codebook=&#x27;False&#x27;, use<span class="built_in">_</span>seed=&#x27;False&#x27;, vocab<span class="built_in">_</span>path=&#x27;D:<span class="keyword">\\</span>code<span class="keyword">\\</span>SNN<span class="keyword">\\</span>data/glove.6B.300d.txt&#x27;, weight<span class="built_in">_</span>decay=0.0, workspace=&#x27;D:<span class="keyword">\\</span>code<span class="keyword">\\</span>SNN&#x27;)</span><br><span class="line">Build model...</span><br><span class="line">SNN<span class="built_in">_</span>TextCNN(</span><br><span class="line">  (convs<span class="built_in">_</span>1): ModuleList(</span><br><span class="line">    (0): Conv2d(1, 100, kernel<span class="built_in">_</span>size=(3, 300), stride=(1, 1))</span><br><span class="line">    (1): Conv2d(1, 100, kernel<span class="built_in">_</span>size=(4, 300), stride=(1, 1))</span><br><span class="line">    (2): Conv2d(1, 100, kernel<span class="built_in">_</span>size=(5, 300), stride=(1, 1))</span><br><span class="line">  )</span><br><span class="line">  (middle<span class="built_in">_</span>lifs): ModuleList(</span><br><span class="line">    (0): Leaky()</span><br><span class="line">    (1): Leaky()</span><br><span class="line">    (2): Leaky()</span><br><span class="line">  )</span><br><span class="line">  (avgpool<span class="built_in">_</span>1): ModuleList(</span><br><span class="line">    (0): AvgPool2d(kernel<span class="built_in">_</span>size=(23, 1), stride=(23, 1), padding=0)</span><br><span class="line">    (1): AvgPool2d(kernel<span class="built_in">_</span>size=(22, 1), stride=(22, 1), padding=0)</span><br><span class="line">    (2): AvgPool2d(kernel<span class="built_in">_</span>size=(21, 1), stride=(21, 1), padding=0)</span><br><span class="line">  )</span><br><span class="line">  (lif1): Leaky()</span><br><span class="line">  (fc<span class="built_in">_</span>1): Linear(in<span class="built_in">_</span>features=300, out<span class="built_in">_</span>features=2, bias=True)</span><br><span class="line">  (lif2): Leaky()</span><br><span class="line">)</span><br><span class="line">Build dataset...</span><br><span class="line">Build dataset...</span><br><span class="line">Build rated<span class="built_in">_</span>dataset...</span><br><span class="line">Build dataloader...</span><br><span class="line">Build rated<span class="built_in">_</span>dataset...</span><br><span class="line">Build dataloader...</span><br><span class="line">Test acc of conversioned textcnn is: 0.7939737316507854</span><br><span class="line">Build Optimizer...</span><br><span class="line">Training Begin</span><br><span class="line"> 56<span class="comment">%|█████▌    | 28/50 [2:00:10&lt;1:38:16, 268.02s/it]Dead_neuron_rate in epoch 0: 0.15.</span></span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 0: 0.0.</span><br><span class="line">Training epoch 0, avg<span class="built_in">_</span>loss: tensor([0.5627], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 0 is: 0.7807107906258048</span><br><span class="line">D:<span class="keyword">\code</span><span class="keyword">\SNN</span><span class="keyword">\saved</span><span class="built_in">_</span>models<span class="keyword">\model</span><span class="built_in">_</span>modesnn-modeconversion-conversion<span class="built_in">_</span>modetune-model<span class="built_in">_</span>typetextcnn-dataset<span class="built_in">_</span>namesst2-conversion<span class="built_in">_</span>normalize<span class="built_in">_</span>typemodel<span class="built_in">_</span>base-label<span class="built_in">_</span>num2-positive<span class="built_in">_</span>init<span class="built_in">_</span>rate0.55-num<span class="built_in">_</span>steps50-learning<span class="built_in">_</span>rate0.0001<span class="keyword">\2</span>023-07-13 09-44-12.log--epoch0.pth</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 1: 0.15333333333333332.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 1: 0.0.</span><br><span class="line">Training epoch 1, avg<span class="built_in">_</span>loss: tensor([0.5601], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 1 is: 0.7866340458408447</span><br><span class="line">D:<span class="keyword">\code</span><span class="keyword">\SNN</span><span class="keyword">\saved</span><span class="built_in">_</span>models<span class="keyword">\model</span><span class="built_in">_</span>modesnn-modeconversion-conversion<span class="built_in">_</span>modetune-model<span class="built_in">_</span>typetextcnn-dataset<span class="built_in">_</span>namesst2-conversion<span class="built_in">_</span>normalize<span class="built_in">_</span>typemodel<span class="built_in">_</span>base-label<span class="built_in">_</span>num2-positive<span class="built_in">_</span>init<span class="built_in">_</span>rate0.55-num<span class="built_in">_</span>steps50-learning<span class="built_in">_</span>rate0.0001<span class="keyword">\2</span>023-07-13 09-47-44.log--epoch1.pth</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 2: 0.15.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 2: 0.0.</span><br><span class="line">Training epoch 2, avg<span class="built_in">_</span>loss: tensor([0.5585], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 2 is: 0.7778779294360031</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 3: 0.15333333333333332.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 3: 0.0.</span><br><span class="line">Training epoch 3, avg<span class="built_in">_</span>loss: tensor([0.5592], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 3 is: 0.7863765130054082</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 4: 0.12333333333333334.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 4: 0.0.</span><br><span class="line">Training epoch 4, avg<span class="built_in">_</span>loss: tensor([0.5588], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 4 is: 0.7892093741952099</span><br><span class="line">D:<span class="keyword">\code</span><span class="keyword">\SNN</span><span class="keyword">\saved</span><span class="built_in">_</span>models<span class="keyword">\model</span><span class="built_in">_</span>modesnn-modeconversion-conversion<span class="built_in">_</span>modetune-model<span class="built_in">_</span>typetextcnn-dataset<span class="built_in">_</span>namesst2-conversion<span class="built_in">_</span>normalize<span class="built_in">_</span>typemodel<span class="built_in">_</span>base-label<span class="built_in">_</span>num2-positive<span class="built_in">_</span>init<span class="built_in">_</span>rate0.55-num<span class="built_in">_</span>steps50-learning<span class="built_in">_</span>rate0.0001<span class="keyword">\2</span>023-07-13 09-59-33.log--epoch4.pth</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 5: 0.16333333333333333.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 5: 0.0.</span><br><span class="line">Training epoch 5, avg<span class="built_in">_</span>loss: tensor([0.5589], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 5 is: 0.7898532062838012</span><br><span class="line">D:<span class="keyword">\code</span><span class="keyword">\SNN</span><span class="keyword">\saved</span><span class="built_in">_</span>models<span class="keyword">\model</span><span class="built_in">_</span>modesnn-modeconversion-conversion<span class="built_in">_</span>modetune-model<span class="built_in">_</span>typetextcnn-dataset<span class="built_in">_</span>namesst2-conversion<span class="built_in">_</span>normalize<span class="built_in">_</span>typemodel<span class="built_in">_</span>base-label<span class="built_in">_</span>num2-positive<span class="built_in">_</span>init<span class="built_in">_</span>rate0.55-num<span class="built_in">_</span>steps50-learning<span class="built_in">_</span>rate0.0001<span class="keyword">\2</span>023-07-13 10-03-51.log--epoch5.pth</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 6: 0.15.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 6: 0.0.</span><br><span class="line">Training epoch 6, avg<span class="built_in">_</span>loss: tensor([0.5583], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 6 is: 0.7944887973216586</span><br><span class="line">D:<span class="keyword">\code</span><span class="keyword">\SNN</span><span class="keyword">\saved</span><span class="built_in">_</span>models<span class="keyword">\model</span><span class="built_in">_</span>modesnn-modeconversion-conversion<span class="built_in">_</span>modetune-model<span class="built_in">_</span>typetextcnn-dataset<span class="built_in">_</span>namesst2-conversion<span class="built_in">_</span>normalize<span class="built_in">_</span>typemodel<span class="built_in">_</span>base-label<span class="built_in">_</span>num2-positive<span class="built_in">_</span>init<span class="built_in">_</span>rate0.55-num<span class="built_in">_</span>steps50-learning<span class="built_in">_</span>rate0.0001<span class="keyword">\2</span>023-07-13 10-08-05.log--epoch6.pth</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 7: 0.15333333333333332.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 7: 0.0.</span><br><span class="line">Training epoch 7, avg<span class="built_in">_</span>loss: tensor([0.5564], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 7 is: 0.7647437548287407</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 8: 0.13333333333333333.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 8: 0.0.</span><br><span class="line">Training epoch 8, avg<span class="built_in">_</span>loss: tensor([0.5547], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 8 is: 0.773886170486737</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 9: 0.15.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 9: 0.0.</span><br><span class="line">Training epoch 9, avg<span class="built_in">_</span>loss: tensor([0.5537], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 9 is: 0.7920422353850116</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 10: 0.15666666666666668.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 10: 0.0.</span><br><span class="line">Training epoch 10, avg<span class="built_in">_</span>loss: tensor([0.5517], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 10 is: 0.7962915271697142</span><br><span class="line">D:<span class="keyword">\code</span><span class="keyword">\SNN</span><span class="keyword">\saved</span><span class="built_in">_</span>models<span class="keyword">\model</span><span class="built_in">_</span>modesnn-modeconversion-conversion<span class="built_in">_</span>modetune-model<span class="built_in">_</span>typetextcnn-dataset<span class="built_in">_</span>namesst2-conversion<span class="built_in">_</span>normalize<span class="built_in">_</span>typemodel<span class="built_in">_</span>base-label<span class="built_in">_</span>num2-positive<span class="built_in">_</span>init<span class="built_in">_</span>rate0.55-num<span class="built_in">_</span>steps50-learning<span class="built_in">_</span>rate0.0001<span class="keyword">\2</span>023-07-13 10-25-53.log--epoch10.pth</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 11: 0.15.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 11: 0.0.</span><br><span class="line">Training epoch 11, avg<span class="built_in">_</span>loss: tensor([0.5532], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 11 is: 0.7890806077774917</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 12: 0.14333333333333334.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 12: 0.0.</span><br><span class="line">Training epoch 12, avg<span class="built_in">_</span>loss: tensor([0.5551], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 12 is: 0.7742724697398918</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 13: 0.15.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 13: 0.0.</span><br><span class="line">Training epoch 13, avg<span class="built_in">_</span>loss: tensor([0.5559], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 13 is: 0.801184651043008</span><br><span class="line">D:<span class="keyword">\code</span><span class="keyword">\SNN</span><span class="keyword">\saved</span><span class="built_in">_</span>models<span class="keyword">\model</span><span class="built_in">_</span>modesnn-modeconversion-conversion<span class="built_in">_</span>modetune-model<span class="built_in">_</span>typetextcnn-dataset<span class="built_in">_</span>namesst2-conversion<span class="built_in">_</span>normalize<span class="built_in">_</span>typemodel<span class="built_in">_</span>base-label<span class="built_in">_</span>num2-positive<span class="built_in">_</span>init<span class="built_in">_</span>rate0.55-num<span class="built_in">_</span>steps50-learning<span class="built_in">_</span>rate0.0001<span class="keyword">\2</span>023-07-13 10-38-37.log--epoch13.pth</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 14: 0.13666666666666666.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 14: 0.0.</span><br><span class="line">Training epoch 14, avg<span class="built_in">_</span>loss: tensor([0.5492], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 14 is: 0.7755601339170745</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 15: 0.14666666666666667.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 15: 0.0.</span><br><span class="line">Training epoch 15, avg<span class="built_in">_</span>loss: tensor([0.5500], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 15 is: 0.8000257532835436</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 16: 0.14.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 16: 0.0.</span><br><span class="line">Training epoch 16, avg<span class="built_in">_</span>loss: tensor([0.5511], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 16 is: 0.798738089106361</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 17: 0.14333333333333334.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 17: 0.0.</span><br><span class="line">Training epoch 17, avg<span class="built_in">_</span>loss: tensor([0.5511], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 17 is: 0.800154519701262</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 18: 0.13666666666666666.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 18: 0.0.</span><br><span class="line">Training epoch 18, avg<span class="built_in">_</span>loss: tensor([0.5511], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 18 is: 0.7955189286634046</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 19: 0.14333333333333334.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 19: 0.0.</span><br><span class="line">Training epoch 19, avg<span class="built_in">_</span>loss: tensor([0.5499], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 19 is: 0.7998969868658254</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 20: 0.14.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 20: 0.0.</span><br><span class="line">Training epoch 20, avg<span class="built_in">_</span>loss: tensor([0.5454], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 20 is: 0.7839299510687613</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 21: 0.14666666666666667.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 21: 0.0.</span><br><span class="line">Training epoch 21, avg<span class="built_in">_</span>loss: tensor([0.5480], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 21 is: 0.7948750965748133</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 22: 0.14333333333333334.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 22: 0.0.</span><br><span class="line">Training epoch 22, avg<span class="built_in">_</span>loss: tensor([0.5478], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 22 is: 0.8050476435745557</span><br><span class="line">D:<span class="keyword">\code</span><span class="keyword">\SNN</span><span class="keyword">\saved</span><span class="built_in">_</span>models<span class="keyword">\model</span><span class="built_in">_</span>modesnn-modeconversion-conversion<span class="built_in">_</span>modetune-model<span class="built_in">_</span>typetextcnn-dataset<span class="built_in">_</span>namesst2-conversion<span class="built_in">_</span>normalize<span class="built_in">_</span>typemodel<span class="built_in">_</span>base-label<span class="built_in">_</span>num2-positive<span class="built_in">_</span>init<span class="built_in">_</span>rate0.55-num<span class="built_in">_</span>steps50-learning<span class="built_in">_</span>rate0.0001<span class="keyword">\2</span>023-07-13 11-20-25.log--epoch22.pth</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 23: 0.13.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 23: 0.0.</span><br><span class="line">Training epoch 23, avg<span class="built_in">_</span>loss: tensor([0.5459], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 23 is: 0.8016997167138811</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 24: 0.13.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 24: 0.0.</span><br><span class="line">Training epoch 24, avg<span class="built_in">_</span>loss: tensor([0.5517], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 24 is: 0.8019572495493176</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 25: 0.14333333333333334.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 25: 0.0.</span><br><span class="line">Training epoch 25, avg<span class="built_in">_</span>loss: tensor([0.5518], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 25 is: 0.8047901107391192</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 26: 0.14333333333333334.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 26: 0.0.</span><br><span class="line">Training epoch 26, avg<span class="built_in">_</span>loss: tensor([0.5454], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 26 is: 0.8023435488024723</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 27: 0.13666666666666666.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 27: 0.0.</span><br><span class="line">Training epoch 27, avg<span class="built_in">_</span>loss: tensor([0.5489], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">100<span class="comment">%|██████████| 50/50 [3:27:59&lt;00:00, 249.58s/it]</span></span><br><span class="line"></span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 28: 0.13.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 28: 0.0.</span><br><span class="line">Training epoch 28, avg<span class="built_in">_</span>loss: tensor([0.5489], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 28 is: 0.7604944630440381</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 29: 0.12.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 29: 0.0.</span><br><span class="line">Training epoch 29, avg<span class="built_in">_</span>loss: tensor([0.5444], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 29 is: 0.798738089106361</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 30: 0.12333333333333334.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 30: 0.0.</span><br><span class="line">Training epoch 30, avg<span class="built_in">_</span>loss: tensor([0.5491], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 30 is: 0.7631985578161216</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 31: 0.12333333333333334.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 31: 0.0.</span><br><span class="line">Training epoch 31, avg<span class="built_in">_</span>loss: tensor([0.5452], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 31 is: 0.7772340973474118</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 32: 0.11.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 32: 0.0.</span><br><span class="line">Training epoch 32, avg<span class="built_in">_</span>loss: tensor([0.5444], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 32 is: 0.8040175122328097</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 33: 0.11666666666666667.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 33: 0.0.</span><br><span class="line">Training epoch 33, avg<span class="built_in">_</span>loss: tensor([0.5444], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 33 is: 0.8032449137265001</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 34: 0.11333333333333333.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 34: 0.0.</span><br><span class="line">Training epoch 34, avg<span class="built_in">_</span>loss: tensor([0.5453], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 34 is: 0.7830285861447335</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 35: 0.11.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 35: 0.0.</span><br><span class="line">Training epoch 35, avg<span class="built_in">_</span>loss: tensor([0.5422], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 35 is: 0.7910121040432655</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 36: 0.11666666666666667.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 36: 0.0.</span><br><span class="line">Training epoch 36, avg<span class="built_in">_</span>loss: tensor([0.5444], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 36 is: 0.8082668040175123</span><br><span class="line">D:<span class="keyword">\code</span><span class="keyword">\SNN</span><span class="keyword">\saved</span><span class="built_in">_</span>models<span class="keyword">\model</span><span class="built_in">_</span>modesnn-modeconversion-conversion<span class="built_in">_</span>modetune-model<span class="built_in">_</span>typetextcnn-dataset<span class="built_in">_</span>namesst2-conversion<span class="built_in">_</span>normalize<span class="built_in">_</span>typemodel<span class="built_in">_</span>base-label<span class="built_in">_</span>num2-positive<span class="built_in">_</span>init<span class="built_in">_</span>rate0.55-num<span class="built_in">_</span>steps50-learning<span class="built_in">_</span>rate0.0001<span class="keyword">\2</span>023-07-13 12-15-12.log--epoch36.pth</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 37: 0.11.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 37: 0.0.</span><br><span class="line">Training epoch 37, avg<span class="built_in">_</span>loss: tensor([0.5459], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 37 is: 0.8078805047643575</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 38: 0.11333333333333333.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 38: 0.0.</span><br><span class="line">Training epoch 38, avg<span class="built_in">_</span>loss: tensor([0.5459], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 38 is: 0.7796806592840587</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 39: 0.10666666666666667.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 39: 0.0.</span><br><span class="line">Training epoch 39, avg<span class="built_in">_</span>loss: tensor([0.5416], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 39 is: 0.805176409992274</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 40: 0.10333333333333333.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 40: 0.0.</span><br><span class="line">Training epoch 40, avg<span class="built_in">_</span>loss: tensor([0.5448], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 40 is: 0.8096832346124131</span><br><span class="line">D:<span class="keyword">\code</span><span class="keyword">\SNN</span><span class="keyword">\saved</span><span class="built_in">_</span>models<span class="keyword">\model</span><span class="built_in">_</span>modesnn-modeconversion-conversion<span class="built_in">_</span>modetune-model<span class="built_in">_</span>typetextcnn-dataset<span class="built_in">_</span>namesst2-conversion<span class="built_in">_</span>normalize<span class="built_in">_</span>typemodel<span class="built_in">_</span>base-label<span class="built_in">_</span>num2-positive<span class="built_in">_</span>init<span class="built_in">_</span>rate0.55-num<span class="built_in">_</span>steps50-learning<span class="built_in">_</span>rate0.0001<span class="keyword">\2</span>023-07-13 12-32-03.log--epoch40.pth</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 41: 0.09333333333333334.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 41: 0.0.</span><br><span class="line">Training epoch 41, avg<span class="built_in">_</span>loss: tensor([0.5424], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 41 is: 0.7995106876126706</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 42: 0.09.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 42: 0.0.</span><br><span class="line">Training epoch 42, avg<span class="built_in">_</span>loss: tensor([0.5402], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 42 is: 0.8072366726757662</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 43: 0.09666666666666666.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 43: 0.0.</span><br><span class="line">Training epoch 43, avg<span class="built_in">_</span>loss: tensor([0.5383], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 43 is: 0.8074942055112027</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 44: 0.09.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 44: 0.0.</span><br><span class="line">Training epoch 44, avg<span class="built_in">_</span>loss: tensor([0.5393], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 44 is: 0.8074942055112027</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 45: 0.08333333333333333.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 45: 0.0.</span><br><span class="line">Training epoch 45, avg<span class="built_in">_</span>loss: tensor([0.5374], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 45 is: 0.7249549317537987</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 46: 0.08666666666666667.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 46: 0.0.</span><br><span class="line">Training epoch 46, avg<span class="built_in">_</span>loss: tensor([0.5392], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 46 is: 0.8002832861189801</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 47: 0.08333333333333333.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 47: 0.0.</span><br><span class="line">Training epoch 47, avg<span class="built_in">_</span>loss: tensor([0.5377], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 47 is: 0.8028586144733454</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 48: 0.08666666666666667.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 48: 0.0.</span><br><span class="line">Training epoch 48, avg<span class="built_in">_</span>loss: tensor([0.5361], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 48 is: 0.8007983517898533</span><br><span class="line">Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 49: 0.08333333333333333.</span><br><span class="line">Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate in epoch 49: 0.0.</span><br><span class="line">Training epoch 49, avg<span class="built_in">_</span>loss: tensor([0.5375], device=&#x27;cuda:0&#x27;, grad<span class="built_in">_</span>fn=&lt;DivBackward0&gt;).</span><br><span class="line">Test acc in epoch 49 is: 0.8078805047643575</span><br><span class="line">Mean Dead<span class="built_in">_</span>neuron<span class="built_in">_</span>rate: 0.1266</span><br><span class="line">Mean Too<span class="built_in">_</span>Activate<span class="built_in">_</span>neuron<span class="built_in">_</span>rate: 0.0</span><br><span class="line">Best Test Acc: 0.8096832346124131</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码0</span><br></pre></td></tr></table></figure>
<p>作者的结果如下，比作者的低一点</p>
<p><img src="https://s1.ax1x.com/2023/07/13/pChfl3d.png" alt="image-20230713162351591"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>历时20多天，终于把这个论文复现出来了。</p>
<p><strong>再次感谢<a href="https://github.com/Lvchangze">作者</a>，提供了数据集！！！</strong></p>
]]></content>
      <categories>
        <category>论文复现</category>
      </categories>
  </entry>
  <entry>
    <title>如何使用微信小程序IDE在github上实现团队合作</title>
    <url>/posts/f74700a5.html</url>
    <content><![CDATA[<p>——-原文——-(2020/4/16)</p>
<p>@<a href="如何使用微信开发者工具在github上实现团队合作">TOC</a><br>一.发起者要做的一些步骤</p>
<ol>
<li>首先用IDE初始化本地的git仓库<br><img src="https://img-blog.csdnimg.cn/20200130111131527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="a."><br><img src="https://img-blog.csdnimg.cn/20200130111301249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="b."></li>
<li>使用github-desktop客户端添加这个新建的本地git库并同时上传到新建的远程仓库中<br><img src="https://img-blog.csdnimg.cn/2020013011214879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="添加本地仓库"><br><img src="https://img-blog.csdnimg.cn/20200130112202771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="新建远程仓库"><br><img src="https://img-blog.csdnimg.cn/2020013011231537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020013011291517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="看一下成果嘿嘿嘿"></li>
<li>添加参与者<br><img src="https://img-blog.csdnimg.cn/20200130113301950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="最好添加的时候写参与者的名字"><br><strong>PS:被邀请者的必须要接受邀请才可以</strong></li>
</ol>
<p>二.参与者需要做的步骤</p>
<ol>
<li>在微信小程序开发者工具里添加远程仓库<br><img src="https://img-blog.csdnimg.cn/20200130114342510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="添加远程仓库_1"><img src="https://img-blog.csdnimg.cn/20200130114356569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="添加远程仓库_2"><br><img src="https://img-blog.csdnimg.cn/20200130114448885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="如何查看仓库的地址"></li>
<li>绑定自己的github账号<br><img src="https://img-blog.csdnimg.cn/20200130115015761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="绑定账号"></li>
</ol>
<p>三.如何线上合作</p>
<ol>
<li>参与者在调试好了一些功能以后，提交到远程仓库的分支<br><img src="https://img-blog.csdnimg.cn/20200130120245999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="提交分支"></li>
<li>参与者请求合并分支<br><img src="https://img-blog.csdnimg.cn/20200130120523380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="请求合并_1"><br><img src="https://img-blog.csdnimg.cn/20200130120921309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="请求合并_2"><br><img src="https://img-blog.csdnimg.cn/20200130120955937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="发起合并请求"></li>
<li>在发起者经过了沉思熟虑，通计熟筹，仰观俯察后，同意合并分支的请求(＠￣ー￣＠)<br><img src="https://img-blog.csdnimg.cn/20200130121516212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="找到请求_1"><br>从这里可以对比的看到分支和master的不同<br><img src="https://img-blog.csdnimg.cn/2020013012161487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="找不同"><br>同意合并请求：<br><img src="https://img-blog.csdnimg.cn/20200130121829976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="同意合并_2"><br><img src="https://img-blog.csdnimg.cn/20200130121938158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="同意合并_3"><br>这样就分支就合并进去了<br><img src="https://img-blog.csdnimg.cn/20200130122111630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="嘻嘻嘻"><br>当然如果参与者想要同步最新的代码，只要pull一下就好了<br><img src="https://img-blog.csdnimg.cn/20200130191852824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70" alt="同步"><br>第一次接触github，如有一些错误，还请多多指教<br>(๑•̀ㅂ•́)و</li>
</ol>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>跑通项目《GAT-BiLSTM-CRF》</title>
    <url>/posts/9a5cd7a6.html</url>
    <content><![CDATA[<p>记录一下自己跑通一个<a href="https://github.com/yx100/GAT-BiLSTM-CRF">GitHub项目</a>《GAT-BiLSTM-CRF》的过程</p>
<p>自己电脑环境如下：</p>
<ul>
<li>显卡：3060TI</li>
<li>CUDA : 11.0</li>
<li>CUDAToolkit : 8.0.2</li>
</ul>
<p>首先新建一个conda环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda create -n GBC python=3.7</span><br><span class="line">conda activate GBC</span><br></pre></td></tr></table></figure>
<p>然后用Pycharm打开其项目，并把Pycharm的环境也切换到<code>GBC</code></p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20093507.png" alt="屏幕截图 2023-06-24 093507"></p>
<p>下面就是安装环境了，根据作者的md文件，需要装一个Pytorch1.1版本</p>
<p>从官网找见下载链接，并把<code>-c pytorch</code>去掉，以便使用清华源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install pytorch==1.1.0 torchvision==0.3.0 cudatoolkit=10.0</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20095053.png" alt="屏幕截图 2023-06-24 095053"></p>
<p>看来这种方法不太行，换一种方法！</p>
<p>打开Pytorch官网的<a href="https://download.pytorch.org/whl/torch_stable.html">下载源</a>，搜索<code>cu100/torch-1.1.0</code>，下载如下的包</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-24%20095456-1687571797951-11.png" alt="屏幕截图 2023-06-24 095456"></p>
<p>ちょっと待って，我好像已经发现了问题，我的<code>CUDA11.0</code>肯定和这个不匹配，装了也没用，那就用<code>CPU</code>版本的<code>torch</code>跑一跑试试吧</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CPU Only</span></span><br><span class="line">conda install pytorch-cpu==1.1.0 torchvision-cpu==0.3.0 cpuonly</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20124226.png" alt="屏幕截图 2023-06-25 124226"></p>
<p>应该是<code>numpy</code>版本不对？重装一下试试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install numpy -U</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20130608.png" alt="屏幕截图 2023-06-25 130608"></p>
<p>那就卸载了重装一下吧</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip uninstall numpy</span><br><span class="line">pip install numpy</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20130928.png" alt="屏幕截图 2023-06-25 130928"></p>
<p>咦？我不是卸载了吗？根据之前的经验，可以试试强制升级<code>numpy</code>版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install numpy --ignore-installed numpy</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20131310.png" alt="屏幕截图 2023-06-25 131310"></p>
<p>再跑一次试试</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20131408.png" alt="屏幕截图 2023-06-25 131408"></p>
<p>刚刚那个错解决了！这个应该是没有装<code>nltk</code>的包，装一下试试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install nltk</span><br></pre></td></tr></table></figure>
<p>再跑一次</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20131544.png" alt="屏幕截图 2023-06-25 131544"></p>
<p>能跑起来一点点了，这应该是我还没有改地址的问题，改一下去，先全局搜索一下这个地址哪用到了（第52行）</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/image-20230625131832793.png" alt="image-20230625131832793"></p>
<p>出现大问题了，作者并没有提供数据集，但是他提供了数据集的格式</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Input is in CoNLL format (We use BIO tag scheme), where each character and its label are in one line. Sentences are split with a null line.</span><br></pre></td></tr></table></figure>
<p>翻译一下</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入是CoNLL格式（我们使用BIO标签方案），其中每个字符和它的标签都在一行。句子用空行分割。</span><br></pre></td></tr></table></figure>
<p>那就先自己找一个数据集康康能不能跑吧，数据集就用我<a href="https://raw.githubusercontent.com/SophonPlus/ChineseNlpCorpus/master/datasets/ChnSentiCorp_htl_all/ChnSentiCorp_htl_all.csv">之前的找的</a>试试</p>
<p>按照作者的地址和文件夹创建一下</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20133501.png" alt="屏幕截图 2023-06-25 133501"></p>
<p>先跑一下试试吧</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20133550.png" alt="屏幕截图 2023-06-25 133550"></p>
<p>可恶啊，可能就是数据集的格式不对了。但是感觉有戏</p>
<p>换一个有一个标注的数据集试试，经过一番搜索，找到了一个<a href="https://bj.bcebos.com/paddlehub-dataset/msra_ner.tar.gz">数据集</a></p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20135200.png" alt="屏幕截图 2023-06-25 135200"></p>
<p>复制到项目中并修改一下路径试试</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20140111.png" alt="屏幕截图 2023-06-25 140111"></p>
<p>跑一下试试</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20140224.png" alt="屏幕截图 2023-06-25 140224"></p>
<p>可恶啊，还是数据集读的方式不对</p>
<p>找师兄<del>borrow</del>了一个数据集，这个配置后的样子</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20142415.png" alt="屏幕截图 2023-06-25 142415"></p>
<p>运行走起！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20142455.png" alt="屏幕截图 2023-06-25 142455"></p>
<p>又报错了，搜了一下，试试在最前面导入一个包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm_notebook <span class="keyword">as</span> tqdm</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/image-20230625142708124.png" alt="image-20230625142708124"></p>
<p>emmmm再换一个别的包试试？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20142851.png" alt="屏幕截图 2023-06-25 142851"></p>
<p>又回到了格式问题,一直说是gdk编码不能识别，但我看了一下自己的数据集是<code>utf-8</code>编码的</p>
<p>要不试试把打开文件的编码改一下？找到打开文件的编码，加上<code>encoding</code>属性（19行）</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20190447.png" alt="屏幕截图 2023-06-25 190447"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">in_lines = <span class="built_in">open</span>(input_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>).readlines()</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20191202.png" alt="屏幕截图 2023-06-25 191202"></p>
<p>啊？越界了！调试一下康康</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20191742.png" alt="屏幕截图 2023-06-25 191742"></p>
<p>我猜，这个label应该就是标注，可能他的数据集中，标签在<code>pairs[-5]</code>的这个位置。但我的理论上貌似应该大概也许在<code>pairs[1]</code>的位置吧。改一下试试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">label = pairs[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>再跑一次！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20192031.png" alt="屏幕截图 2023-06-25 192031"></p>
<p>emmmmmm为什么————</p>
<p>我肯定的一点是，我应该是改对了，难道是数据太大了吗</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20192521.png" alt="屏幕截图 2023-06-25 192521"></p>
<p>查了一下网上的方法，试试加入一个判断条件防止越界</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20192811.png" alt="屏幕截图 2023-06-25 192811"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(in_lines)):</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20193334.png" alt="屏幕截图 2023-06-25 193334"></p>
<p>跑一下试试</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20193411.png" alt="屏幕截图 2023-06-25 193411"></p>
<p>纳尼？还可以越界的吗</p>
<p>最后一招！我试试把数据集弄小一点</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20193916.png" alt="屏幕截图 2023-06-25 193916"></p>
<p>其他的数据集也差不多这么大，就一句话！我不信这也可以越界了，把地址改完重跑一次</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20194043.png" alt="屏幕截图 2023-06-25 194043"></p>
<p>emm确实不越界了，这个错误可能是之前没注释干净，继续注释试试</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/image-20230625194305060.png" alt="image-20230625194305060"></p>
<p>再跑一次</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20194334.png" alt="屏幕截图 2023-06-25 194334"></p>
<p>我猜想，我是安装的是<code>CPU</code>版本的<code>torch</code>，而他程序里要求的是带<code>GPU</code>的<code>torch</code>。我康康能不能把程序改一下吧</p>
<p>网上搜索了一下，试试这么改</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20194942.png" alt="屏幕截图 2023-06-25 194942"></p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20195143.png" alt="屏幕截图 2023-06-25 195143"></p>
<p>感觉这是一条不归路啊，要不先试试<code>torch1.7</code>版本（电脑这个版本可以调用GPU）能不能跑，如果不行再用cpu吧。</p>
<p>从<a href="https://pytorch.org/get-started/previous-versions/">官网</a>找的链接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install pytorch==1.7.0 torchvision==0.8.0 torchaudio==0.7.0 cudatoolkit=11.0</span><br></pre></td></tr></table></figure>
<p>安装完了</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20195937.png" alt="屏幕截图 2023-06-25 195937"></p>
<p>跑跑试试（希望兼容希望兼容！）</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/image-20230625200042482.png" alt="image-20230625200042482"></p>
<p>NO————————————！！！！！！！</p>
<p>看了一下好像是自己的torch安装乱了，果然还得是先卸载再安装啊，不会自动卸载的</p>
<p>先卸载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip uninstall torch</span><br><span class="line">pip uninstall torchvision</span><br></pre></td></tr></table></figure>
<p>然后看一下有没有卸载干净</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20232346.png" alt="屏幕截图 2023-06-25 232346"></p>
<p>像这样就可以了，再重装一下吧</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install pytorch==1.7.0 torchvision==0.8.0 torchaudio==0.7.0 cudatoolkit=11.0</span><br></pre></td></tr></table></figure>
<p>安装完再检查一下</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20232540.png" alt="屏幕截图 2023-06-25 232540"></p>
<p>好的，现在就可以跑一下试试了！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20232647.png" alt="屏幕截图 2023-06-25 232647"></p>
<p>啊嘞？！我用<code>python</code>命令行试试能不能调用GPU</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">torch.cuda.is_available()</span><br><span class="line">torch.cuda.get_device_name(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20232835.png" alt="屏幕截图 2023-06-25 232835"></p>
<p>emmm好吧，看来确实不能，再卸载了重装一下吧</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip uninstall torch</span><br><span class="line">pip uninstall torchvision</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install torch==1.7.0+cu110 torchvision==0.8.0+cu110 torchaudio==0.7.0 -f https://download.pytorch.org/whl/torch_stable.html</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20235355.png" alt="屏幕截图 2023-06-25 235355"></p>
<p>又是什么情况？！那还是用<code>conda</code>装吧</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install pytorch==1.7.0 torchvision==0.8.0 torchaudio==0.7.0 cudatoolkit=11.0</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20235505-1687708623463-21.png" alt="屏幕截图 2023-06-25 235505"></p>
<p>为什么是CPU版本的啊，换<code>torch1.7.1</code>试试？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install torch==1.7.1+cu110 torchvision==0.8.2+cu110 torchaudio==0.7.2 -f https://download.pytorch.org/whl/torch_stable.html</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-25%20235744.png" alt="屏幕截图 2023-06-25 235744"></p>
<p>这也太艰难了吧，网上查了一下</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-26%20000009.png" alt="屏幕截图 2023-06-26 000009"></p>
<p>按照他说的找到文件夹并且删除</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-26%20000302.png" alt="屏幕截图 2023-06-26 000302"></p>
<p>再重装一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install numpy</span><br></pre></td></tr></table></figure>
<p>然后再装一下<code>torch</code>试试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install torch==1.7.1+cu110 torchvision==0.8.2+cu110 torchaudio==0.7.2 -f https://download.pytorch.org/whl/torch_stable.html</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-26%20000557.png" alt="屏幕截图 2023-06-26 000557"></p>
<p>感天动地，终于装好了。跑一下试试！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-26%20000741.png" alt="屏幕截图 2023-06-26 000741"></p>
<p>是不是我数据量太少的原因，先改回原来的数据集</p>
<p>然后我发现了设定数据集大小的位置，修改成比自己数据集大的大小</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-26%20001114.png" alt="屏幕截图 2023-06-26 001114"></p>
<p>走起试试！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-26%20001202.png" alt="屏幕截图 2023-06-26 001202"></p>
<p>突然又发现了一个参数，可能是不是没改全的原因，改完跑一下试试</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-26%20220112.png" alt="屏幕截图 2023-06-26 220112"></p>
<p>走起</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-26%20220233.png" alt="屏幕截图 2023-06-26 220233"></p>
<p>emmmm好神秘啊！换成只有800行左右试试</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-26%20002211.png" alt="屏幕截图 2023-06-26 002211"></p>
<p>这又是什么诡异的错误…网上查了一下</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-26%20220622.png" alt="屏幕截图 2023-06-26 220622"></p>
<p>好像比较好改，直接看报错信息，找到最后一个代码里的报错</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-26%20002211-1687788699344-4.png" alt="屏幕截图 2023-06-26 002211"></p>
<p>点进去，会自动跳到报错那一行，然后用网上的方法修改一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">embeds_pack = pack_padded_sequence(embeds, batch_len.to(<span class="string">&#x27;cpu&#x27;</span>), batch_first=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-26%20221334.png" alt="屏幕截图 2023-06-26 221334"></p>
<p>再跑试试！</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/image-20230626221422520.png" alt="image-20230626221422520"></p>
<p>跑了但没完全跑起来，是哪除0的情况没有考虑到应该，点进去代码里加一个判断条件试试</p>
<p>把原本这段代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">epoch_cost = epoch_finish - epoch_start</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Epoch: %s training finished. Time: %.2fs, speed: %.2fst/s,  total loss: %s&quot;</span> % (</span><br><span class="line">idx, epoch_cost, train_num / epoch_cost, total_loss))</span><br></pre></td></tr></table></figure>
<p>修改为这段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">epoch_cost = epoch_finish - epoch_start</span><br><span class="line">train_speed = null</span><br><span class="line"><span class="keyword">if</span> epoch_cost != <span class="number">0</span>:</span><br><span class="line">    train_speed = train_num / epoch_cost</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Epoch: %s training finished. Time: %.2fs, speed: %.2fst/s,  total loss: %s&quot;</span> % (</span><br><span class="line">    idx, epoch_cost, train_speed, total_loss))</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-26%20222314.png" alt="屏幕截图 2023-06-26 222314"></p>
<p>在试试吧</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-26%20222500.png" alt="屏幕截图 2023-06-26 222500"></p>
<p>emmm这样吗，网上一查</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-06-26%20222529.png" alt="屏幕截图 2023-06-26 222529"></p>
<p>那就把<code>null</code>改成<code>none</code>试试</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/image-20230626222633707.png" alt="image-20230626222633707"></p>
<p>emmm行吧，那就直接改一个数字算了（114514<code>/doge</code>）</p>
<p>woc跑起来！？</p>
<p><img src="https://gitee.com/Ruvikm/pic/raw/master/img/image-20230626222825231.png" alt="image-20230626222825231"></p>
<p>所以这是成功了？！但是为什么好多0，总感觉不太对的样子</p>
]]></content>
      <categories>
        <category>论文复现</category>
      </categories>
  </entry>
  <entry>
    <title>学校GPU平台使用教程</title>
    <url>/posts/7c8e228e.html</url>
    <content><![CDATA[<p>首先连接内网登录<a href="http://paas.183-175-12-11.nip.io:30080/">平台</a></p>
<p>一般使用的话，直接找到<code>开发环境</code>一栏，创建环境。然后通过<code>Pycharm</code>中的<code>ssh</code>连接</p>
<p><img src="https://s1.ax1x.com/2023/08/28/pPaw2X6.png" alt="屏幕截图 2023-08-28 221321"></p>
<p>在<code>Pycharm</code>中，找到工具—部署—配置</p>
<p><img src="https://s1.ax1x.com/2023/08/28/pPad5zq.png" alt="image-20230828220300678"></p>
<p>点击<code>+</code>后选择<code>SFTP</code></p>
<p><img src="https://s1.ax1x.com/2023/08/28/pPaw5Ae.png" alt="屏幕截图 2023-08-28 221526"></p>
<p>在<code>SSH配置</code>那里后点击后面<code>...</code></p>
<p><img src="https://s1.ax1x.com/2023/08/28/pPawbct.png" alt="屏幕截图 2023-08-28 092517"></p>
<p>进入后填写主机名和用户名，这里详细讲一下</p>
<p>例如平台给的ssh连接是</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">ssh://root@paas.xxx-xxx-xx-xx.nip.io:xxxxx</span><br></pre></td></tr></table></figure>
<p>这里用户名就需要填写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root</span><br></pre></td></tr></table></figure>
<p>主机名填写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">paas.xxx-xxx-xx-xx.nip.io</span><br></pre></td></tr></table></figure>
<p>端口号填写<code>xxxxx</code></p>
<p>然后填写创建环境时设置的密码</p>
<p><img src="https://s1.ax1x.com/2023/08/28/pPawjHS.png" alt="屏幕截图 2023-08-28 092917"></p>
<p>这一步完事以后，点击确定，返回到之前的页面，点击<code>映射</code></p>
<p><img src="https://s1.ax1x.com/2023/08/30/pPd7RaD.png" alt="屏幕截图 2023-08-30 145658"></p>
<p>配置好本机的地址和远程的地址，点击确认</p>
<p><img src="https://s1.ax1x.com/2023/08/30/pPd7LdS.png" alt="image-20230830145937224"></p>
<p>之后选择工具—部署—选项</p>
<p><img src="https://s1.ax1x.com/2023/08/30/pPdHIkF.png" alt="QQ截图20230830150656"></p>
<p>可以根据自己习惯决定是否配置一下</p>
<p>然后找到工具—启动SSH会话，选择刚刚配置的SSH</p>
<p><img src="https://s1.ax1x.com/2023/08/30/pPdbmtg.png" alt="屏幕截图 2023-08-30 151730"></p>
<p>然后输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.executable)</span><br></pre></td></tr></table></figure>
<p>记住输出的地址，比如我的就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usr/bin/python</span><br></pre></td></tr></table></figure>
<p>最后，找到项目—项目XXXX—Python解释器，找到添加解释器—SSH</p>
<p><img src="https://s1.ax1x.com/2023/08/30/pPdHj0K.png" alt="image-20230830151124394"></p>
<p>选择刚刚配置的SSH服务器，然后下一步</p>
<p><img src="https://s1.ax1x.com/2023/08/30/pPdbHUS.png" alt="屏幕截图 2023-08-30 152226"></p>
<p>点击下一步</p>
<p><img src="https://s1.ax1x.com/2023/08/30/pPdbO3j.png" alt="image-20230830152644100"></p>
<p>然后选择<code>现有</code></p>
<p>把刚刚的地址输入到<code>解释器</code>里</p>
<p><img src="https://s1.ax1x.com/2023/08/30/pPdqSbV.png" alt="image-20230830152826067"></p>
<p>点击确定就完事了</p>
<p><img src="https://s1.ax1x.com/2023/08/30/pPdqtqP.png" alt="image-20230830152939492"></p>
<p>之后用<code>工具</code>—<code>SSH会话</code>配合，就可以用学校的GPU跑程序了</p>
<p>tips：后期可以在服务器上安装<code>Anaconda</code>，然后把新建的虚拟环境中python路径配置到上述图片的<code>解释器</code>中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook --ip 0.0.0.0 --allow-root</span><br></pre></td></tr></table></figure>
<p>再补充一下，之前用conda的操作可能是麻烦了，服务器里自带好多python的环境，每个环境里也有很多自带的包</p>
<p><img src="https://z1.ax1x.com/2023/10/04/pPOHyIe.png" alt="屏幕截图 2023-10-04 204942"></p>
<p>选择例如选择python3.6后</p>
<p><img src="https://z1.ax1x.com/2023/10/04/pPOHgGd.png" alt="屏幕截图 2023-10-04 211210"></p>
<p>之后就《愉快》的调参吧，附一张成功用学校GPU跑代码的图片</p>
<p><img src="https://z1.ax1x.com/2023/10/04/pPOHqRs.png" alt="image-20231004211915616"></p>
<p> <strong>10.19继续补充一下</strong><br>有的项目跑起来需要运行作者的<code>run.sh</code>文件，这时候需要切换到项目的目录然后运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash run.sh</span><br></pre></td></tr></table></figure>
<p>但是环境默认是python2.7版本的，项目跑不起来，这时候需要切换python的环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis python</span><br><span class="line">rm /usr/bin/python</span><br><span class="line">ln -s /usr/bin/python3.6 /usr/bin/python</span><br></pre></td></tr></table></figure>
<p><img src="https://z1.ax1x.com/2023/10/19/piitih6.png" alt="image-20231019153231564"></p>
<p>还有一种方法，比如需要切换的环境在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usr/bin/python3.6</span><br></pre></td></tr></table></figure>
<p>这时候需要在<code>.sh</code>文件中开头加上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env python3.6</span></span><br></pre></td></tr></table></figure>
<p>可以在后面查看python环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure>
<p><img src="https://z1.ax1x.com/2023/10/19/piir6K0.png" alt="image-20231019163749724"></p>
<p>这时候就切换了</p>
<p>2024-4-1补充</p>
<p>其实可以用Pycharm上传文件，然后用Xshell跑代码，Xshell配置和之前的大差不差</p>
<p><img src="https://s21.ax1x.com/2024/04/01/pF7gw01.png" alt></p>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
  </entry>
  <entry>
    <title>安装PaddlePaddle</title>
    <url>/posts/5f716ad1.html</url>
    <content><![CDATA[<p>记录一下安装的过程，官方文档如下</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">https://www.paddlepaddle.org.cn/documentation/docs/zh/install/conda/windows-conda.html</span><br></pre></td></tr></table></figure>
<h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda create -n paddle python=3.8</span><br><span class="line">conda activate paddle</span><br></pre></td></tr></table></figure>
<h2 id="查看自己安装的CUDA版本"><a href="#查看自己安装的CUDA版本" class="headerlink" title="查看自己安装的CUDA版本"></a>查看自己安装的CUDA版本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvcc -V</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/07/21/pCHjtOA.png" alt="image-20230721102917138"></p>
<p>选择适合自己的版本，我安装的是CUDA11.2的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install paddlepaddle-gpu==2.5.0 cudatoolkit=11.2 -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/Paddle/ -c conda-forge</span><br></pre></td></tr></table></figure>
<h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="keyword">import</span> paddle</span><br><span class="line">paddle.utils.run_check()</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/07/21/pCHvsN6.png" alt="image-20230721105441359"></p>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
  </entry>
  <entry>
    <title>学校GPU平台使用教程(优化版)</title>
    <url>/posts/72bb20cc.html</url>
    <content><![CDATA[<p>首先连接内网登录<a href="http://paas.183-175-12-11.nip.io:30080/">平台</a></p>
<p>一般使用的话，直接找到<code>开发环境</code>一栏，创建环境。然后通过<code>Pycharm</code>中的<code>ssh</code>连接</p>
<p><img src="https://s1.ax1x.com/2023/08/28/pPaw2X6.png" alt="屏幕截图 2023-08-28 221321"></p>
<p>在<code>Pycharm</code>中，找到工具—部署—配置</p>
<p><img src="https://s1.ax1x.com/2023/08/28/pPad5zq.png" alt="image-20230828220300678"></p>
<p>点击<code>+</code>后选择<code>SFTP</code></p>
<p><img src="https://s1.ax1x.com/2023/08/28/pPaw5Ae.png" alt="屏幕截图 2023-08-28 221526"></p>
<p>在<code>SSH配置</code>那里后点击后面<code>...</code></p>
<p><img src="https://s1.ax1x.com/2023/08/28/pPawbct.png" alt="屏幕截图 2023-08-28 092517"></p>
<p>进入后填写主机名和用户名，这里详细讲一下</p>
<p>例如平台给的ssh连接是</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">ssh://root@paas.xxx-xxx-xx-xx.nip.io:xxxxx</span><br></pre></td></tr></table></figure>
<p>这里用户名就需要填写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root</span><br></pre></td></tr></table></figure>
<p>主机名填写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">paas.xxx-xxx-xx-xx.nip.io</span><br></pre></td></tr></table></figure>
<p>端口号填写<code>xxxxx</code></p>
<p>然后填写创建环境时设置的密码</p>
<p><img src="https://s1.ax1x.com/2023/08/28/pPawjHS.png" alt="屏幕截图 2023-08-28 092917"></p>
<p>这一步完事以后，点击确定，返回到之前的页面，点击<code>映射</code></p>
<p><img src="https://s1.ax1x.com/2023/08/30/pPd7RaD.png" alt="屏幕截图 2023-08-30 145658"></p>
<p>配置好本机的地址和远程的地址，点击确认</p>
<p><img src="https://s1.ax1x.com/2023/08/30/pPd7LdS.png" alt="image-20230830145937224"></p>
<p>之后选择工具—部署—选项</p>
<p><img src="https://s1.ax1x.com/2023/08/30/pPdHIkF.png" alt="QQ截图20230830150656"></p>
<p>可以根据自己习惯决定是否配置一下</p>
<p>之后就可以用Pycharm作为修改代码和文件传输的工具了</p>
<p>由于Pycharm自带的终端个人认为并不好用，所以可以使用Xshell软件使用终端操作，Xshell的配置同上</p>
<p><img src="https://s21.ax1x.com/2024/04/01/pF7gw01.png" alt></p>
<p>由于已经在里面安装了Anaconda，所以每次跑一个项目的时候新建一个虚拟环境即可</p>
<h3 id="切换环境"><a href="#切换环境" class="headerlink" title="切换环境"></a>切换环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate cu118py310</span><br></pre></td></tr></table></figure>
<h3 id="查看并删除环境"><a href="#查看并删除环境" class="headerlink" title="查看并删除环境"></a>查看并删除环境</h3><h4 id="查看环境列表"><a href="#查看环境列表" class="headerlink" title="查看环境列表"></a>查看环境列表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda info --<span class="built_in">env</span></span><br></pre></td></tr></table></figure>
<h4 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda remove -n 环境名 --all</span><br><span class="line"></span><br><span class="line">eg:conda remove -n code --all</span><br></pre></td></tr></table></figure>
<h3 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n 环境名 python=版本号</span><br><span class="line"></span><br><span class="line">eg:conda create -n ChineseBERT python=3.8</span><br></pre></td></tr></table></figure>
<h3 id="退出当前环境"><a href="#退出当前环境" class="headerlink" title="退出当前环境"></a>退出当前环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate base</span><br></pre></td></tr></table></figure>
<h3 id="查看当前环境已安装的包"><a href="#查看当前环境已安装的包" class="headerlink" title="查看当前环境已安装的包"></a>查看当前环境已安装的包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
  </entry>
  <entry>
    <title>安装Word2Vec</title>
    <url>/posts/4b1680ce.html</url>
    <content><![CDATA[<p>由于最近需要用到一个预处理的数据集，方法在<a href="https://arxiv.org/abs/1301.3781">这篇论文</a>《Efficient Estimation of Word Representations in Vector Space》里，于是打算尝试能不能复现一下，论文提供了<a href="https://code.google.com/archive/p/word2vec/">代码地址</a>，但是当我打开下载的时候，却发现是404</p>
<p><img src="https://s1.ax1x.com/2023/07/01/pCB5ZT0.png" alt="image-20230701163100641"></p>
<p>于是经过一番搜索，找到了最新的<a href="https://pypi.org/project/word2vec/">地址</a>（应该是吧</p>
<p>先创建一下新的虚拟环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -n word2vec python=3.8</span><br><span class="line">conda activate word2vec</span><br></pre></td></tr></table></figure>
<p>然后安装<code>numpy</code>、<code>scipy</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install numpy</span><br><span class="line">pip install scipy</span><br></pre></td></tr></table></figure>
<p>安装<a href="https://visualstudio.microsoft.com/zh-hans/vs/">Microsoft Visual C++ 14.0</a></p>
<p>下载下来是一个安装器，然后进行如下操作</p>
<p><img src="https://s1.ax1x.com/2023/07/01/pCBoUQe.png" alt="屏幕截图 2023-07-01 165446"></p>
<p>然后</p>
<p><img src="https://s1.ax1x.com/2023/07/01/pCBodLd.png" alt="屏幕截图 2023-07-01 165358"></p>
<p>最后安装有点麻烦的<code>gcc</code>，首先使用清华镜像下载<a href="http://files.1f0.de/mingw/mingw-w64-gcc-12.2-stable-r38.7z">mingw-w64-gcc</a>，然后解压的位置选一个自己能记住的位置，比如我的就是</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">G:<span class="keyword">\Program</span> Files<span class="keyword">\MinGW</span>-w64</span><br></pre></td></tr></table></figure>
<p>然后把<code>bin</code>目录添加到系统变量里</p>
<p>例如我的路径就是</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">G:<span class="keyword">\Program</span> Files<span class="keyword">\MinGW</span>-w64<span class="keyword">\mingw</span>-w64-gcc-12.2-stable-r38<span class="keyword">\bin</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/07/01/pCBTy7R.png" alt="屏幕截图 2023-07-01 172554"></p>
<p>最后测试一下时候配置成功</p>
<p>在<code>D盘</code>根目录先新建一个<code>helloword.c</code>的文件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后用<code>cmd</code>到<code>D盘</code>根目录</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">cd/d D:</span><br></pre></td></tr></table></figure>
<p>用gcc编译</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">gcc helloword.c</span><br></pre></td></tr></table></figure>
<p><strong>如果没报错说明其实已经配置好了，想看文件运行结果的可以继续输入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a.exe</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/07/01/pCB7EgU.png" alt="image-20230701173710147"></p>
<p>这样，<code>word2vec</code>所需的组件就算全部安装完了，下面正式开始安装<code>word2vec</code>（在conda那个命令窗口哦，希望不要报错！）</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">pip install word2vec</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/07/01/pCB7w5t.png" alt="image-20230701174216784"></p>
<p>如果出现这个问题，重启一下试试。本人就是重启完莫名安装成功了，可能是刚刚有的组件需要重启吧</p>
<p><img src="https://s1.ax1x.com/2023/07/01/pCDCOPS.png" alt="image-20230701225337075"></p>
]]></content>
      <categories>
        <category>论文复现</category>
      </categories>
  </entry>
  <entry>
    <title>实习规划</title>
    <url>/posts/261b5ce3.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6c3c453af3bdd54753d6502ff1a75d5bcb20a0fbd4fd2f9883eacea165c02326"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>人生规划</category>
      </categories>
  </entry>
  <entry>
    <title>客户端升级封装EasyTcpClient，同时与多个服务端进行网络通信</title>
    <url>/posts/56591828.html</url>
    <content><![CDATA[<p>封装客户端操作<code>EasyTcpClient.hpp</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> EasyTcpClient.hpp</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> EasyTcpClient.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  <span class="comment">//uni std</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> SOCKET int</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> INVALID_SOCKET  (SOCKET)(~0)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> SOCKET_ERROR            (-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MessageHeader.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span>	<span class="comment">//C++标准线程库</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EasyTcpClient</span></span><br><span class="line">&#123;</span><br><span class="line">	SOCKET _sock;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">EasyTcpClient</span>() &#123;</span><br><span class="line">		_sock = INVALID_SOCKET;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//虚构析函数</span></span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">EasyTcpClient</span>() &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//初始化Socket</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">InitSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//启动Win Socket 2.x环境</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">		WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">		WSADATA dat;</span><br><span class="line">		<span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line">		<span class="comment">// 1 建立一个socket</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">IsRun</span>()) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt; 关闭旧连接...&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="built_in">Close</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		_sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">IsRun</span>()) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;建立Socket失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;建立Socket成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//连接服务器</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* ip, <span class="type">unsigned</span> <span class="type">short</span> port)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">IsRun</span>()) &#123;</span><br><span class="line">			<span class="built_in">InitSocket</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">		_sin.sin_family = AF_INET;</span><br><span class="line">		_sin.sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">		_sin.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(ip);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">		_sin.sin_addr.s_addr = <span class="built_in">inet_addr</span>(ip);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt; 正在连接服务器&lt;port:&quot;</span> &lt;&lt; port &lt;&lt; <span class="string">&quot;&gt;...&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="type">int</span>  ret = <span class="built_in">connect</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(sockaddr_in));</span><br><span class="line">		<span class="keyword">if</span> (SOCKET_ERROR == ret) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt; 连接服务器&lt;port:&quot;</span> &lt;&lt; port &lt;&lt; <span class="string">&quot;&gt;失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt; 连接服务器&lt;port:&quot;</span> &lt;&lt; port &lt;&lt; <span class="string">&quot;&gt;成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 关闭套接字closesocket</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">IsRun</span>()) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">			<span class="built_in">closesocket</span>(_sock);</span><br><span class="line">			<span class="comment">// 清除windows socket环境</span></span><br><span class="line">			<span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">			<span class="built_in">close</span>(_sock);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line">			_sock = INVALID_SOCKET;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//相应网络请求</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">OnNetMsg</span><span class="params">(DataHeader* header)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">switch</span> (header-&gt;cmd) &#123;</span><br><span class="line">		<span class="keyword">case</span> CMD_LOGIN_RESULT: &#123;</span><br><span class="line"></span><br><span class="line">			LoginResult* login = (LoginResult*)header;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;收到服务端消息：CMD_LOGIN_RESULT, 数据长度：&quot;</span> &lt;&lt; login-&gt;dataLength &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> CMD_LOGOUT_RESULT: &#123;</span><br><span class="line">			LogoutResult* logout = (LogoutResult*)header;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;收到服务端消息：CMD_LOGOUT_RESULT, 数据长度：&quot;</span> &lt;&lt; logout-&gt;dataLength &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> CMD_NEW_USER_JOIN: &#123;</span><br><span class="line">			NewUserJoin* userJoin = (NewUserJoin*)header;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;收到服务端消息：CMD_LOGOUT_RESULT, 数据长度：&quot;</span> &lt;&lt; userJoin-&gt;dataLength &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//接受数据 处理粘包 拆分包</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">RecvData</span><span class="params">(SOCKET _cSock)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//缓冲区</span></span><br><span class="line">		<span class="type">char</span> szRecv[<span class="number">4096</span>] = &#123;&#125;;</span><br><span class="line">		<span class="comment">// 5 接收客户端数据</span></span><br><span class="line">		<span class="type">int</span> nLen = <span class="built_in">recv</span>(_cSock, szRecv, <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">		DataHeader* header = (DataHeader*)szRecv;</span><br><span class="line">		<span class="keyword">if</span> (nLen &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;与服务器断开连接，任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">OnNetMsg</span>(header);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//查询网络数据</span></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">OnRun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">IsRun</span>()) &#123;</span><br><span class="line">			fd_set fdReads;</span><br><span class="line">			<span class="built_in">FD_ZERO</span>(&amp;fdReads);</span><br><span class="line">			<span class="built_in">FD_SET</span>(_sock, &amp;fdReads);</span><br><span class="line">			timeval t = &#123; <span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line">			<span class="type">int</span> ret = <span class="built_in">select</span>(_sock + <span class="number">1</span>, &amp;fdReads, <span class="number">0</span>, <span class="number">0</span>, &amp;t);</span><br><span class="line">			<span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;select任务结束1...&quot;</span> &lt;&lt; endl;</span><br><span class="line">				<span class="built_in">Close</span>();</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(_sock, &amp;fdReads)) &#123;</span><br><span class="line">				<span class="built_in">FD_CLR</span>(_sock, &amp;fdReads);</span><br><span class="line">				<span class="keyword">if</span> (<span class="number">-1</span> == <span class="built_in">RecvData</span>(_sock)) &#123;</span><br><span class="line">					cout &lt;&lt; <span class="string">&quot;&lt;socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_sock &lt;&lt; <span class="string">&quot;&gt;select任务结束2...&quot;</span> &lt;&lt; endl;</span><br><span class="line">					<span class="built_in">Close</span>();</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//是否在工作</span></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">IsRun</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> _sock != INVALID_SOCKET;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//发送数据</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">SendData</span><span class="params">(DataHeader* header)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">IsRun</span>() &amp;&amp; header)</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">send</span>(_sock, (<span class="type">const</span> <span class="type">char</span>*)header, header-&gt;dataLength, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">return</span> SOCKET_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>封装消息头<code>MessageHeader.hpp</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _MessageHeader.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _MessageHeader.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _MessageHeader.hpp</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region 结构体定义</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CMD</span> &#123;</span><br><span class="line">	CMD_LOGIN,</span><br><span class="line">	CMD_LOGOUT,</span><br><span class="line">	CMD_ERROR,</span><br><span class="line">	CMD_LOGIN_RESULT,</span><br><span class="line">	CMD_LOGOUT_RESULT,</span><br><span class="line">	CMD_NEW_USER_JOIN</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataHeader</span> &#123;</span><br><span class="line">	<span class="type">short</span> dataLength;</span><br><span class="line">	<span class="type">short</span> cmd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Login</span> : <span class="keyword">public</span> DataHeader &#123;<span class="comment">//DataPackage</span></span><br><span class="line">	<span class="built_in">Login</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(Login);</span><br><span class="line">		cmd = CMD_LOGIN;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">	<span class="type">char</span> PassWord[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoginResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">LoginResult</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(LoginResult);</span><br><span class="line">		cmd = CMD_LOGIN_RESULT;</span><br><span class="line">		result = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Logout</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">Logout</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(Logout);</span><br><span class="line">		cmd = CMD_LOGOUT;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LogoutResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">LogoutResult</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(LogoutResult);</span><br><span class="line">		cmd = CMD_LOGOUT_RESULT;</span><br><span class="line">		result = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NewUserJoin</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">NewUserJoin</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(NewUserJoin);</span><br><span class="line">		cmd = CMD_NEW_USER_JOIN;</span><br><span class="line">		sock = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> sock;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataPackage</span> &#123;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br></pre></td></tr></table></figure>
<p>重构客户端代码<code>Client.cpp</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">﻿<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;EasyTcpClient.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cmdThread</span><span class="params">(EasyTcpClient *client)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="type">char</span> cmdBuf[<span class="number">256</span>] = &#123;&#125;;</span><br><span class="line">		cin &gt;&gt; cmdBuf;</span><br><span class="line">		<span class="comment">/*cout &lt;&lt; cmdBuf &lt;&lt; endl;*/</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(cmdBuf, <span class="string">&quot;exit&quot;</span>)) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;退出cmdThread线程&quot;</span> &lt;&lt; endl;</span><br><span class="line">			client-&gt;<span class="built_in">Close</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(cmdBuf, <span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">			Login login;</span><br><span class="line">			<span class="built_in">strcpy</span>(login.userName, <span class="string">&quot;lyd&quot;</span>);</span><br><span class="line">			<span class="built_in">strcpy</span>(login.PassWord, <span class="string">&quot;lydmm&quot;</span>);</span><br><span class="line">			client-&gt;<span class="built_in">SendData</span>(&amp;login);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(cmdBuf, <span class="string">&quot;logout&quot;</span>)) &#123;</span><br><span class="line">			Logout logout;</span><br><span class="line">			<span class="built_in">strcpy</span>(logout.userName, <span class="string">&quot;lyd&quot;</span>);</span><br><span class="line">			client-&gt;<span class="built_in">SendData</span>(&amp;logout);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;不支持的命令...&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> Local_ip[] = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">short</span> Local_port = <span class="number">4568</span>;</span><br><span class="line">	EasyTcpClient client;</span><br><span class="line">	client.<span class="built_in">Connect</span>(Local_ip, Local_port);</span><br><span class="line">	<span class="function">thread <span class="title">t1</span><span class="params">(cmdThread, &amp;client)</span></span>;</span><br><span class="line">	t1.<span class="built_in">detach</span>();</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> Centos_ip[] = <span class="string">&quot;192.168.88.130&quot;</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">short</span> Centos_port = <span class="number">4567</span>;</span><br><span class="line">	EasyTcpClient client2;</span><br><span class="line">	client2.<span class="built_in">Connect</span>(Centos_ip, Centos_port);</span><br><span class="line">	<span class="function">thread <span class="title">t2</span><span class="params">(cmdThread, &amp;client2)</span></span>;</span><br><span class="line">	t2.<span class="built_in">detach</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 启动UI线程</span></span><br><span class="line">	<span class="keyword">while</span> (client.<span class="built_in">IsRun</span>() || client2.<span class="built_in">IsRun</span>()) &#123;</span><br><span class="line">		client.<span class="built_in">OnRun</span>();</span><br><span class="line">		client2.<span class="built_in">OnRun</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	client.<span class="built_in">Close</span>();</span><br><span class="line">	client2.<span class="built_in">Close</span>();</span><br><span class="line">	<span class="comment">//保留界面</span></span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s21.ax1x.com/2024/04/28/pkibI00.png" alt="image-20240428230519330"></p>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>C++socket项目</tag>
      </tags>
  </entry>
  <entry>
    <title>客户端服务器升为select模型</title>
    <url>/posts/cbda1d27.html</url>
    <content><![CDATA[<p>服务端</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//只有在WIN里可以</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region 结构体定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CMD</span> &#123;</span><br><span class="line">	CMD_LOGIN,</span><br><span class="line">	CMD_LOGOUT,</span><br><span class="line">	CMD_ERROR,</span><br><span class="line">	CMD_LOGIN_RESULT,</span><br><span class="line">	CMD_LOGOUT_RESULT,</span><br><span class="line">	CMD_NEW_USER_JOIN</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataHeader</span> &#123;</span><br><span class="line">	<span class="type">short</span> dataLength;</span><br><span class="line">	<span class="type">short</span> cmd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Login</span> : <span class="keyword">public</span> DataHeader &#123;<span class="comment">//DataPackage</span></span><br><span class="line">	<span class="built_in">Login</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(Login);</span><br><span class="line">		cmd = CMD_LOGIN;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">	<span class="type">char</span> PassWord[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoginResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">LoginResult</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(LoginResult);</span><br><span class="line">		cmd = CMD_LOGIN_RESULT;</span><br><span class="line">		result = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Logout</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">Logout</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(Logout);</span><br><span class="line">		cmd = CMD_LOGOUT;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LogoutResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">LogoutResult</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(LogoutResult);</span><br><span class="line">		cmd = CMD_LOGOUT_RESULT;</span><br><span class="line">		result = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NewUserJoin</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">NewUserJoin</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(NewUserJoin);</span><br><span class="line">		cmd = CMD_NEW_USER_JOIN;</span><br><span class="line">		sock = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> sock;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataPackage</span> &#123;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;SOCKET&gt; g_clients;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">processor</span><span class="params">(SOCKET _cSock)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//缓冲区</span></span><br><span class="line">	<span class="type">char</span> szRecv[<span class="number">4096</span>] = &#123;&#125;;</span><br><span class="line">	<span class="comment">// 5 接收客户端数据</span></span><br><span class="line">	<span class="type">int</span> nLen = <span class="built_in">recv</span>(_cSock, szRecv, <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">	DataHeader* header = (DataHeader*)szRecv;</span><br><span class="line">	<span class="keyword">if</span> (nLen &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;客户端&lt; socket = &quot;</span> &lt;&lt; _cSock &lt;&lt; <span class="string">&quot; &gt;已退出，任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">switch</span> (header-&gt;cmd) &#123;</span><br><span class="line">	<span class="keyword">case</span> CMD_LOGIN: &#123;</span><br><span class="line">		<span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">		Login* login = (Login*)szRecv;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;收到客户端&lt;Socket = &quot;</span> &lt;&lt; _cSock &lt;&lt; <span class="string">&quot;&gt;请求：CMD_LOGIN, 数据长度：&quot;</span> &lt;&lt; login-&gt;dataLength &lt;&lt; <span class="string">&quot; ,userName =  &quot;</span> &lt;&lt; login-&gt;userName &lt;&lt; <span class="string">&quot; PassWord = &quot;</span> &lt;&lt; login-&gt;PassWord &lt;&lt; endl;</span><br><span class="line">		<span class="comment">//忽略判断用户密码是否正确</span></span><br><span class="line">		LoginResult ret;</span><br><span class="line">		<span class="built_in">send</span>(_cSock, (<span class="type">char</span>*)&amp;ret, <span class="built_in">sizeof</span>(LoginResult), <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">case</span> CMD_LOGOUT: &#123;</span><br><span class="line">		<span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">		Logout* logout = (Logout*)szRecv;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;收到客户端&lt;Socket = &quot;</span> &lt;&lt; _cSock &lt;&lt; <span class="string">&quot;&gt;请求：CMD_LOGOUT, 数据长度：&quot;</span> &lt;&lt; logout-&gt;dataLength &lt;&lt; <span class="string">&quot; ,userName =  &quot;</span> &lt;&lt; logout-&gt;userName &lt;&lt; endl;</span><br><span class="line">		<span class="comment">//忽略判断用户密码是否正确</span></span><br><span class="line">		LogoutResult ret;</span><br><span class="line">		<span class="built_in">send</span>(_cSock, (<span class="type">char</span>*)&amp;ret, <span class="built_in">sizeof</span>(ret), <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">default</span>: &#123;</span><br><span class="line">		DataHeader header = &#123; <span class="number">0</span>,CMD_ERROR &#125;;</span><br><span class="line">		<span class="built_in">send</span>(_cSock, (<span class="type">char</span>*)&amp;header, <span class="built_in">sizeof</span>(header), <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//启动Windows socket 2.x环境</span></span><br><span class="line">	WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">	WSADATA dat;</span><br><span class="line">	<span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line">	<span class="comment">// 用Socket API 建立一个简易的TCP服务端 1 建立一个socket 套接字</span></span><br><span class="line">	SOCKET _sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">	<span class="comment">// 2 bind 绑定用于接受客户端连接的网络接口</span></span><br><span class="line">	sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">	_sin.sin_family = AF_INET;</span><br><span class="line">	_sin.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);<span class="comment">// host to net unsigned short</span></span><br><span class="line">	_sin.sin_addr.S_un.S_addr = INADDR_ANY;<span class="comment">//inet_addr(&quot;127.0.0.1&quot;);</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">bind</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(_sin)) == SOCKET_ERROR) &#123;</span><br><span class="line">		<span class="comment">//绑定错误</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;绑定网络端口失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;绑定网络端口成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//3 listen 监听网络端口</span></span><br><span class="line">	<span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">listen</span>(_sock, <span class="number">5</span>)) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;监听网络端口失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;监听网络端口成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="comment">// 伯克利套接字 BSD socket</span></span><br><span class="line">		fd_set fdRead; <span class="comment">//描述符(Socket) 集合</span></span><br><span class="line">		fd_set fdWrite;</span><br><span class="line">		fd_set fdExp;</span><br><span class="line">		<span class="comment">//清理集合</span></span><br><span class="line">		<span class="built_in">FD_ZERO</span>(&amp;fdRead);</span><br><span class="line">		<span class="built_in">FD_ZERO</span>(&amp;fdWrite);</span><br><span class="line">		<span class="built_in">FD_ZERO</span>(&amp;fdExp);</span><br><span class="line">		<span class="comment">//将描述符(socket)加入集合</span></span><br><span class="line">		<span class="built_in">FD_SET</span>(_sock, &amp;fdRead);</span><br><span class="line">		<span class="built_in">FD_SET</span>(_sock, &amp;fdWrite);</span><br><span class="line">		<span class="built_in">FD_SET</span>(_sock, &amp;fdExp);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line">			<span class="built_in">FD_SET</span>(g_clients[n], &amp;fdRead);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//nfds 是一个整数值，是指fd_set集合中所有描述符(socket)的范围，而不是数量</span></span><br><span class="line">		<span class="comment">//既是所有文件描述符最大值+1，在Windows中这个参数可以写0</span></span><br><span class="line">		timeval t = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">		<span class="type">int</span>  ret = <span class="built_in">select</span>(_sock + <span class="number">1</span>, &amp;fdRead, &amp;fdWrite, &amp;fdExp, &amp;t);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;select任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//判断描述符(socket)是否在集合中</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(_sock, &amp;fdRead)) &#123;</span><br><span class="line">			<span class="built_in">FD_CLR</span>(_sock, &amp;fdRead);</span><br><span class="line">			<span class="comment">//4 accept 等待接受客户端连接</span></span><br><span class="line">			sockaddr_in clientAddr = &#123;&#125;;</span><br><span class="line">			<span class="type">int</span> nAddrLen = <span class="built_in">sizeof</span>(sockaddr_in);</span><br><span class="line">			SOCKET _cSock = INVALID_SOCKET;</span><br><span class="line">			_cSock = <span class="built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, &amp;nAddrLen);</span><br><span class="line">			<span class="keyword">if</span> (_cSock == INVALID_SOCKET) &#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;接受到无效客户端SOCKET...&quot;</span> &lt;&lt; endl;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// 新客户端加入，群发</span></span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line">					NewUserJoin userJoin;</span><br><span class="line">					<span class="built_in">send</span>(g_clients[n], (<span class="type">const</span> <span class="type">char</span>*)&amp;userJoin, <span class="built_in">sizeof</span>(NewUserJoin), <span class="number">0</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				g_clients.<span class="built_in">push_back</span>(_cSock);</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;新客户端加入：socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_cSock &lt;&lt; <span class="string">&quot;, IP = &quot;</span> &lt;&lt; <span class="built_in">inet_ntoa</span>(clientAddr.sin_addr) &lt;&lt; endl;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">size_t</span> n = <span class="number">0</span>; n &lt; fdRead.fd_count; n++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">processor</span>(fdRead.fd_array[n]) == <span class="number">-1</span>) &#123;</span><br><span class="line">				<span class="keyword">auto</span> iter = <span class="built_in">find</span>(g_clients.<span class="built_in">begin</span>(), g_clients.<span class="built_in">end</span>(), fdRead.fd_array[n]);</span><br><span class="line">				<span class="keyword">if</span> (iter != g_clients.<span class="built_in">end</span>()) &#123;</span><br><span class="line">					g_clients.<span class="built_in">erase</span>(iter);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 测试中间select函数最后一个参数</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;空闲时间处理其他业务 ...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> n = g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line">		<span class="built_in">closesocket</span>(g_clients[n]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//6 关闭套接字closesocket</span></span><br><span class="line">	<span class="comment">//7 清除windows socket环境</span></span><br><span class="line">	<span class="built_in">WSACleanup</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;服务器已退出,任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//保留界面</span></span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//只有在WIN里可以</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region 结构体定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CMD</span> &#123;</span><br><span class="line">	CMD_LOGIN,</span><br><span class="line">	CMD_LOGOUT,</span><br><span class="line">	CMD_ERROR,</span><br><span class="line">	CMD_LOGIN_RESULT,</span><br><span class="line">	CMD_LOGOUT_RESULT,</span><br><span class="line">	CMD_NEW_USER_JOIN</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataHeader</span> &#123;</span><br><span class="line">	<span class="type">short</span> dataLength;</span><br><span class="line">	<span class="type">short</span> cmd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Login</span> : <span class="keyword">public</span> DataHeader &#123;<span class="comment">//DataPackage</span></span><br><span class="line">	<span class="built_in">Login</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(Login);</span><br><span class="line">		cmd = CMD_LOGIN;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">	<span class="type">char</span> PassWord[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoginResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">LoginResult</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(LoginResult);</span><br><span class="line">		cmd = CMD_LOGIN_RESULT;</span><br><span class="line">		result = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Logout</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">Logout</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(Logout);</span><br><span class="line">		cmd = CMD_LOGOUT;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LogoutResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">LogoutResult</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(LogoutResult);</span><br><span class="line">		cmd = CMD_LOGOUT_RESULT;</span><br><span class="line">		result = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NewUserJoin</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">NewUserJoin</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(NewUserJoin);</span><br><span class="line">		cmd = CMD_NEW_USER_JOIN;</span><br><span class="line">		sock = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> sock;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataPackage</span> &#123;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">processor</span><span class="params">(SOCKET _cSock)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//缓冲区</span></span><br><span class="line">	<span class="type">char</span> szRecv[<span class="number">4096</span>] = &#123;&#125;;</span><br><span class="line">	<span class="comment">// 5 接收客户端数据</span></span><br><span class="line">	<span class="type">int</span> nLen = <span class="built_in">recv</span>(_cSock, szRecv, <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">	DataHeader* header = (DataHeader*)szRecv;</span><br><span class="line">	<span class="keyword">if</span> (nLen &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;与服务器断开连接，任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">switch</span> (header-&gt;cmd) &#123;</span><br><span class="line">	<span class="keyword">case</span> CMD_LOGIN_RESULT: &#123;</span><br><span class="line">		<span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">		LoginResult* login = (LoginResult*)szRecv;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;收到服务端消息：CMD_LOGIN_RESULT, 数据长度：&quot;</span> &lt;&lt; login-&gt;dataLength &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">case</span> CMD_LOGOUT_RESULT: &#123;</span><br><span class="line">		<span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">		LogoutResult* logout = (LogoutResult*)szRecv;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;收到服务端消息：CMD_LOGOUT_RESULT, 数据长度：&quot;</span> &lt;&lt; logout-&gt;dataLength &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">case</span> CMD_NEW_USER_JOIN: &#123;</span><br><span class="line">		<span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">		NewUserJoin* userJoin = (NewUserJoin*)szRecv;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;收到服务端消息：CMD_LOGOUT_RESULT, 数据长度：&quot;</span> &lt;&lt; userJoin-&gt;dataLength &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//启动Windows socket 2.x环境</span></span><br><span class="line">	WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">	WSADATA dat;</span><br><span class="line">	<span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line">	<span class="comment">// 用Socket API 建立一个简易的TCP服务端</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 1 建立一个socket</span></span><br><span class="line">	SOCKET _sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (INVALID_SOCKET == _sock) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;建立Socket失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;建立Socket成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 2 连接服务器 connect</span></span><br><span class="line">	sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">	_sin.sin_family = AF_INET;</span><br><span class="line">	_sin.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);</span><br><span class="line">	_sin.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">	<span class="type">int</span> ret = <span class="built_in">connect</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(sockaddr_in));</span><br><span class="line">	<span class="keyword">if</span> (SOCKET_ERROR == ret) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;连接服务器失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;连接服务器成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">		fd_set fdReads;</span><br><span class="line">		<span class="built_in">FD_ZERO</span>(&amp;fdReads);</span><br><span class="line">		<span class="built_in">FD_SET</span>(_sock,&amp;fdReads);</span><br><span class="line">		timeval t = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">		<span class="type">int</span> ret = <span class="built_in">select</span>(_sock, &amp;fdReads, <span class="number">0</span>, <span class="number">0</span>, &amp;t);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;select任务结束&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(_sock, &amp;fdReads)) &#123;</span><br><span class="line">			<span class="built_in">FD_CLR</span>(_sock, &amp;fdReads);</span><br><span class="line">			<span class="keyword">if</span> (<span class="number">-1</span> == <span class="built_in">processor</span>(_sock)) &#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;select任务结束2...&quot;</span> &lt;&lt; endl;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;空闲时间处理其他业务 ...&quot;</span> &lt;&lt; endl;</span><br><span class="line">		Login login;</span><br><span class="line">		<span class="built_in">strcpy</span>(login.userName, <span class="string">&quot;lyd&quot;</span>);</span><br><span class="line">		<span class="built_in">strcpy</span>(login.PassWord, <span class="string">&quot;lyd&quot;</span>);</span><br><span class="line">		<span class="built_in">send</span>(_sock, (<span class="type">const</span> <span class="type">char</span>*)&amp;login, <span class="built_in">sizeof</span>(Login), <span class="number">0</span>);</span><br><span class="line">		<span class="comment">//仅仅适用于Windows</span></span><br><span class="line">		<span class="comment">// Sleep(1000);</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 7 关闭套接字closesocket</span></span><br><span class="line">	<span class="built_in">closesocket</span>(_sock);</span><br><span class="line">	<span class="comment">// 8 清除windows socket环境</span></span><br><span class="line">	<span class="built_in">WSACleanup</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;客户端已退出,任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//保留界面</span></span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s11.ax1x.com/2024/03/02/pF0yFOS.png" alt="image-20240302101949530"></p>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>C++socket项目</tag>
      </tags>
  </entry>
  <entry>
    <title>客户端服务端跨平台移植，并添加线程</title>
    <url>/posts/7cdb8e03.html</url>
    <content><![CDATA[<p>客户端代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  <span class="comment">//uni std</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCKET int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INVALID_SOCKET  (SOCKET)(~0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCKET_ERROR            (-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span>	<span class="comment">//C++标准线程库</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> g_bRun = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region 结构体定义</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CMD</span> &#123;</span><br><span class="line">	CMD_LOGIN,</span><br><span class="line">	CMD_LOGOUT,</span><br><span class="line">	CMD_ERROR,</span><br><span class="line">	CMD_LOGIN_RESULT,</span><br><span class="line">	CMD_LOGOUT_RESULT,</span><br><span class="line">	CMD_NEW_USER_JOIN</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataHeader</span> &#123;</span><br><span class="line">	<span class="type">short</span> dataLength;</span><br><span class="line">	<span class="type">short</span> cmd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Login</span> : <span class="keyword">public</span> DataHeader &#123;<span class="comment">//DataPackage</span></span><br><span class="line">	<span class="built_in">Login</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(Login);</span><br><span class="line">		cmd = CMD_LOGIN;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">	<span class="type">char</span> PassWord[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoginResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">LoginResult</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(LoginResult);</span><br><span class="line">		cmd = CMD_LOGIN_RESULT;</span><br><span class="line">		result = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Logout</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">Logout</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(Logout);</span><br><span class="line">		cmd = CMD_LOGOUT;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LogoutResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">LogoutResult</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(LogoutResult);</span><br><span class="line">		cmd = CMD_LOGOUT_RESULT;</span><br><span class="line">		result = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NewUserJoin</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">NewUserJoin</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(NewUserJoin);</span><br><span class="line">		cmd = CMD_NEW_USER_JOIN;</span><br><span class="line">		sock = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> sock;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataPackage</span> &#123;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">processor</span><span class="params">(SOCKET _cSock)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//缓冲区</span></span><br><span class="line">	<span class="type">char</span> szRecv[<span class="number">4096</span>] = &#123;&#125;;</span><br><span class="line">	<span class="comment">// 5 接收客户端数据</span></span><br><span class="line">	<span class="type">int</span> nLen = <span class="built_in">recv</span>(_cSock, szRecv, <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">	DataHeader* header = (DataHeader*)szRecv;</span><br><span class="line">	<span class="keyword">if</span> (nLen &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;与服务器断开连接，任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">switch</span> (header-&gt;cmd) &#123;</span><br><span class="line">	<span class="keyword">case</span> CMD_LOGIN_RESULT: &#123;</span><br><span class="line">		<span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">		LoginResult* login = (LoginResult*)szRecv;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;收到服务端消息：CMD_LOGIN_RESULT, 数据长度：&quot;</span> &lt;&lt; login-&gt;dataLength &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">case</span> CMD_LOGOUT_RESULT: &#123;</span><br><span class="line">		<span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">		LogoutResult* logout = (LogoutResult*)szRecv;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;收到服务端消息：CMD_LOGOUT_RESULT, 数据长度：&quot;</span> &lt;&lt; logout-&gt;dataLength &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">case</span> CMD_NEW_USER_JOIN: &#123;</span><br><span class="line">		<span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">		NewUserJoin* userJoin = (NewUserJoin*)szRecv;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;收到服务端消息：CMD_LOGOUT_RESULT, 数据长度：&quot;</span> &lt;&lt; userJoin-&gt;dataLength &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cmdThread</span><span class="params">(SOCKET sock)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="type">char</span> cmdBuf[<span class="number">256</span>] = &#123;&#125;;</span><br><span class="line">		cin &gt;&gt; cmdBuf;</span><br><span class="line">		<span class="comment">/*cout &lt;&lt; cmdBuf &lt;&lt; endl;*/</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(cmdBuf, <span class="string">&quot;exit&quot;</span>)) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;退出cmdThread线程&quot;</span> &lt;&lt; endl;</span><br><span class="line">			g_bRun = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(cmdBuf, <span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">			Login login;</span><br><span class="line">			<span class="built_in">strcpy</span>(login.userName, <span class="string">&quot;lyd&quot;</span>);</span><br><span class="line">			<span class="built_in">strcpy</span>(login.PassWord, <span class="string">&quot;lydmm&quot;</span>);</span><br><span class="line">			<span class="built_in">send</span>(sock, (<span class="type">const</span> <span class="type">char</span>*)&amp;login, <span class="built_in">sizeof</span>(Login), <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(cmdBuf, <span class="string">&quot;logout&quot;</span>)) &#123;</span><br><span class="line">			Logout logout;</span><br><span class="line">			<span class="built_in">strcpy</span>(logout.userName, <span class="string">&quot;lyd&quot;</span>);</span><br><span class="line">			<span class="built_in">send</span>(sock, (<span class="type">const</span> <span class="type">char</span>*)&amp;logout, <span class="built_in">sizeof</span>(Logout), <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;不支持的命令...&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">	<span class="comment">//启动Windows socket 2.x环境</span></span><br><span class="line">	WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">	WSADATA dat;</span><br><span class="line">	<span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line">	<span class="comment">// 用Socket API 建立一个简易的TCP服务端</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 1 建立一个socket</span></span><br><span class="line">	SOCKET _sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (INVALID_SOCKET == _sock) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;建立Socket失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;建立Socket成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 2 连接服务器 connect</span></span><br><span class="line">	sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">	_sin.sin_family = AF_INET;</span><br><span class="line">	_sin.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">	<span class="comment">/*_sin.sin_addr.S_un.S_addr = inet_addr(&quot;192.168.88.130&quot;);*/</span></span><br><span class="line">	_sin.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	_sin.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;192.168.88.130&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="comment">//_sin.sin_addr.S_un.S_addr = inet_addr(&quot;127.0.0.1&quot;);</span></span><br><span class="line">	<span class="type">int</span>  ret = <span class="built_in">connect</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(sockaddr_in));</span><br><span class="line">	<span class="keyword">if</span> (SOCKET_ERROR == ret) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;连接服务器失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;连接服务器成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 启动线程</span></span><br><span class="line">	<span class="function">thread <span class="title">t1</span><span class="params">(cmdThread, _sock)</span></span>;</span><br><span class="line">	t1.<span class="built_in">detach</span>();</span><br><span class="line">	<span class="keyword">while</span> (g_bRun) &#123;</span><br><span class="line"></span><br><span class="line">		fd_set fdReads;</span><br><span class="line">		<span class="built_in">FD_ZERO</span>(&amp;fdReads);</span><br><span class="line">		<span class="built_in">FD_SET</span>(_sock, &amp;fdReads);</span><br><span class="line">		timeval t = &#123; <span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line">		<span class="type">int</span> ret = <span class="built_in">select</span>(_sock + <span class="number">1</span>, &amp;fdReads, <span class="number">0</span>, <span class="number">0</span>, &amp;t);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;select任务结束&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(_sock, &amp;fdReads)) &#123;</span><br><span class="line">			<span class="built_in">FD_CLR</span>(_sock, &amp;fdReads);</span><br><span class="line">			<span class="keyword">if</span> (<span class="number">-1</span> == <span class="built_in">processor</span>(_sock)) &#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;select任务结束2...&quot;</span> &lt;&lt; endl;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//线程thread</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;空闲时间处理其他业务 ...&quot; &lt;&lt; endl;</span></span><br><span class="line">		<span class="comment">//仅仅适用于Windows</span></span><br><span class="line">		<span class="comment">// Sleep(1000);</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">	<span class="comment">// 7 关闭套接字closesocket</span></span><br><span class="line">	<span class="built_in">closesocket</span>(_sock);</span><br><span class="line">	<span class="comment">// 8 清除windows socket环境</span></span><br><span class="line">	<span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	<span class="built_in">close</span>(_sock);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;客户端已退出,任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//保留界面</span></span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务端代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  <span class="comment">//uni std</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> SOCKET int</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> INVALID_SOCKET  (SOCKET)(~0)</span></span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> SOCKET_ERROR            (-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span>	<span class="comment">//C++标准线程库</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region 结构体定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CMD</span> &#123;</span><br><span class="line">	CMD_LOGIN,</span><br><span class="line">	CMD_LOGOUT,</span><br><span class="line">	CMD_ERROR,</span><br><span class="line">	CMD_LOGIN_RESULT,</span><br><span class="line">	CMD_LOGOUT_RESULT,</span><br><span class="line">	CMD_NEW_USER_JOIN</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataHeader</span> &#123;</span><br><span class="line">	<span class="type">short</span> dataLength;</span><br><span class="line">	<span class="type">short</span> cmd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Login</span> : <span class="keyword">public</span> DataHeader &#123;<span class="comment">//DataPackage</span></span><br><span class="line">	<span class="built_in">Login</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(Login);</span><br><span class="line">		cmd = CMD_LOGIN;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">	<span class="type">char</span> PassWord[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoginResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">LoginResult</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(LoginResult);</span><br><span class="line">		cmd = CMD_LOGIN_RESULT;</span><br><span class="line">		result = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Logout</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">Logout</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(Logout);</span><br><span class="line">		cmd = CMD_LOGOUT;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> userName[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LogoutResult</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">LogoutResult</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(LogoutResult);</span><br><span class="line">		cmd = CMD_LOGOUT_RESULT;</span><br><span class="line">		result = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NewUserJoin</span> : <span class="keyword">public</span> DataHeader &#123;</span><br><span class="line">	<span class="built_in">NewUserJoin</span>() &#123;</span><br><span class="line">		dataLength = <span class="built_in">sizeof</span>(NewUserJoin);</span><br><span class="line">		cmd = CMD_NEW_USER_JOIN;</span><br><span class="line">		sock = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> sock;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataPackage</span> &#123;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;SOCKET&gt; g_clients;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">processor</span><span class="params">(SOCKET _cSock)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//缓冲区</span></span><br><span class="line">	<span class="type">char</span> szRecv[<span class="number">4096</span>] = &#123;&#125;;</span><br><span class="line">	<span class="comment">// 5 接收客户端数据</span></span><br><span class="line">	<span class="type">int</span> nLen = (<span class="type">int</span>)<span class="built_in">recv</span>(_cSock, szRecv, <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">	DataHeader* header = (DataHeader*)szRecv;</span><br><span class="line">	<span class="keyword">if</span> (nLen &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;客户端&lt; socket = &quot;</span> &lt;&lt; _cSock &lt;&lt; <span class="string">&quot; &gt;已退出，任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">switch</span> (header-&gt;cmd) &#123;</span><br><span class="line">	<span class="keyword">case</span> CMD_LOGIN: &#123;</span><br><span class="line">		<span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">		Login* login = (Login*)szRecv;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;收到客户端&lt;Socket = &quot;</span> &lt;&lt; _cSock &lt;&lt; <span class="string">&quot;&gt;请求：CMD_LOGIN, 数据长度：&quot;</span> &lt;&lt; login-&gt;dataLength &lt;&lt; <span class="string">&quot; ,userName =  &quot;</span> &lt;&lt; login-&gt;userName &lt;&lt; <span class="string">&quot; PassWord = &quot;</span> &lt;&lt; login-&gt;PassWord &lt;&lt; endl;</span><br><span class="line">		<span class="comment">//忽略判断用户密码是否正确</span></span><br><span class="line">		LoginResult ret;</span><br><span class="line">		<span class="built_in">send</span>(_cSock, (<span class="type">char</span>*)&amp;ret, <span class="built_in">sizeof</span>(LoginResult), <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">case</span> CMD_LOGOUT: &#123;</span><br><span class="line">		<span class="built_in">recv</span>(_cSock, szRecv + <span class="built_in">sizeof</span>(DataHeader), header-&gt;dataLength - <span class="built_in">sizeof</span>(DataHeader), <span class="number">0</span>);</span><br><span class="line">		Logout* logout = (Logout*)szRecv;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;收到客户端&lt;Socket = &quot;</span> &lt;&lt; _cSock &lt;&lt; <span class="string">&quot;&gt;请求：CMD_LOGOUT, 数据长度：&quot;</span> &lt;&lt; logout-&gt;dataLength &lt;&lt; <span class="string">&quot; ,userName =  &quot;</span> &lt;&lt; logout-&gt;userName &lt;&lt; endl;</span><br><span class="line">		<span class="comment">//忽略判断用户密码是否正确</span></span><br><span class="line">		LogoutResult ret;</span><br><span class="line">		<span class="built_in">send</span>(_cSock, (<span class="type">char</span>*)&amp;ret, <span class="built_in">sizeof</span>(ret), <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">default</span>: &#123;</span><br><span class="line">		DataHeader header = &#123; <span class="number">0</span>,CMD_ERROR &#125;;</span><br><span class="line">		<span class="built_in">send</span>(_cSock, (<span class="type">char</span>*)&amp;header, <span class="built_in">sizeof</span>(header), <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">	<span class="comment">//启动Windows socket 2.x环境</span></span><br><span class="line">	WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">	WSADATA dat;</span><br><span class="line">	<span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line">	<span class="comment">// 用Socket API 建立一个简易的TCP服务端 1 建立一个socket 套接字</span></span><br><span class="line">	SOCKET _sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">	<span class="comment">// 2 bind 绑定用于接受客户端连接的网络接口</span></span><br><span class="line">	sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">	_sin.sin_family = AF_INET;</span><br><span class="line">	_sin.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);<span class="comment">// host to net unsigned short</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">	_sin.sin_addr.S_un.S_addr = INADDR_ANY;<span class="comment">//inet_addr(&quot;127.0.0.1&quot;);</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	_sin.sin_addr.s_addr = INADDR_ANY;<span class="comment">//inet_addr(&quot;127.0.0.1&quot;);</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">bind</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(_sin)) == SOCKET_ERROR) &#123;</span><br><span class="line">		<span class="comment">//绑定错误</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;绑定网络端口失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;绑定网络端口成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//3 listen 监听网络端口</span></span><br><span class="line">	<span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">listen</span>(_sock, <span class="number">5</span>)) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;监听网络端口失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;监听网络端口成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="comment">// 伯克利套接字 BSD socket</span></span><br><span class="line">		fd_set fdRead; <span class="comment">//描述符(Socket) 集合</span></span><br><span class="line">		fd_set fdWrite;</span><br><span class="line">		fd_set fdExp;</span><br><span class="line">		<span class="comment">//清理集合</span></span><br><span class="line">		<span class="built_in">FD_ZERO</span>(&amp;fdRead);</span><br><span class="line">		<span class="built_in">FD_ZERO</span>(&amp;fdWrite);</span><br><span class="line">		<span class="built_in">FD_ZERO</span>(&amp;fdExp);</span><br><span class="line">		<span class="comment">//将描述符(socket)加入集合</span></span><br><span class="line">		<span class="built_in">FD_SET</span>(_sock, &amp;fdRead);</span><br><span class="line">		<span class="built_in">FD_SET</span>(_sock, &amp;fdWrite);</span><br><span class="line">		<span class="built_in">FD_SET</span>(_sock, &amp;fdExp);</span><br><span class="line">		SOCKET maxSock = _sock;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line">			<span class="built_in">FD_SET</span>(g_clients[n], &amp;fdRead);</span><br><span class="line">			<span class="keyword">if</span> (maxSock &lt; g_clients[n]) &#123;</span><br><span class="line">				maxSock = g_clients[n];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//nfds 是一个整数值，是指fd_set集合中所有描述符(socket)的范围，而不是数量</span></span><br><span class="line">		<span class="comment">//既是所有文件描述符最大值+1，在Windows中这个参数可以写0</span></span><br><span class="line">		timeval t = &#123; <span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line">		<span class="type">int</span>  ret = <span class="built_in">select</span>(maxSock + <span class="number">1</span>, &amp;fdRead, &amp;fdWrite, &amp;fdExp, &amp;t);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;select任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//判断描述符(socket)是否在集合中</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(_sock, &amp;fdRead)) &#123;</span><br><span class="line">			<span class="built_in">FD_CLR</span>(_sock, &amp;fdRead);</span><br><span class="line">			<span class="comment">//4 accept 等待接受客户端连接</span></span><br><span class="line">			sockaddr_in clientAddr = &#123;&#125;;</span><br><span class="line">			<span class="type">int</span> nAddrLen = <span class="built_in">sizeof</span>(sockaddr_in);</span><br><span class="line">			SOCKET _cSock = INVALID_SOCKET;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">			_cSock = <span class="built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, &amp;nAddrLen);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">			_cSock = <span class="built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, (<span class="type">socklen_t</span>*)&amp;nAddrLen);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line">			<span class="keyword">if</span> (_cSock == INVALID_SOCKET) &#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;接受到无效客户端SOCKET...&quot;</span> &lt;&lt; endl;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// 新客户端加入，群发</span></span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line">					NewUserJoin userJoin;</span><br><span class="line">					<span class="built_in">send</span>(g_clients[n], (<span class="type">const</span> <span class="type">char</span>*)&amp;userJoin, <span class="built_in">sizeof</span>(NewUserJoin), <span class="number">0</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				g_clients.<span class="built_in">push_back</span>(_cSock);</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;新客户端加入：socket = &quot;</span> &lt;&lt; (<span class="type">int</span>)_cSock &lt;&lt; <span class="string">&quot;, IP = &quot;</span> &lt;&lt; <span class="built_in">inet_ntoa</span>(clientAddr.sin_addr) &lt;&lt; endl;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">FD_ISSET</span>(g_clients[n], &amp;fdRead)) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">processor</span>(g_clients[n]) == <span class="number">-1</span>) &#123;</span><br><span class="line">					<span class="keyword">auto</span> iter = g_clients.<span class="built_in">begin</span>() + n; <span class="comment">//std::vector&lt;SOCKET&gt;::iterator</span></span><br><span class="line">					<span class="keyword">if</span> (iter != g_clients.<span class="built_in">end</span>()) &#123;</span><br><span class="line">						g_clients.<span class="built_in">erase</span>(iter);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;空闲时间处理其他业务 ...&quot; &lt;&lt; endl;</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line">		<span class="built_in">closesocket</span>(g_clients[n]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//6 关闭套接字closesocket</span></span><br><span class="line">	<span class="comment">//7 清除windows socket环境</span></span><br><span class="line">	<span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> n = (<span class="type">int</span>)g_clients.<span class="built_in">size</span>() - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line">		<span class="built_in">close</span>(g_clients[n]);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;服务器已退出,任务结束...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//保留界面</span></span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s21.ax1x.com/2024/04/01/pF72K3D.png" alt="image-20240331210407460"></p>
<p><img src="https://s21.ax1x.com/2024/04/01/pF72QjH.png" alt="Screenshot 2024-03-31 204407"></p>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>C++socket项目</tag>
      </tags>
  </entry>
  <entry>
    <title>建立一个简易的TCP客户端与服务端</title>
    <url>/posts/aa711198.html</url>
    <content><![CDATA[<h2 id="TCP服务端"><a href="#TCP服务端" class="headerlink" title="TCP服务端"></a>TCP服务端</h2><p>分为一下六步：</p>
<ol>
<li>建立一个socket 套接字</li>
<li>bind 绑定用于接受客户端连接的网络接口</li>
<li>listen 监听网络端口</li>
<li>accept 等待接受客户端连接</li>
<li>send 向客户端发送一条数据</li>
<li>关闭套接字closesocket</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//只有在WIN里可以</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//启动Windows socket 2.x环境</span></span><br><span class="line">	WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">	WSADATA dat;</span><br><span class="line">	<span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line">	<span class="comment">// 用Socket API 建立一个简易的TCP服务端</span></span><br><span class="line">	<span class="comment">// 1 建立一个socket 套接字</span></span><br><span class="line">	SOCKET _sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">	<span class="comment">// 2 bind 绑定用于接受客户端连接的网络接口</span></span><br><span class="line">	sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">	_sin.sin_family = AF_INET;</span><br><span class="line">	_sin.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);<span class="comment">// host to net unsigned short</span></span><br><span class="line">	_sin.sin_addr.S_un.S_addr = INADDR_ANY;<span class="comment">//inet_addr(&quot;127.0.0.1&quot;);</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">bind</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(_sin)) == SOCKET_ERROR) &#123;</span><br><span class="line">		<span class="comment">//绑定错误</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;绑定网络端口失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;绑定网络端口成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//3 listen 监听网络端口</span></span><br><span class="line">	<span class="keyword">if</span> (SOCKET_ERROR == <span class="built_in">listen</span>(_sock, <span class="number">5</span>)) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;监听网络端口失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;监听网络端口成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//4 accept 等待接受客户端连接</span></span><br><span class="line">	sockaddr_in clientAddr = &#123;&#125;;</span><br><span class="line">	<span class="type">int</span> nAddrLen = <span class="built_in">sizeof</span>(sockaddr_in);</span><br><span class="line">	SOCKET _cSock = INVALID_SOCKET;</span><br><span class="line">	<span class="type">char</span> msgBuf[] = <span class="string">&quot;Hello ,I&#x27;m Server.&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		_cSock = <span class="built_in">accept</span>(_sock, (sockaddr*)&amp;clientAddr, &amp;nAddrLen);</span><br><span class="line">		<span class="keyword">if</span> (_cSock == INVALID_SOCKET) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;接受到无效客户端SOCKET...&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;新客户端加入：IP =&quot;</span> &lt;&lt; <span class="built_in">inet_ntoa</span>(clientAddr.sin_addr) &lt;&lt; endl;</span><br><span class="line">		<span class="comment">//5 send 向客户端发送一条数据</span></span><br><span class="line">		<span class="built_in">send</span>(_cSock, msgBuf, <span class="built_in">strlen</span>(msgBuf) + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//6 关闭套接字closesocket</span></span><br><span class="line">	<span class="built_in">closesocket</span>(_sock);</span><br><span class="line">	<span class="comment">//7 清除windows socket环境</span></span><br><span class="line">	<span class="built_in">WSACleanup</span>();</span><br><span class="line">	<span class="comment">//保留界面</span></span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="TCP服务端-1"><a href="#TCP服务端-1" class="headerlink" title="TCP服务端"></a>TCP服务端</h2><p>分为四步：</p>
<ol>
<li>建立一个socket</li>
<li>连接服务器 connect</li>
<li>接受服务器信息 recv</li>
<li>关闭套接字closesocket</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//只有在WIN里可以</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//启动Windows socket 2.x环境</span></span><br><span class="line">	WORD ver = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">	WSADATA dat;</span><br><span class="line">	<span class="built_in">WSAStartup</span>(ver, &amp;dat);</span><br><span class="line">	<span class="comment">// 用Socket API 建立一个简易的TCP服务端</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 1 建立一个socket</span></span><br><span class="line">	SOCKET _sock = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (INVALID_SOCKET == _sock) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;建立Socket失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;建立Socket成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 2 连接服务器 connect</span></span><br><span class="line">	sockaddr_in _sin = &#123;&#125;;</span><br><span class="line">	_sin.sin_family = AF_INET;</span><br><span class="line">	_sin.sin_port = <span class="built_in">htons</span>(<span class="number">4567</span>);</span><br><span class="line">	_sin.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">	<span class="type">int</span> ret = <span class="built_in">connect</span>(_sock, (sockaddr*)&amp;_sin, <span class="built_in">sizeof</span>(sockaddr_in));</span><br><span class="line">	<span class="keyword">if</span> (SOCKET_ERROR == ret) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;连接Socket失败...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;连接Socket成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//3 接受服务器信息 recv</span></span><br><span class="line">	<span class="type">char</span> recvBuf[<span class="number">256</span>] = &#123;&#125;;</span><br><span class="line">	<span class="type">int</span> nlen = <span class="built_in">recv</span>(_sock, recvBuf, <span class="number">256</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (nlen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;接收到数据为：&quot;</span> &lt;&lt; recvBuf &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 4 关闭套接字closesocket</span></span><br><span class="line">	<span class="built_in">closesocket</span>(_sock);</span><br><span class="line">	<span class="comment">// 5 清除windows socket环境</span></span><br><span class="line">	<span class="built_in">WSACleanup</span>();</span><br><span class="line">	<span class="comment">//保留界面</span></span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h2><p><strong>服务端</strong></p>
<p><img src="https://s11.ax1x.com/2023/12/15/pi41BFK.png" alt="屏幕截图 2023-12-15 181558"></p>
<p><strong>客户端</strong></p>
<p><img src="https://s11.ax1x.com/2023/12/15/pi41DJO.png" alt="屏幕截图 2023-12-15 181602"></p>
]]></content>
      <categories>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>C++socket项目</tag>
      </tags>
  </entry>
  <entry>
    <title>拼模型尝试</title>
    <url>/posts/752b7aad.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>记录一下自己首次组合模型的过程，希望可以为以后论文打基础。</p>
<p>PS：由于自己是零基础，看了一下李沐的教程，感觉理论部分有点多，没看完可能<code>deadline</code>都到了。唐老师的人工智能课也看了看，总感觉不是特别系统，都是一个一个项目，于是我打算效率亿点点，需要什么先学什么。</p>
<p>我需要跑的一个模型是这样的架构</p>
<p><img src="https://s1.ax1x.com/2023/08/12/pPuCZes.png" alt="模型架构"></p>
<h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><p>客观分析一下我遇到的这个问题</p>
<p><strong>1.目标问题</strong></p>
<p>把这个架构跑通$\rightarrow$</p>
<p>从中文电子病历提取有用信息$\rightarrow$</p>
<p>进行医疗大数据挖掘、临床辅助决策系统、AI 电子病历质控系统构建等的基础工作</p>
<p><strong>2.方法问题</strong></p>
<p>寻找相似的项目或者使用了相似模型架构的项目，把他们的模型删删改改</p>
<p>删改可能需要借助到模型的官方文档，例如<a href="https://paddlenlp.readthedocs.io/zh/latest/index.html">PaddleNLP文档</a>，或者<a href="https://pytorch-cn.readthedocs.io/zh/latest/">PyTorch文档</a></p>
<p>然后多借鉴一些博客的方法</p>
<p><strong>3.执行问题</strong></p>
<p>先安装一下paddle，然后尝试先把网上的项目跑通，在看懂的基础上进行修改</p>
<h2 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h2><h3 id="安装paddleNLP"><a href="#安装paddleNLP" class="headerlink" title="安装paddleNLP"></a>安装paddleNLP</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认前提是已经安装好了paddle(2.5.1)，我之前已经安装完，现在直接进入这个环境(CUDA 11.0)</span></span><br><span class="line">conda activate paddle</span><br><span class="line"><span class="comment"># 安装PaddleNLP 换成阿里云的镜像安装会快很多</span></span><br><span class="line">pip install --upgrade paddlenlp&gt;=2.0.0rc -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>
<p>验证安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="keyword">import</span> paddlenlp</span><br></pre></td></tr></table></figure>
<p>没有error应该就是安装好了</p>
<h3 id="复现别人项目"><a href="#复现别人项目" class="headerlink" title="复现别人项目"></a>复现别人项目</h3><p>首先找到一个使用了类似框架的项目——<a href="https://aistudio.baidu.com/aistudio/projectdetail/1761182">中文命名实体识别-Bi-GRU+CRF</a>，然后把代码以<code>.py</code>的格式下载下来,用PyCharm打开</p>
<p>打开后项目结构如下</p>
<p><img src="https://s1.ax1x.com/2023/08/13/pPKFcad.png" alt="image-20230813171608656"></p>
<p>开始一步一步跑了</p>
<p>首先遇到的一个问题，<code>UnicodeDecodeError: &#39;gbk&#39; codec can&#39;t decode byte 0xa8 in position 2: illegal multibyte sequence</code></p>
<p><img src="https://s1.ax1x.com/2023/08/13/pPKFoqg.png" alt="image-20230813172211506"></p>
<p>加一个<code>encoding</code>属性就可以了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">open</span>(<span class="string">&#x27;data/train.txt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)):</span><br></pre></td></tr></table></figure>
<p>往下跑的时候又出现了一个错，<code>ValueError: not enough values to unpack (expected 2, got 1)</code></p>
<p><img src="https://s1.ax1x.com/2023/08/13/pPK0js0.png" alt="image-20230813205507724"></p>
<p>经过调试发现，<code>word_vocab = load_dict(&#39;./conf/word.dic&#39;)</code>这句就不会报错，只有前一句报错，于是我对比了两个数据集，发现了原因</p>
<p><code>word.dic</code>数据集（部分）</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">0	a</span><br><span class="line">1	e</span><br><span class="line">2	i</span><br><span class="line">3	n</span><br><span class="line">4	o</span><br><span class="line">5	s</span><br></pre></td></tr></table></figure>
<p><code>tag.dic</code>数据集（部分）</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">B-PER</span><br><span class="line">I-PER</span><br><span class="line">B-ORG</span><br><span class="line">I-ORG</span><br></pre></td></tr></table></figure>
<p>问题就出现在函数<code>load_dict</code>的这句话上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_dict</span>(<span class="params">dict_path</span>):</span><br><span class="line">    vocab = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(dict_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">    	//这句有问题，第一个数据集一行有两个参数，但是第二个数据集只有一个参数</span><br><span class="line">        value, key = line.strip(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&#x27;\t&#x27;</span>)  </span><br><span class="line">        vocab[key] = <span class="built_in">int</span>(value)</span><br><span class="line">    <span class="keyword">return</span> vocab</span><br></pre></td></tr></table></figure>
<p>于是我分开写了两个函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_word_dict</span>(<span class="params">dict_path</span>):</span><br><span class="line">    vocab = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(dict_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">        value, key = line.strip(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        vocab[key] = <span class="built_in">int</span>(value)</span><br><span class="line">    <span class="keyword">return</span> vocab</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_tag_dict</span>(<span class="params">dict_path</span>):</span><br><span class="line">    vocab = &#123;&#125;</span><br><span class="line">    key = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(dict_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">        value = line.strip(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        vocab[key] = value</span><br><span class="line">        key += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> vocab</span><br></pre></td></tr></table></figure>
<p>后面的调用在改一下就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">label_vocab = load_tag_dict(<span class="string">&#x27;./conf/tag.dic&#x27;</span>) </span><br><span class="line">word_vocab = load_word_dict(<span class="string">&#x27;./conf/word.dic&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>按照同样的逻辑，把前面单元格里的代码改一下就行，但是发现还有错误</p>
<p><img src="https://s1.ax1x.com/2023/08/13/pPKBYef.png" alt="image-20230813211023632"></p>
<p>发现上下两个代码块其实意思差不多，把上面代码块里的<code>load_dataset</code>函数替换掉下面的就行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_dataset</span>(<span class="params">datafiles</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">data_path</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(data_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            word_list = []</span><br><span class="line">            tag_list = []</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                <span class="keyword">if</span> line != <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">                    word, tag = line.strip(<span class="string">&#x27;\n&#x27;</span>).split()</span><br><span class="line">                    word_list.append(word)</span><br><span class="line">                    tag_list.append(tag)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">yield</span> word_list, tag_list</span><br><span class="line">                    word_list = []</span><br><span class="line">                    tag_list = []</span><br><span class="line">            <span class="comment"># next(fp)</span></span><br><span class="line">            <span class="comment"># for line in fp.readlines():</span></span><br><span class="line">            <span class="comment">#     words, labels = line.strip(&#x27;\n&#x27;).split(&#x27;\t&#x27;)</span></span><br><span class="line">            <span class="comment">#     words = words.split(&#x27;\002&#x27;)</span></span><br><span class="line">            <span class="comment">#     labels = labels.split(&#x27;\002&#x27;)</span></span><br><span class="line">            <span class="comment">#     yield words, labels</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(datafiles, <span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">return</span> MapDataset(<span class="built_in">list</span>(read(datafiles)))</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(datafiles, <span class="built_in">list</span>) <span class="keyword">or</span> <span class="built_in">isinstance</span>(datafiles, <span class="built_in">tuple</span>):</span><br><span class="line">        <span class="keyword">return</span> [MapDataset(<span class="built_in">list</span>(read(datafile))) <span class="keyword">for</span> datafile <span class="keyword">in</span> datafiles]</span><br></pre></td></tr></table></figure>
<p>之后好多代码块都没有报错，直到需要训练的时候，遇到了这个</p>
<p><img src="https://s1.ax1x.com/2023/08/13/pPKsRk8.png" alt="image-20230813220554458"></p>
<p>网上查了好长时间也不知道怎么解决，以为是版本<code>paddle</code>太高了，降级完但是出现了更多的错，弄了好半天也没成功，最后又装回<code>2.5.1</code>版本的了。后来看到网上说很可能是dataset类型的原因，官方API要求的类型如下</p>
<p><strong>dataset</strong> (Dataset) - <code>DataLoader</code> 从此参数给定数据集中加载数据，此参数必须是 <code>paddle.io.Dataset</code> 或 <code>paddle.io.IterableDataset</code> 的一个子类实例。</p>
<p>而我的类型是<code>paddlenlp.datasets.dataset.MapDataset</code></p>
<p><img src="https://s1.ax1x.com/2023/08/15/pPQAQHS.png" alt="image-20230815155330435"></p>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
  </entry>
  <entry>
    <title>斐波那契数列 C_C++</title>
    <url>/posts/2f7a802d.html</url>
    <content><![CDATA[<p>用三种方法实现:</p>
<ol>
<li>带备忘录的递归</li>
<li>dp迭代</li>
<li>迭代优化，空间复杂度为O(1)</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _for(i,a,b) for(int i=(a);i&lt;=(b);i++)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//备忘录</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">helper</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; memo, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//base case</span></span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">2</span> || n == <span class="number">3</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (memo[n] != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> memo[n];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		memo[n] = <span class="built_in">helper</span>(memo, n - <span class="number">1</span>) + <span class="built_in">helper</span>(memo, n - <span class="number">2</span>);</span><br><span class="line">		<span class="keyword">return</span> memo[n];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带备忘录法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fib_1</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (N &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">memo</span><span class="params">(N + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">helper</span>(memo, N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dp数组迭代法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fib_2</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(N + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">	dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	dp[<span class="number">2</span>] = dp[<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">	_for(i, <span class="number">4</span>, N) &#123;</span><br><span class="line">		dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dp[N];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代优化</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fib_3</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (N == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (N == <span class="number">2</span> || N == <span class="number">3</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> pre = <span class="number">1</span>, ppre = <span class="number">1</span>;</span><br><span class="line">	_for(i, <span class="number">4</span>, N) &#123;</span><br><span class="line">		<span class="type">int</span> sum = pre + ppre;</span><br><span class="line">		ppre = pre;</span><br><span class="line">		pre = sum;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">fib_3</span>(<span class="number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>刷题笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>本地部署chatGPT</title>
    <url>/posts/63ac10c2.html</url>
    <content><![CDATA[<p>首先打开<a href="https://github.com/ramonvc/freegpt-webui#cloning-the-repository-inbox_tray">项目网址</a>，把代码下载下来，按照其要求安装<a href="https://www.python.org/downloads/"><code>python</code></a>，<a href="https://git-scm.com/download/win"><code>git</code></a></p>
<p>安装完成后，检查一下自己是否安装成功，<code>Win+R</code>后输入<code>cmd</code>，在弹出来的窗口内输入<code>python</code></p>
<p><img src="https://s1.ax1x.com/2023/07/15/pC5VexS.png" alt="image-20230715091723681"></p>
<p>若和下图类似，则说明安装成功</p>
<p>输入<code>exit()</code>退出<code>python</code>的编辑模式。继续输入<code>git --version</code></p>
<p><img src="https://s1.ax1x.com/2023/07/15/pC5VQVs.png" alt="image-20230715091956265"></p>
<p>说明<code>git</code>也安装成功。</p>
<p>将下载下来的压缩包解压，并用<code>cmd</code>进入其项目文件夹，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/07/15/pC5VoJP.png" alt="image-20230715093344938"></p>
<p><strong>安装完毕后然后开启海外全局<code>magic</code></strong>，运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python run.py</span><br></pre></td></tr></table></figure>
<p>如果遇到这个问题</p>
<p><img src="https://s1.ax1x.com/2023/07/15/pC5ZnW6.png" alt="image-20230715094624768"></p>
<p>找到项目中的<code>config.json</code>文件</p>
<p>把<code>port</code>改成<code>8088</code></p>
<p><img src="https://s1.ax1x.com/2023/07/15/pC5ZMQO.png" alt="image-20230715094711628"></p>
<p>若出现以下界面</p>
<p><img src="https://s1.ax1x.com/2023/07/15/pC5ZlOe.png" alt="image-20230715094750540"></p>
<p>则可以打开</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">http://localhost:8088</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/07/15/pC5ZlOe.png" alt="image-20230715094750540"></p>
<p>成功部署chatGPT！</p>
<p><img src="https://s1.ax1x.com/2023/07/15/pC5ZI0J.png" alt="屏幕截图 2023-07-15 095407"></p>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
  </entry>
  <entry>
    <title>王道数据结构 线性表 链式存储小结</title>
    <url>/posts/4884fb8d.html</url>
    <content><![CDATA[<h1 id="1-单链表"><a href="#1-单链表" class="headerlink" title="1.单链表"></a>1.单链表</h1><p><img src="https://img-blog.csdnimg.cn/20210116122507504.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="单链表"></p>
<h2 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h2><p>图解：<br><img src="https://img-blog.csdnimg.cn/20210116125651161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="1"></p>
<ol>
<li>待插入的next指向头结点原本指向的结点</li>
<li>修改头结点的next指向待插入结点<br><img src="https://img-blog.csdnimg.cn/20210116125826814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="如何插入"></li>
</ol>
<p>插入完毕<img src="https://img-blog.csdnimg.cn/20210116130021844.png#pic_center" alt="插入完毕"><br>代码实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设带插入结点为S</span></span><br><span class="line">S-&gt;next=head-&gt;next;</span><br><span class="line">head-&gt;next=S;</span><br></pre></td></tr></table></figure>
<h2 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h2><p>图解<br><img src="https://img-blog.csdnimg.cn/20210116130729224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="待插入状态"></p>
<ol>
<li>将待插入结点的next域设为NULL</li>
<li><p>将最后一个结点的next域指向带插入结点<br><img src="https://img-blog.csdnimg.cn/20210116130930320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="插入方法"></p>
<p>插入完毕<br><img src="https://img-blog.csdnimg.cn/20210116131032237.png#pic_center" alt="插入完毕"><br>代码实现</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设插入结点为S</span></span><br><span class="line">head-&gt;next=S;</span><br><span class="line">head=S;</span><br></pre></td></tr></table></figure>
<h2 id="在中间插入"><a href="#在中间插入" class="headerlink" title="在中间插入"></a>在中间插入</h2><p>图解<br><img src="https://img-blog.csdnimg.cn/20210116202306782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="插入前状态"></p>
<ol>
<li>将待插入结点的next域指向插入结点位置的前驱结点指向的后一个结点</li>
<li>将原本位置上之前的结点指向待插入结点 </li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20210116202359651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>插入完成<br><img src="https://img-blog.csdnimg.cn/20210116202638177.png#pic_center" alt="插入完成"></p>
<p>代码实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设待插入结点为S</span></span><br><span class="line"><span class="comment">//待插入位置的前驱结点为pre</span></span><br><span class="line">S-&gt;next=pre-&gt;next;</span><br><span class="line">pre-&gt;next=S;</span><br></pre></td></tr></table></figure>
<h2 id="在中间删除"><a href="#在中间删除" class="headerlink" title="在中间删除"></a>在中间删除</h2><p>图解<br><img src="https://img-blog.csdnimg.cn/20210116204400671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="删除前状态"></p>
<ol>
<li>将待删除结点的前一个结点的next指向待删除结点next的结点</li>
<li>删除待删除结点</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20210116204421686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="步骤"><br>删除完成<br><img src="https://img-blog.csdnimg.cn/20210116204628265.png#pic_center" alt="删除完成"></p>
<p>代码实现 </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设待删除前驱结点为pre</span></span><br><span class="line"><span class="comment">//待删除结点为S</span></span><br><span class="line">pre-&gt;next=S-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> S;</span><br></pre></td></tr></table></figure>
<h2 id="原地逆置链表"><a href="#原地逆置链表" class="headerlink" title="原地逆置链表"></a>原地逆置链表</h2><ol>
<li>将头结点与后面的结点断开，然后重新用头插法插入</li>
<li>使用三个指针逆置<br>图解<br>1.<img src="https://img-blog.csdnimg.cn/20210116213023974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="1"><br>2.<img src="https://img-blog.csdnimg.cn/20210116213042409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="2"><br>3.<img src="https://img-blog.csdnimg.cn/20210116213051310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="3"><br>4.<img src="https://img-blog.csdnimg.cn/20210116213109935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="4"><br>5.逆置完毕（最后将头结点指向p）<img src="https://img-blog.csdnimg.cn/20210116213123148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="5"></li>
</ol>
<p>代码实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ReverseList</span><span class="params">(LinkList&amp; head)</span> </span>&#123;</span><br><span class="line">	LNode* pre, * p = head-&gt;next, * r = p-&gt;next;</span><br><span class="line">	p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">while</span> (r != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		pre = p;</span><br><span class="line">		p = r;</span><br><span class="line">		r = r-&gt;next;</span><br><span class="line">		p-&gt;next = pre;</span><br><span class="line">	&#125;</span><br><span class="line">	head-&gt;next = p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>研究生因公出国参加会议攻略——以内蒙古大学为例</title>
    <url>/posts/6831e4ad.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e2cd7bf3a14eca95b6db278fa39fc9bebd51d53ebac4ca4ae8009e11d3eabf4a">f666a1e82130d441cf5f17739ffab4075a317a77dcaf23bc89a4de7efe3e46fd4d2010f6e25f1abdb985a1f8a6a7a1c5b41b57df75c6da10eb8d70b80c6d74c5b18802e327487092ce886f17176aec3f3c8dabaa4b7bff29edc81bd98c0487ab74c5858d0fa3b8cf5ab84024ee7ddf048d9f3508ea22212a7deed7fa6c8ece57733fcd01adfb454e9ddcdabded800f20d2b59129ca15eb26842d30a40e08b461bbe7414e5f86ce88cfcf646db830f875337e37612ea4f85eca80afca5354db7d7c4c1da37febf35e7634a23586e50f41a66f329ff93b60129415d36b171be3d9c21d54f01e70dae1c67daa604cb5b63b73f16e66376af57e5d28cc157f960cecfb526a06153d06e58215dd4d27bd3c786a1f12ac31e791df5ce2e10fdc24759c29aa953ba1347f59c74b3926d250008790899d57bda207b241ba109a906b441a867b86e04cb1c5015285da0a7dbb25b45a3b682bbcda830661a3accbcd05165e7f712e2292eccbb630be1e96d370021ff1d1835b8af25989195f61c407dd39a50cd52eb46274426320ba0094ca9c4b879d4ea486f9ab5ce532e09fa468788de3f3f42db3ad88aa8e0258cefa2cfe991408bbcbdbf87d9de54a612bc8786078508a6e7cc4c16a255ba9e2b41a4ad1b1d28f4c6ae25ac7e63b1a7e5cd80040d419dcca6f81f32e4a3395e769b51f35d40e6025d7650dcf39e36a016d64c3dd00e1f34967e8d5e389b74eb2fb7ae7a8678e4ea9ae7f9fabad086f291cbad77ab96264aead0f2f66fdd8c33c21ed9d09d620bb6e4b7c0b861b8658a4970d03d28092fbc097425ef99de29cefd3dfe885ee74bcfa8c0f528e8241558d582bd4e84219b82303e44be5247f5b866fe08f196e0d61159fa1b2295d678852cd381c7da13df8bccfffc480e7b4b1c013f06aa0fe7a8a45cf250ff8180e917170833aa8e6693b93a38f59d623b3a3d92cec397035235dda4be11e9a0d8591a9fd410663cd44f019f3064b5a494b39a5e782b6ddde523ea9159d1ad2ca8687996f291c7c05f44dfda613827b23c5b4b8be5fcac8abae776c09efa05e6fd6db5f39f2fe0901dc67c799b6ddd3f76f34da8829573fe78cb3013b106a58c180d99feff69d54f7c738f204fe2c0b993a1d991029ca51c0cc6ea10ed1c7c691dee356150379591bda6cac48e8098049af6736a6add93cb5f6e5005525caf2ef9e16dd162fc6c84b9f1c9e6d540f276fefee335ec00653a0558f9bad4bf284c340db7e972b9b2beeb55304e284f99d6e42a25c55fac25720a0cbf0260b5ae2a7f48285a03562c42000462aa7e996c84016b7088d30a728b2968f5b7b43b35a69c95935f38f5b1148e8d1f3530dc15d8af0e9935f50bf5a30b93a2e65af19dbd09eb0fbb01d59c7f71469b1c70bf09e1ce34cafcd1206b63cad44eb026089ad1f8e8c104a6247a6e20a56cac0b3b3ff8446d88d21fd03aeb7f4161ebaa958e1fb9b4b8c21a88a7139e134d9ce3c545196ab591bf0ebd3984f7d19b25e4c4bd747113a9b33669a7f4b39a429e67e96fd2c479a3a149e7cb73d51eedf675731c75f83af67e8909f82fa8b0511fdd3e37257e4cb4aa00d3e804ddfba52d18d153975e2b7417f08bf5e215eb7648788a02cdcecab01ec2751be36dbd0c34d9cdb1f94b6a3bf469fe6befbf6467e3b0783098ac12eb4ef8ae53aeee2a65416088cd764ff8a1b097ae2742679716a81965e8a15be0c2ec960789be948334d263496abeffed47602f9e0ae5450575da30dc22526e831436aa1e42fde9efa7322598f09892a8e57fccfaa84b123eced5e6bc035ac06084a9bb5b65760b894ef8bb5c4f47ec9de2b383b6cf3860ebc8a91ef5fd479161a8781fffc4c7936eb8739753ab845017ba8efafc94ec65aa9f5cc2bfd6106c737c52b5acbff3e8a576699c4c5a97505d89a46a846478b919231c6f14ff6fd8304fb0bc06132630aa186b6e981d3934fe06a50a564a67ecc3ff8ea9d4bf7b7c32447c8df21a393e4b2c7d580c93b52190706db33f25707fc05a4a64ee5ff10710507e70bdb4606f986acbf3adf67dafbe33ddc18cc9c38c488dde9696725a4925acf5c20c2a6540d4fcdbf18b3c5387e2e997c91deea8e7394adeb03a8979b9a7cdee560e291032e8c624f1e5c598215e1f40155536b713d90db8ac8400058e2b8c8258733ca1a3bea73df7735df591ae8e79eb2eb27ba315000f0c096c6f882d09b94caefa647791f6bab4fb239626c1399fb44eb089a5b880e9da75bb770b8202df1aceaf2c5a2dc82dad86cf7f40a14fc7887a267ba306357360bf3417330812ff34fc1bb0c4de2d31946580da77efc7dd6d78b851415131256d2750cb37069dae35d7816bcd664d747bba91ccd2d84aa99560857a84e57bfe384a630ac3afd00a689a514d8b882862c3fef813c6e5fa2d5e0e4a38b36c9560d060e98d86c67c0d69eb2b16083ee008e82331cc6d1e404be7b23e1d5d52ae38da6b169378dcd934932c50e506544415af4cdcf2adbc5e2e1882a2767abe322d32a12e06aa36f02cd4b3bdf76e717df4c61c5798172896a2c4291b1fbcba7597ef3959be1dd492f034a4e330199791c81933d863136146d18ea029d0a944bd84be07abd944c2f1dd4b575446902276312665d64ab141ddebba9514e5f1caea8c1e25d6080ae753ec3cd7ced909378dab6d3ac9933544b49aeec896924e5f2322e248ddaa8d5fac1a2c209c74b18fccaac019a46396b36a74d020143772e4b07f3d750a46d8c308716f7b08f33364bcf47b74096bad57e2d7e3e7677b9a5ec678378fd5a3dc366df4c672ac09d9775e7ff2eeb5313d3958b005ea355007b0e8841263fb2d374d18995855ee2dd6ea967ce7b7f6de6c25be84945f752a040dd1054b59477340e9230c440310a348e0d2358b81e13d1ae7d8dd7fa5d8164bbc668a683cbde0cbb2ea963cd58bbf15d5df51155df9471b8cbc148b638d3baf1f8fc3472dba4b73859c81aaee71c6ae2b48f52b4153b515c4c1d0ef45c3f1dc38b259e5aa899d662acdde1450eb07cf4e9bedec158995f41884f54ce5706b88412873278518dff0073b441911bbd91f5f1abdc6d4574afdd21025dc70d5f29ec0311465412dfad70ef1f69354e5876b5a26ccee2b815e3791da801a44368e4cc911b527f57d1e75d2b9980d8dd497dfa7ab43a319127fb5333991a9e5241ec76144beb8ff8ec4fba6e935d138cf408938a5daf2493970d3ef7e2c6e355b0841f4eb4138a2ebd0de0310d56ed040f069c14693714af63e78558f846a0f0ec9d493d2abc6d0dc1d114665798ae920e3618babe9480e823390f8f71e845b8f07c9509e6f7434bd569f40c73d3350cfee4ef59a6f011af6feef3b1ec3942b14f7dad83d224a0594b895d069e0b104c7689a51e5e3b39f2ec16d89a3b2880d8718ee149a02b55a7a6e6781744e7e090069701edce94b53f16e0e782092a7a1019c4c3648fc111a40907f565f6176d018553a8a5dd29a86c03cf9e2a72a8470e8755273e03b2b9afc5b38cad40a88b9a6f43b3e54f3b75ae09a81589a6fe66a1ef0d761711298d6bbfc7cf1a252bbfda8efea7b87b9ced13b68864fba7867a261d94a2e5b4a8d8cece02f8424acd2e3c2d084d0c6059c311954196a4c474977edb8ddb8756fcdba4e1d087c31c92940408f3e3e9bd590e755ad36cb36db90e83fb2d76675f42d86345bce5c5aba5d1b969a4e8cdc659647d055a585da470efaefe71acdcbd1fb7baa7d606809089f9929c6afce7d56e65f28cccde7fb4c5d3eaceb3e42f690840da6a31c7a584f132deca20ca0b9865e9689b60327d3f6ea7c79750a28b255e225e21e33c11e8e38f7d9a4fb153a6b39c4a166830ae6878c829b2d46d5134f3337288ceaf7f24d200fc4e371e50bcc1ce681b35df5dd328d8059a1d07ff12db3d72d2b7c75523f3b536fe90025c2e25682a75816abf304eaa49be0b420326006b7f04c3da3d839a095417d13b9685b6507637929d0f5dad54902ed163baa72be1f0effcbc6dd5be0c00b49fb1fccd916de63c6813c48103a057607f549c064ba3e0c3307c6b78506d79dd81e4a820558c1efaca74b66aacca7aad6a17bca2cead389e4400f75cb93ffe873984cd7054b50e5ca40e1e7944dd6c5b8d62f9f995809afd58dff093657cbfb7c6f8568ea02ad3e5a325f2ad545791f39c671d7897ebd58317b0809357fd14ea71801087a27dc24264adff52e7037f71a4db36e0b9c7d60bb350ba5427d7cfcf4a5345fa7bd4bb3ce87287989f00f8a37167e1fa45971c6b79770ffac481bb0bffd3fe2d8cf0e5e2e4caad9afa6cc2052a026fc545ee824961f65cf42e9c7e590fd6f31d38e4d512ab4ad8d583c0c4c71c3276155c0adad2e8a584694c6ac29132a28571a03438b1e8a2354264d223456b5f92593f60be4dc8009c267dec56cf0814f21b4bb25191998c5efb5ff3f29b75d2f13edafe022916d06d5617cfe51a0c13afc2c9f306557668b3ba884fd33c3a2c95c9708e19c0955d98ceacf632dd26409f65d58c15e65f4ab7b0f945117376703af4ab4f973fffd6875b0849c11132045db741d8d88ea399b09536aba6b0ff9f27e1963f777c42e096215940895e8b94728ef6e751584bdd2f854c91ff272bafd237e803831088a737c0b2fadfa2d3644c518eb139bd8269075065e69797d4378e876ecaaebaaacf69351b46948c53bdfef90a72194cd0c6b1ecc2ec7541b49100eebbd60f5a12e7e1da2f7aec57adb0</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
  </entry>
  <entry>
    <title>OSError [Errno 22] Invalid argument(已解决)</title>
    <url>/posts/1a6f5167.html</url>
    <content><![CDATA[<p>最近跑别人的项目遇到一个这样的问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OSError: [Errno 22] Invalid argument xxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2023/07/12/pCh9Ni4.png" alt="屏幕截图 2023-07-12 203923"></p>
<p>一开始以为是没有用管理员的权限运行，导致创建不了日志文件</p>
<p>后来发现是和windows的命名规则冲突了（以下来源<a href="https://learn.microsoft.com/zh-cn/windows/win32/fileio/naming-a-file">官网地址</a>）</p>
<h3 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h3><p>以下基本规则使应用程序能够创建和处理文件和目录的有效名称，而不考虑文件系统：</p>
<ul>
<li><p>使用句点将基文件名与目录或文件名称中的扩展名分隔开。</p>
</li>
<li><p>使用反斜杠 () 分隔<em>路径</em>的<em>组件</em>。 反斜杠将文件名从路径中除以，将一个目录名与路径中的另一个目录名称分开。 不能在实际文件或目录的名称中使用反斜杠，因为它是将名称分隔成组件的保留字符。</p>
</li>
<li><p>根据需要使用反斜杠作为 <a href="https://learn.microsoft.com/zh-cn/windows/win32/fileio/naming-a-volume">卷名称</a>的一部分，例如“C：\”在“C：\path\file”或“\server\share\path\file”中为通用命名约定的“\server\share” (UNC) 名称。 有关 UNC 名称的详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/win32/fileio/naming-a-file#maximum-path-length-limitation">最大路径长度限制</a> 部分。</p>
</li>
<li><p>不要假定区分大小写。 例如，将 OSCAR、Oscar 和 oscar 的名称视为相同，即使某些文件系统 (（如符合 POSIX 的文件系统) 可能认为它们不同）。 请注意，NTFS 支持 POSIX 语义区分大小写，但这不是默认行为。 有关详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/FileAPI/nf-fileapi-createfilea"><strong>CreateFile</strong></a>。</p>
</li>
<li><p>(驱动器号) 的卷指定符同样不区分大小写。 例如，“D：\”和“d：\”引用同一卷。</p>
</li>
<li><p>使用当前代码页中的任何字符作为名称，包括 Unicode 字符和扩展字符集中 (128-255) 字符，但以下各项除外：</p>
<ul>
<li>以下保留字符：<ul>
<li>&lt;（小于）</li>
<li>>（大于）</li>
<li>:（冒号）</li>
<li>“（双引号）</li>
<li>/（正斜杠）</li>
<li>\（反斜杠）</li>
<li>| (竖线或竖线)</li>
<li>? （问号）</li>
<li>*（星号）</li>
</ul>
</li>
<li>整数值零，有时称为 ASCII <em>NUL</em> 字符。</li>
<li>整数表示形式的字符介于 1 到 31 之间，但允许这些字符的备用数据流除外。 有关文件流的详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/win32/fileio/file-streams">文件流</a>。</li>
<li>目标文件系统不允许的任何其他字符。</li>
</ul>
</li>
<li><p>使用句点作为路径中的目录 <em>组件</em> 来表示当前目录，例如“.\temp.txt”。 有关详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/win32/fileio/naming-a-file#fully-qualified-vs-relative-paths">路径</a>。</p>
</li>
<li><p>使用两个连续的句点 (。) 作为路径中的目录 <em>组件</em> 来表示当前目录的父目录，例如“.”。\temp.txt”。 有关详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/win32/fileio/naming-a-file#fully-qualified-vs-relative-paths">路径</a>。</p>
</li>
<li><p>不要将以下保留名称用于文件的名称：</p>
<p>CON、PRN、AUX、NUL、COM0、COM1、COM2、COM3、COM4、COM5、COM6、COM7、COM8、COM9、LPT0、LPT1、LPT2、LPT3、LPT4、LPT5、LPT6、LPT7、LPT8 和 LPT9。 另请避免这些名称紧跟扩展名;例如，NUL.txt 和 NUL.tar.gz 都等效于 NUL。 有关详细信息，请参阅<a href="https://learn.microsoft.com/zh-cn/windows/win32/fileio/naming-a-file#win32-file-namespaces">命名空间</a>。</p>
</li>
<li><p>不要用空格或句点结束文件或目录名称。 尽管基础文件系统可能支持此类名称，但 Windows shell 和用户界面不支持。 但是，可以接受指定句点作为名称的第一个字符。 例如“.temp”。</p>
</li>
</ul>
<h3 id="划重点：下列符号是不能用的"><a href="#划重点：下列符号是不能用的" class="headerlink" title="划重点：下列符号是不能用的"></a><strong>划重点：下列符号是不能用的</strong></h3><ul>
<li>&lt;（小于）</li>
<li>>（大于）</li>
<li>:（冒号）</li>
<li>“（双引号）</li>
<li>/（正斜杠）</li>
<li>\（反斜杠）</li>
<li>| (竖线或竖线)</li>
<li>? （问号）</li>
<li>*（星号）</li>
</ul>
<p>然后我细心的观察到了这一点</p>
<p><img src="https://s1.ax1x.com/2023/07/12/pChpwb8.png" alt="屏幕截图 2023-07-12 222221"></p>
<p>很显然，<code>:</code>是不能存在的</p>
<p>把他换成<code>-</code>后，程序就跑起来了</p>
<p><img src="https://s1.ax1x.com/2023/07/12/pCh96oD.png" alt="屏幕截图 2023-07-12 222822"></p>
<p>类似的问题可以参考一下下</p>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
  </entry>
  <entry>
    <title>算法期末复习</title>
    <url>/posts/8ff5c5ca.html</url>
    <content><![CDATA[<h2 id="用思维导图整理了一下算法的基本知识"><a href="#用思维导图整理了一下算法的基本知识" class="headerlink" title="用思维导图整理了一下算法的基本知识"></a>用思维导图整理了一下算法的基本知识</h2><p>&emsp;<br>&emsp;</p>
<ol>
<li>算法概述<br>&emsp;<img src="https://img-blog.csdnimg.cn/20201219173740232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="算法概述"><br>&emsp;</li>
<li><p>递归与分治策略<br>&emsp;<br><img src="https://img-blog.csdnimg.cn/20201219190206679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="递归与分治策略"></p>
<p>&emsp;</p>
</li>
<li><p>动态规划<br>&emsp;<br><img src="https://img-blog.csdnimg.cn/20201219173858421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="动态规划"><br>&emsp;</p>
</li>
<li><p>贪心算法<br>&emsp;<img src="https://img-blog.csdnimg.cn/20201219173922373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="贪心算法"><br>&emsp;</p>
</li>
<li><p>回溯法<br>&emsp;<br><img src="https://img-blog.csdnimg.cn/20201219173946942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="回溯法"><br>&emsp;</p>
</li>
<li>分支限界法<br>&emsp;<br><img src="https://img-blog.csdnimg.cn/20201219174007775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="分支限界法"></li>
</ol>
<p><a href="https://ruvikm.lanzous.com/i9b5ajim3kh">PDF文件（内有超链接）</a></p>
<p>参考资料：</p>
<ul>
<li><a href="https://blog.csdn.net/databatman/article/details/49304295">算法中的P问题、NP问题、NP完全问题和NP难问题</a></li>
<li><a href="https://blog.csdn.net/qq_45904930/article/details/110748764">分治法之棋盘覆盖问题</a></li>
<li><a href="https://blog.csdn.net/yjt13/article/details/82085537">排序之归并排序</a></li>
<li><a href="https://blog.csdn.net/baidu_28312631/article/details/47418773">教你彻底学会动态规划——入门篇</a></li>
<li><a href="https://blog.csdn.net/listen132/article/details/111242757">矩阵连乘</a></li>
<li><a href="https://blog.csdn.net/a2392008643/article/details/81781766">最小生成树的两种方法（Kruskal算法和Prim算法）</a></li>
<li><a href="https://blog.csdn.net/daoshen1314/article/details/101294101">循环赛日程表（分治法）</a></li>
</ul>
<p>最后推荐一个算法可视化的网站<br><a href="https://visualgo.net/">VisuAlgo</a></p>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>软件体系结构基本知识——期末复习</title>
    <url>/posts/15345830.html</url>
    <content><![CDATA[<p>根据老师画的重点做了一些思维导图，希望可以帮到需要的人</p>
<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p><img src="https://img-blog.csdnimg.cn/20201214181436726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="第一章"></p>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p><img src="https://img-blog.csdnimg.cn/20201214181451777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="第二章"></p>
<h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p><img src="https://img-blog.csdnimg.cn/20201214230846302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="第三章"></p>
<h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><p><img src="https://img-blog.csdnimg.cn/20201214181617762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="第四章"></p>
<h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><p><img src="https://img-blog.csdnimg.cn/20201214181632906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="第六章"></p>
<h2 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h2><p><img src="https://img-blog.csdnimg.cn/20201214181647481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="第七章"></p>
<h2 id="第八-九章"><a href="#第八-九章" class="headerlink" title="第八-九章"></a>第八-九章</h2><p><img src="https://img-blog.csdnimg.cn/20201214205838338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1dmlrbQ==,size_16,color_FFFFFF,t_70#pic_center" alt="第八-九章"></p>
<p><a href="https://ruvikm.lanzous.com/isUckjdbc0f">PDF文件</a></p>
<p>做得如有不足，敬请谅解~</p>
]]></content>
      <categories>
        <category>个人笔记</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>在虚拟机Centos 7中配置Redis环境</title>
    <url>/posts/undefined.html</url>
    <content><![CDATA[<h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载fedora的epel仓库</span></span><br><span class="line">sudo yum install epel-release</span><br><span class="line"><span class="comment"># 安装redis数据库</span></span><br><span class="line">sudo yum install redis</span><br></pre></td></tr></table></figure>
<p>测试是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动redis</span></span><br><span class="line">service redis start</span><br><span class="line"><span class="comment">#查看redis进程</span></span><br><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure>
<p><img src="https://s11.ax1x.com/2024/01/08/pFSvcQg.png" alt="image-20240108203745982"></p>
<h2 id="配置Redis"><a href="#配置Redis" class="headerlink" title="配置Redis"></a>配置Redis</h2><p><strong>以需求为远程连接Redis为例</strong></p>
<p>开始配置之前，先关闭Redis服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭redis</span></span><br><span class="line">service redis stop</span><br></pre></td></tr></table></figure>
<h4 id="打开配置文件"><a href="#打开配置文件" class="headerlink" title="打开配置文件"></a>打开配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/redis.conf</span><br></pre></td></tr></table></figure>
<p>进入编辑器后，输入<code>/</code>+<code>搜索的内容</code>然后回车进行搜索，按<code>n</code>键查找下一个(eg:修改端口号时输入/port)，按<code>i</code>进入到插入模式进行修改，修改完后按<code>Esc</code>退出插入模式</p>
<h4 id="修改端口号（按照需求修改）"><a href="#修改端口号（按照需求修改）" class="headerlink" title="修改端口号（按照需求修改）"></a>修改端口号（按照需求修改）</h4><p><img src="https://s11.ax1x.com/2024/01/08/pFSvmM4.png" alt="image-20240108202709064"></p>
<h4 id="修改默认密码（建议修改）"><a href="#修改默认密码（建议修改）" class="headerlink" title="修改默认密码（建议修改）"></a>修改默认密码（建议修改）</h4><p><img src="https://s11.ax1x.com/2024/01/08/pFSvnsJ.png" alt="image-20240108202554924"></p>
<h4 id="取消只允许在本机连接redis"><a href="#取消只允许在本机连接redis" class="headerlink" title="取消只允许在本机连接redis"></a>取消只允许在本机连接redis</h4><p><img src="https://s11.ax1x.com/2024/01/08/pFSzuU1.png" alt="image-20240108202958241"></p>
<p>将<code>bind 127.0.0.1</code>注释掉</p>
<p>然后输入<code>:wq</code>保存并退出</p>
<h4 id="设置Redis开机自启"><a href="#设置Redis开机自启" class="headerlink" title="设置Redis开机自启"></a>设置Redis开机自启</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig redis on</span><br></pre></td></tr></table></figure>
<h2 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h2><p>在linux下的防火墙中开放6379端口（如果上面更换了端口号就按自己的来）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br></pre></td></tr></table></figure>
<p>重启防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure>
<h2 id="使用可视化软件连接Redis"><a href="#使用可视化软件连接Redis" class="headerlink" title="使用可视化软件连接Redis"></a>使用可视化软件连接Redis</h2><p>下载可视化软件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://gitee.com/qishibo/AnotherRedisDesktopManager/releases</span><br></pre></td></tr></table></figure>
<p>查看自己ip地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>
<p><img src="https://s11.ax1x.com/2024/01/08/pFSzK4x.png" alt="屏幕截图 2024-01-08 204612"></p>
<p>配置远程连接，地址为上面的箭头所指的ip地址，密码为刚刚配置Redis时配置的</p>
<p><img src="https://s11.ax1x.com/2024/01/08/pFSzQC6.png" alt="屏幕截图 2024-01-08 205033"></p>
<p>连接成功</p>
<p><img src="https://s11.ax1x.com/2024/01/08/pFSzl8K.png" alt="屏幕截图 2024-01-08 205120"></p>
]]></content>
      <tags>
        <tag>个人笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>jz23 链表中环的入口结点</title>
    <url>/posts/f7d0df50.html</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给一个长度为n链表，若其中包含环，请找出该链表的环的入口结点，否则，返回null。</p>
<p>数据范围： n≤10000，1&lt;=结点值&lt;=10000</p>
<p>要求：空间复杂度 O<em>(1)，时间复杂度 O</em>(<em>n</em>)</p>
<p>例如，输入{1,2},{3,4,5}时，对应的环形链表如下图所示：</p>
<p><img src="https://z1.ax1x.com/2023/11/20/piU6lqS.png" alt="img"></p>
<p>可以看到环的入口结点的结点值为3，所以返回结点值为3的结点。</p>
<h3 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h3><p>输入分为2段，第一段是入环前的链表部分，第二段是链表环的部分，后台会根据第二段是否为空将这两段组装成一个无环或者有环单链表</p>
<h3 id="返回值描述："><a href="#返回值描述：" class="headerlink" title="返回值描述："></a>返回值描述：</h3><p>返回链表的环的入口结点即可，我们后台程序会打印这个结点对应的结点值；若没有，则返回对应编程语言的空结点即可。</p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1,2&#125;,&#123;3,4,5&#125;</span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回环形链表入口结点，我们后台程序会打印该环形链表入口结点对应的结点值，即3   </span><br></pre></td></tr></table></figure>
<h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1&#125;,&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;null&quot;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">没有环，返回对应编程语言的空结点，后台程序会打印&quot;null&quot;   </span><br></pre></td></tr></table></figure>
<h2 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h2><p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;,&#123;2&#125;</span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">环的部分只有一个结点，所以返回该环形链表入口结点，后台程序打印该结点对应的结点值，即2 </span><br></pre></td></tr></table></figure>
<h2 id="题解1"><a href="#题解1" class="headerlink" title="题解1"></a>题解1</h2><p>如果不考虑空间复杂度，可以使用一个大小为10000的数组<code>a</code>存放各个结点的值，每当遍历到一个节点V的时候，就把<code>a[v-val]++</code></p>
<p>因为存在换，所以当第一个<code>a[v-val] == 2</code>的时候，即为环的入口结点</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">        val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vt</span><span class="params">(<span class="number">10000</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(pHead != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            vt[pHead-&gt;val]++;</span><br><span class="line">            <span class="keyword">if</span>(vt[pHead-&gt;val] == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pHead = pHead-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="题解2"><a href="#题解2" class="headerlink" title="题解2"></a>题解2</h2><p>可以使用快慢指针，快指针<code>fast</code>每次走两步，慢指针<code>slow</code>每次走一步。这样如果有环存在的话，在环中，快慢指针的距离，每移动一次距离就会减一，这样如果它们相遇的话，就一定可以判断链表中有没有环。</p>
<p>那么如何判断环的入口点是在哪里呢？我们假设环前面的节点有a个，环中的节点有b个，慢指针走的长度为S_dis</p>
<p>快指针走的路线为F_dis。当两个指针相遇时，依据题意可以等于以下两个等式</p>
<script type="math/tex; mode=display">
F_{dis} = 2  S_{dis}(因为快指针每次走的步数是慢指针的两倍)</script><script type="math/tex; mode=display">
F_{dis} = a + nb(当两者相遇时，快指针一定已经绕环走了n圈)</script><p>联立可得</p>
<script type="math/tex; mode=display">
2  S_{dis} = a + nb</script><p>可以得出</p>
<script type="math/tex; mode=display">
a = S_{dis} = nb</script><script type="math/tex; mode=display">
F_{dis} = 2nb</script><p>所以当两个指针相遇的时候，将快指针移到链表头部重新往后走，这次一次走一步。慢指针保持原来的位置，继续向后走，也是一次走一步，当两个指针相遇的时候，即是环的入口处。（这时候快指针刚好走完<code>a = nb</code>的长度到达环的入口处）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">        val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">        ListNode* slow = pHead;</span><br><span class="line">        ListNode* fast = pHead;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            slow = slow -&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            <span class="comment">//如果指向空就说明没有环</span></span><br><span class="line">            <span class="keyword">if</span> (slow == <span class="literal">nullptr</span> || fast == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (slow != fast);</span><br><span class="line">        fast = pHead;</span><br><span class="line">        <span class="keyword">while</span> (fast != slow) &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>刷题笔记</category>
      </categories>
  </entry>
</search>
